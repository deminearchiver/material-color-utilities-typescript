{"version":3,"file":"index.js","names":["delinearized","n: number","aw: number","nbb: number","ncb: number","c: number","nc: number","rgbD: number[]","fl: number","fLRoot: number","z: number","hue: number","chroma: number","j: number","q: number","m: number","s: number","jstar: number","astar: number","bstar: number","delinearized","argb: number","differenceDegrees","low: number","normal: number","medium: number","high: number","name: string","palette: (scheme: DynamicScheme) => TonalPalette","tone: (scheme: DynamicScheme) => number","isBackground: boolean","chromaMultiplier?: (scheme: DynamicScheme) => number","background?: (scheme: DynamicScheme) => DynamicColor | undefined","secondBackground?: (\n      scheme: DynamicScheme,\n    ) => DynamicColor | undefined","contrastCurve?: (\n      scheme: DynamicScheme,\n    ) => ContrastCurve | undefined","toneDeltaPair?: (\n      scheme: DynamicScheme,\n    ) => ToneDeltaPair | undefined","opacity?: (scheme: DynamicScheme) => number | undefined","getSpec","spec2021","spec2025","hue: number","chroma: number","keyColor: Hct","requestedChroma: number","input: Hct","desiredTotalTempDeltaForIndex","hcts: Hct[]","roleA: DynamicColor","roleB: DynamicColor","delta: number","polarity: TonePolarity","stayTogether: boolean","constraint?: DeltaConstraint","color2025: DynamicColor","s","primary: TonalPalette","secondary: TonalPalette","tertiary: TonalPalette","neutral: TonalPalette","neutralVariant: TonalPalette","weights: number[]","momentsR: number[]","momentsG: number[]","momentsB: number[]","moments: number[]","cubes: Box[]","colors: number[]","r0: number","r1: number","g0: number","g1: number","b0: number","b1: number","vol: number","requestedCount: number","resultCount: number","cutLocation: number","maximum: number","props: {\n      colorAccentPrimary: number;\n      colorAccentPrimaryVariant: number;\n      colorAccentSecondary: number;\n      colorAccentSecondaryVariant: number;\n      colorAccentTertiary: number;\n      colorAccentTertiaryVariant: number;\n      textColorPrimary: number;\n      textColorSecondary: number;\n      textColorTertiary: number;\n      textColorPrimaryInverse: number;\n      textColorSecondaryInverse: number;\n      textColorTertiaryInverse: number;\n      colorBackground: number;\n      colorBackgroundFloating: number;\n      colorSurface: number;\n      colorSurfaceVariant: number;\n      colorSurfaceHighlight: number;\n      surfaceHeader: number;\n      underSurface: number;\n      offState: number;\n      accentSurface: number;\n      textPrimaryOnAccent: number;\n      textSecondaryOnAccent: number;\n      volumeBackground: number;\n      scrim: number;\n    }","props: {\n      primary: number;\n      onPrimary: number;\n      primaryContainer: number;\n      onPrimaryContainer: number;\n      secondary: number;\n      onSecondary: number;\n      secondaryContainer: number;\n      onSecondaryContainer: number;\n      tertiary: number;\n      onTertiary: number;\n      tertiaryContainer: number;\n      onTertiaryContainer: number;\n      error: number;\n      onError: number;\n      errorContainer: number;\n      onErrorContainer: number;\n      background: number;\n      onBackground: number;\n      surface: number;\n      onSurface: number;\n      surfaceVariant: number;\n      onSurfaceVariant: number;\n      outline: number;\n      outlineVariant: number;\n      shadow: number;\n      scrim: number;\n      inverseSurface: number;\n      inverseOnSurface: number;\n      inversePrimary: number;\n    }","colorsHct: Hct[]","chosenColors: Hct[]","differenceDegrees","colors: number[]","pixels: number[]"],"sources":["../src/utils/math_utils.ts","../src/utils/color_utils.ts","../src/hct/viewing_conditions.ts","../src/hct/cam16.ts","../src/hct/hct_solver.ts","../src/hct/hct.ts","../src/blend/blend.ts","../src/contrast/contrast.ts","../src/dislike/dislike_analyzer.ts","../src/dynamiccolor/contrast_curve.ts","../src/dynamiccolor/dynamic_color.ts","../src/palettes/tonal_palette.ts","../src/temperature/temperature_cache.ts","../src/dynamiccolor/tone_delta_pair.ts","../src/dynamiccolor/variant.ts","../src/dynamiccolor/color_spec_2021.ts","../src/dynamiccolor/spec_version.ts","../src/dynamiccolor/platform.ts","../src/dynamiccolor/color_spec_2025.ts","../src/dynamiccolor/material_dynamic_colors.ts","../src/dynamiccolor/dynamic_scheme.ts","../src/palettes/core_palette.ts","../src/palettes/core_palettes.ts","../src/quantize/lab_point_provider.ts","../src/quantize/quantizer_wsmeans.ts","../src/quantize/quantizer_map.ts","../src/quantize/quantizer_wu.ts","../src/quantize/quantizer_celebi.ts","../src/scheme/scheme_android.ts","../src/scheme/scheme_content.ts","../src/scheme/scheme_expressive.ts","../src/scheme/scheme_fidelity.ts","../src/scheme/scheme_fruit_salad.ts","../src/scheme/scheme_monochrome.ts","../src/scheme/scheme_neutral.ts","../src/scheme/scheme_rainbow.ts","../src/scheme/scheme_tonal_spot.ts","../src/scheme/scheme_vibrant.ts","../src/scheme/scheme.ts","../src/score/score.ts","../src/utils/image_utils.ts","../src/utils/string_utils.ts","../src/utils/theme_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\n/**\n * Utility methods for mathematical operations.\n */\n\n/**\n * The signum function.\n *\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\n */\nexport function signum(num: number): number {\n  if (num < 0) {\n    return -1;\n  } else if (num === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * The linear interpolation function.\n *\n * @return start if amount = 0 and stop if amount = 1\n */\nexport function lerp(start: number, stop: number, amount: number): number {\n  return (1.0 - amount) * start + amount * stop;\n}\n\n/**\n * Clamps an integer between two integers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampInt(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Clamps an integer between two floating-point numbers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampDouble(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Sanitizes a degree measure as an integer.\n *\n * @return a degree measure between 0 (inclusive) and 360\n * (exclusive).\n */\nexport function sanitizeDegreesInt(degrees: number): number {\n  degrees = degrees % 360;\n  if (degrees < 0) {\n    degrees = degrees + 360;\n  }\n  return degrees;\n}\n\n/**\n * Sanitizes a degree measure as a floating-point number.\n *\n * @return a degree measure between 0.0 (inclusive) and 360.0\n * (exclusive).\n */\nexport function sanitizeDegreesDouble(degrees: number): number {\n  degrees = degrees % 360.0;\n  if (degrees < 0) {\n    degrees = degrees + 360.0;\n  }\n  return degrees;\n}\n\n/**\n * Sign of direction change needed to travel from one angle to\n * another.\n *\n * For angles that are 180 degrees apart from each other, both\n * directions have the same travel distance, so either direction is\n * shortest. The value 1.0 is returned in this case.\n *\n * @param from The angle travel starts from, in degrees.\n * @param to The angle travel ends at, in degrees.\n * @return -1 if decreasing from leads to the shortest travel\n * distance, 1 if increasing from leads to the shortest travel\n * distance.\n */\nexport function rotationDirection(from: number, to: number): number {\n  const increasingDifference = sanitizeDegreesDouble(to - from);\n  return increasingDifference <= 180.0 ? 1.0 : -1.0;\n}\n\n/**\n * Distance of two points on a circle, represented using degrees.\n */\nexport function differenceDegrees(a: number, b: number): number {\n  return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n\n/**\n * Multiplies a 1x3 row vector with a 3x3 matrix.\n */\nexport function matrixMultiply(row: number[], matrix: number[][]): number[] {\n  const a =\n    row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\n  const b =\n    row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\n  const c =\n    row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\n  return [a, b, c];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as mathUtils from \"./math_utils\";\n\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\n\nconst SRGB_TO_XYZ = [\n  [0.41233895, 0.35762064, 0.18051042],\n  [0.2126, 0.7152, 0.0722],\n  [0.01932141, 0.11916382, 0.95034478],\n];\n\nconst XYZ_TO_SRGB = [\n  [3.2413774792388685, -1.5376652402851851, -0.49885366846268053],\n  [-0.9691452513005321, 1.8758853451067872, 0.04156585616912061],\n  [0.05562093689691305, -0.20395524564742123, 1.0571799111220335],\n];\n\nconst WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red: number, green: number, blue: number): number {\n  return (\n    ((255 << 24) |\n      ((red & 255) << 16) |\n      ((green & 255) << 8) |\n      (blue & 255)) >>>\n    0\n  );\n}\n\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb: number[]): number {\n  const r = delinearized(linrgb[0]);\n  const g = delinearized(linrgb[1]);\n  const b = delinearized(linrgb[2]);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb: number): number {\n  return (argb >> 24) & 255;\n}\n\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb: number): number {\n  return (argb >> 16) & 255;\n}\n\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb: number): number {\n  return (argb >> 8) & 255;\n}\n\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb: number): number {\n  return argb & 255;\n}\n\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb: number): boolean {\n  return alphaFromArgb(argb) >= 255;\n}\n\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x: number, y: number, z: number): number {\n  const matrix = XYZ_TO_SRGB;\n  const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n  const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n  const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n  const r = delinearized(linearR);\n  const g = delinearized(linearG);\n  const b = delinearized(linearB);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb: number): number[] {\n  const r = linearized(redFromArgb(argb));\n  const g = linearized(greenFromArgb(argb));\n  const b = linearized(blueFromArgb(argb));\n  return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n\n/**\n * Converts a color represented in Lab color space into an ARGB\n * integer.\n */\nexport function argbFromLab(l: number, a: number, b: number): number {\n  const whitePoint = WHITE_POINT_D65;\n  const fy = (l + 16.0) / 116.0;\n  const fx = a / 500.0 + fy;\n  const fz = fy - b / 200.0;\n  const xNormalized = labInvf(fx);\n  const yNormalized = labInvf(fy);\n  const zNormalized = labInvf(fz);\n  const x = xNormalized * whitePoint[0];\n  const y = yNormalized * whitePoint[1];\n  const z = zNormalized * whitePoint[2];\n  return argbFromXyz(x, y, z);\n}\n\n/**\n * Converts a color from ARGB representation to L*a*b*\n * representation.\n *\n * @param argb the ARGB representation of a color\n * @return a Lab object representing the color\n */\nexport function labFromArgb(argb: number): number[] {\n  const linearR = linearized(redFromArgb(argb));\n  const linearG = linearized(greenFromArgb(argb));\n  const linearB = linearized(blueFromArgb(argb));\n  const matrix = SRGB_TO_XYZ;\n  const x =\n    matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;\n  const y =\n    matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;\n  const z =\n    matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;\n  const whitePoint = WHITE_POINT_D65;\n  const xNormalized = x / whitePoint[0];\n  const yNormalized = y / whitePoint[1];\n  const zNormalized = z / whitePoint[2];\n  const fx = labF(xNormalized);\n  const fy = labF(yNormalized);\n  const fz = labF(zNormalized);\n  const l = 116.0 * fy - 16;\n  const a = 500.0 * (fx - fy);\n  const b = 200.0 * (fy - fz);\n  return [l, a, b];\n}\n\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar: number): number {\n  const y = yFromLstar(lstar);\n  const component = delinearized(y);\n  return argbFromRgb(component, component, component);\n}\n\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb: number): number {\n  const y = xyzFromArgb(argb)[1];\n  return 116.0 * labF(y / 100.0) - 16.0;\n}\n\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar: number): number {\n  return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n\n/**\n * Converts a Y value to an L* value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param y Y in XYZ\n * @return L* in L*a*b*\n */\nexport function lstarFromY(y: number): number {\n  return labF(y / 100.0) * 116.0 - 16.0;\n}\n\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 255.0;\n  if (normalized <= 0.040449936) {\n    return (normalized / 12.92) * 100.0;\n  } else {\n    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n  }\n}\n\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 100.0;\n  let delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } else {\n    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65(): number[] {\n  return WHITE_POINT_D65;\n}\n\nfunction labF(t: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  if (t > e) {\n    return Math.pow(t, 1.0 / 3.0);\n  } else {\n    return (kappa * t + 16) / 116;\n  }\n}\n\nfunction labInvf(ft: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  const ft3 = ft * ft * ft;\n  if (ft3 > e) {\n    return ft3;\n  } else {\n    return (116 * ft - 16) / kappa;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from \"../utils/color_utils\";\nimport * as math from \"../utils/math_utils\";\n\n/**\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n *\n * This class caches intermediate values of the CAM16 conversion process that\n * depend only on viewing conditions, enabling speed ups.\n */\nexport class ViewingConditions {\n  /** sRGB-like viewing conditions.  */\n  static DEFAULT = ViewingConditions.make();\n\n  /**\n   * Create ViewingConditions from a simple, physically relevant, set of\n   * parameters.\n   *\n   * @param whitePoint White point, measured in the XYZ color space.\n   *     default = D65, or sunny day afternoon\n   * @param adaptingLuminance The luminance of the adapting field. Informally,\n   *     how bright it is in the room where the color is viewed. Can be\n   *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n   *     or 200 lux.\n   * @param backgroundLstar The lightness of the area surrounding the color.\n   *     measured by L* in L*a*b*. default = 50.0\n   * @param surround A general description of the lighting surrounding the\n   *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n   *     dimly light room, like watching TV at home at night. 2.0 means there\n   *     is no difference between the lighting on the color and around it.\n   *     default = 2.0\n   * @param discountingIlluminant Whether the eye accounts for the tint of the\n   *     ambient lighting, such as knowing an apple is still red in green light.\n   *     default = false, the eye does not perform this process on\n   *       self-luminous objects like displays.\n   */\n  static make(\n    whitePoint = utils.whitePointD65(),\n    adaptingLuminance = ((200.0 / Math.PI) * utils.yFromLstar(50.0)) / 100.0,\n    backgroundLstar = 50.0,\n    surround = 2.0,\n    discountingIlluminant = false,\n  ): ViewingConditions {\n    const xyz = whitePoint;\n    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n    const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n    const f = 0.8 + surround / 10.0;\n    const c =\n      f >= 0.9\n        ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0)\n        : math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n    let d = discountingIlluminant\n      ? 1.0\n      : f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n    d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n    const nc = f;\n    const rgbD = [\n      d * (100.0 / rW) + 1.0 - d,\n      d * (100.0 / gW) + 1.0 - d,\n      d * (100.0 / bW) + 1.0 - d,\n    ];\n    const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n    const k4 = k * k * k * k;\n    const k4F = 1.0 - k4;\n    const fl =\n      k4 * adaptingLuminance +\n      0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n    const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n    const z = 1.48 + Math.sqrt(n);\n    const nbb = 0.725 / Math.pow(n, 0.2);\n    const ncb = nbb;\n    const rgbAFactors = [\n      Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\n    ];\n    const rgbA = [\n      (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\n      (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\n      (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\n    ];\n    const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n    return new ViewingConditions(\n      n,\n      aw,\n      nbb,\n      ncb,\n      c,\n      nc,\n      rgbD,\n      fl,\n      Math.pow(fl, 0.25),\n      z,\n    );\n  }\n\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  private constructor(\n    public n: number,\n    public aw: number,\n    public nbb: number,\n    public ncb: number,\n    public c: number,\n    public nc: number,\n    public rgbD: number[],\n    public fl: number,\n    public fLRoot: number,\n    public z: number,\n  ) {}\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from \"../utils/color_utils\";\nimport * as math from \"../utils/math_utils\";\n\nimport { ViewingConditions } from \"./viewing_conditions\";\n\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nexport class Cam16 {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  constructor(\n    readonly hue: number,\n    readonly chroma: number,\n    readonly j: number,\n    readonly q: number,\n    readonly m: number,\n    readonly s: number,\n    readonly jstar: number,\n    readonly astar: number,\n    readonly bstar: number,\n  ) {}\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  distance(other: Cam16): number {\n    const dJ = this.jstar - other.jstar;\n    const dA = this.astar - other.astar;\n    const dB = this.bstar - other.bstar;\n    const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n    const dE = 1.41 * Math.pow(dEPrime, 0.63);\n    return dE;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return CAM16 color, assuming the color was viewed in default viewing\n   *     conditions.\n   */\n  static fromInt(argb: number): Cam16 {\n    return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   * @return CAM16 color.\n   */\n  static fromIntInViewingConditions(\n    argb: number,\n    viewingConditions: ViewingConditions,\n  ): Cam16 {\n    const red = (argb & 0x00ff0000) >> 16;\n    const green = (argb & 0x0000ff00) >> 8;\n    const blue = argb & 0x000000ff;\n    const redL = utils.linearized(red);\n    const greenL = utils.linearized(green);\n    const blueL = utils.linearized(blue);\n    const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n    const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n    const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n    const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n    const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n\n    const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n    const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n    const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = (atan2 * 180.0) / Math.PI;\n    const hue =\n      atanDegrees < 0\n        ? atanDegrees + 360.0\n        : atanDegrees >= 360\n          ? atanDegrees - 360.0\n          : atanDegrees;\n    const hueRadians = (hue * Math.PI) / 180.0;\n\n    const ac = p2 * viewingConditions.nbb;\n    const j =\n      100.0 *\n      Math.pow(\n        ac / viewingConditions.aw,\n        viewingConditions.c * viewingConditions.z,\n      );\n    const q =\n      (4.0 / viewingConditions.c) *\n      Math.sqrt(j / 100.0) *\n      (viewingConditions.aw + 4.0) *\n      viewingConditions.fLRoot;\n    const huePrime = hue < 20.14 ? hue + 360 : hue;\n    const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n    const p1 =\n      (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n    const alpha =\n      Math.pow(t, 0.9) *\n      Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const c = alpha * Math.sqrt(j / 100.0);\n    const m = c * viewingConditions.fLRoot;\n    const s =\n      50.0 *\n      Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n\n    return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   */\n  static fromJch(j: number, c: number, h: number): Cam16 {\n    return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromJchInViewingConditions(\n    j: number,\n    c: number,\n    h: number,\n    viewingConditions: ViewingConditions,\n  ): Cam16 {\n    const q =\n      (4.0 / viewingConditions.c) *\n      Math.sqrt(j / 100.0) *\n      (viewingConditions.aw + 4.0) *\n      viewingConditions.fLRoot;\n    const m = c * viewingConditions.fLRoot;\n    const alpha = c / Math.sqrt(j / 100.0);\n    const s =\n      50.0 *\n      Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const hueRadians = (h * Math.PI) / 180.0;\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   */\n  static fromUcs(jstar: number, astar: number, bstar: number): Cam16 {\n    return Cam16.fromUcsInViewingConditions(\n      jstar,\n      astar,\n      bstar,\n      ViewingConditions.DEFAULT,\n    );\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromUcsInViewingConditions(\n    jstar: number,\n    astar: number,\n    bstar: number,\n    viewingConditions: ViewingConditions,\n  ): Cam16 {\n    const a = astar;\n    const b = bstar;\n    const m = Math.sqrt(a * a + b * b);\n    const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n    const c = M / viewingConditions.fLRoot;\n    let h = Math.atan2(b, a) * (180.0 / Math.PI);\n    if (h < 0.0) {\n      h += 360.0;\n    }\n    const j = jstar / (1 - (jstar - 100) * 0.007);\n    return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n  }\n\n  /**\n   *  @return ARGB representation of color, assuming the color was viewed in\n   *     default viewing conditions, which are near-identical to the default\n   *     viewing conditions for sRGB.\n   */\n  toInt(): number {\n    return this.viewed(ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param viewingConditions Information about the environment where the color\n   *     will be viewed.\n   * @return ARGB representation of color\n   */\n  viewed(viewingConditions: ViewingConditions): number {\n    const alpha =\n      this.chroma === 0.0 || this.j === 0.0\n        ? 0.0\n        : this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n      alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n      1.0 / 0.9,\n    );\n    const hRad = (this.hue * Math.PI) / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac =\n      viewingConditions.aw *\n      Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n      eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const p2 = ac / viewingConditions.nbb;\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma =\n      (23.0 * (p2 + 0.305) * t) /\n      (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC =\n      math.signum(rA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC =\n      math.signum(gA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC =\n      math.signum(bA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    const argb = utils.argbFromXyz(x, y, z);\n    return argb;\n  }\n\n  /// Given color expressed in XYZ and viewed in [viewingConditions], convert to\n  /// CAM16.\n  static fromXyzInViewingConditions(\n    x: number,\n    y: number,\n    z: number,\n    viewingConditions: ViewingConditions,\n  ): Cam16 {\n    // Transform XYZ to 'cone'/'rgb' responses\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    // Discount illuminant\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    // chromatic adaptation\n    const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n    const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n    const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n    const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n    const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n    const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n\n    // auxiliary components\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n\n    // hue\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = (atan2 * 180.0) / Math.PI;\n    const hue =\n      atanDegrees < 0\n        ? atanDegrees + 360.0\n        : atanDegrees >= 360\n          ? atanDegrees - 360\n          : atanDegrees;\n    const hueRadians = (hue * Math.PI) / 180.0;\n\n    // achromatic response to color\n    const ac = p2 * viewingConditions.nbb;\n\n    // CAM16 lightness and brightness\n    const J =\n      100.0 *\n      Math.pow(\n        ac / viewingConditions.aw,\n        viewingConditions.c * viewingConditions.z,\n      );\n    const Q =\n      (4.0 / viewingConditions.c) *\n      Math.sqrt(J / 100.0) *\n      (viewingConditions.aw + 4.0) *\n      viewingConditions.fLRoot;\n\n    const huePrime = hue < 20.14 ? hue + 360 : hue;\n    const eHue =\n      (1.0 / 4.0) * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n    const p1 =\n      (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n    const alpha =\n      Math.pow(t, 0.9) *\n      Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    // CAM16 chroma, colorfulness, chroma\n    const C = alpha * Math.sqrt(J / 100.0);\n    const M = C * viewingConditions.fLRoot;\n    const s =\n      50.0 *\n      Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n\n    // CAM16-UCS components\n    const jstar = ((1.0 + 100.0 * 0.007) * J) / (1.0 + 0.007 * J);\n    const mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);\n  }\n\n  /// XYZ representation of CAM16 seen in [viewingConditions].\n  xyzInViewingConditions(viewingConditions: ViewingConditions): number[] {\n    const alpha =\n      this.chroma === 0.0 || this.j === 0.0\n        ? 0.0\n        : this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n      alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n      1.0 / 0.9,\n    );\n    const hRad = (this.hue * Math.PI) / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac =\n      viewingConditions.aw *\n      Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n      eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n\n    const p2 = ac / viewingConditions.nbb;\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma =\n      (23.0 * (p2 + 0.305) * t) /\n      (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC =\n      math.signum(rA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC =\n      math.signum(gA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC =\n      math.signum(bA) *\n      (100.0 / viewingConditions.fl) *\n      Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    return [x, y, z];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as colorUtils from \"../utils/color_utils\";\nimport * as mathUtils from \"../utils/math_utils\";\n\nimport { Cam16 } from \"./cam16\";\nimport { ViewingConditions } from \"./viewing_conditions\";\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nexport class HctSolver {\n  static SCALED_DISCOUNT_FROM_LINRGB = [\n    [0.001200833568784504, 0.002389694492170889, 0.0002795742885861124],\n    [0.0005891086651375999, 0.0029785502573438758, 0.0003270666104008398],\n    [0.00010146692491640572, 0.0005364214359186694, 0.0032979401770712076],\n  ];\n\n  static LINRGB_FROM_SCALED_DISCOUNT = [\n    [1373.2198709594231, -1100.4251190754821, -7.278681089101213],\n    [-271.815969077903, 559.6580465940733, -32.46047482791194],\n    [1.9622899599665666, -57.173814538844006, 308.7233197812385],\n  ];\n\n  static Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\n\n  static CRITICAL_PLANES = [\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313, 0.13658714259697685, 0.16693984095186062,\n    0.19729253930674434, 0.2276452376616281, 0.2579979360165119,\n    0.28835063437139563, 0.3188300904430532, 0.350925934958123,\n    0.3848314933096426, 0.42057480301049466, 0.458183274052838,\n    0.4976837250274023, 0.5391024159806381, 0.5824650784040898,\n    0.6277969426914107, 0.6751227633498623, 0.7244668422128921,\n    0.775853049866786, 0.829304845476233, 0.8848452951698498, 0.942497089126609,\n    1.0022825574869039, 1.0642236851973577, 1.1283421258858297,\n    1.1946592148522128, 1.2631959812511864, 1.3339731595349034,\n    1.407011200216447, 1.4823302800086415, 1.5599503113873272,\n    1.6398909516233677, 1.7221716113234105, 1.8068114625156377,\n    1.8938294463134073, 1.9832442801866852, 2.075074464868551,\n    2.1693382909216234, 2.2660538449872063, 2.36523901573795,\n    2.4669114995532007, 2.5710888059345764, 2.6777882626779785,\n    2.7870270208169257, 2.898822059350997, 3.0131901897720907,\n    3.1301480604002863, 3.2497121605402226, 3.3718988244681087,\n    3.4967242352587946, 3.624204428461639, 3.754355295633311, 3.887192587735158,\n    4.022731918402185, 4.160988767090289, 4.301978482107941, 4.445716283538092,\n    4.592217266055746, 4.741496401646282, 4.893568542229298, 5.048448422192488,\n    5.20615066083972, 5.3666897647573375, 5.5300801301023865, 5.696336044816294,\n    5.865471690767354, 6.037501145825082, 6.212438385869475, 6.390297286737924,\n    6.571091626112461, 6.7548350853498045, 6.941541251256611, 7.131223617812143,\n    7.323895587840543, 7.5195704746346665, 7.7182615035334345,\n    7.919981813454504, 8.124744458384042, 8.332562408825165, 8.543448553206703,\n    8.757415699253682, 8.974476575321063, 9.194643831691977, 9.417930041841839,\n    9.644347703669503, 9.873909240696694, 10.106627003236781,\n    10.342513269534024, 10.58158024687427, 10.8238400726681, 11.069304815507364,\n    11.317986476196008, 11.569896988756009, 11.825048221409341,\n    12.083451977536606, 12.345119996613247, 12.610063955123938,\n    12.878295467455942, 13.149826086772048, 13.42466730586372,\n    13.702830557985108, 13.984327217668513, 14.269168601521828,\n    14.55736596900856, 14.848930523210871, 15.143873411576273,\n    15.44220572664832, 15.743938506781891, 16.04908273684337, 16.35764934889634,\n    16.66964922287304, 16.985093187232053, 17.30399201960269, 17.62635644741625,\n    17.95219714852476, 18.281524751807332, 18.614349837764564,\n    18.95068293910138, 19.290534541298456, 19.633915083172692,\n    19.98083495742689, 20.331304511189067, 20.685334046541502,\n    21.042933821039977, 21.404114048223256, 21.76888489811322,\n    22.137256497705877, 22.50923893145328, 22.884842241736916,\n    23.264076429332462, 23.6469514538663, 24.033477234264016, 24.42366364919083,\n    24.817520537484558, 25.21505769858089, 25.61628489293138,\n    26.021211842414342, 26.429848230738664, 26.842203703840827,\n    27.258287870275353, 27.678110301598522, 28.10168053274597,\n    28.529008062403893, 28.96010235337422, 29.39497283293396, 29.83362889318845,\n    30.276079891419332, 30.722335150426627, 31.172403958865512,\n    31.62629557157785, 32.08401920991837, 32.54558406207592, 33.010999283389665,\n    33.4802739966603, 33.953417292456834, 34.430438229418264,\n    34.911345834551085, 35.39614910352207, 35.88485700094671, 36.37747846067349,\n    36.87402238606382, 37.37449765026789, 37.87891309649659, 38.38727753828926,\n    38.89959975977785, 39.41588851594697, 39.93615253289054, 40.460400508064545,\n    40.98864111053629, 41.520882981230194, 42.05713473317016,\n    42.597404951718396, 43.141702194811224, 43.6900349931913, 44.24241185063697,\n    44.798841244188324, 45.35933162437017, 45.92389141541209, 46.49252901546552,\n    47.065252796817916, 47.64207110610409, 48.22299226451468,\n    48.808024568002054, 49.3971762874833, 49.9904556690408, 50.587870934119984,\n    51.189430279724725, 51.79514187861014, 52.40501387947288, 53.0190544071392,\n    53.637271562750364, 54.259673423945976, 54.88626804504493,\n    55.517063457223934, 56.15206766869424, 56.79128866487574, 57.43473440856916,\n    58.08241284012621, 58.734331877617365, 59.39049941699807, 60.05092333227251,\n    60.715611475655585, 61.38457167773311, 62.057811747619894, 62.7353394731159,\n    63.417162620860914, 64.10328893648692, 64.79372614476921, 65.48848194977529,\n    66.18756403501224, 66.89098006357258, 67.59873767827808, 68.31084450182222,\n    69.02730813691093, 69.74813616640164, 70.47333615344107, 71.20291564160104,\n    71.93688215501312, 72.67524319850172, 73.41800625771542, 74.16517879925733,\n    74.9167682708136, 75.67278210128072, 76.43322770089146, 77.1981124613393,\n    77.96744375590167, 78.74122893956174, 79.51947534912904, 80.30219030335869,\n    81.08938110306934, 81.88105503125999, 82.67721935322541, 83.4778813166706,\n    84.28304815182372, 85.09272707154808, 85.90692527145302, 86.72564993000343,\n    87.54890820862819, 88.3767072518277, 89.2090541872801, 90.04595612594655,\n    90.88742016217518, 91.73345337380438, 92.58406282226491, 93.43925555268066,\n    94.29903859396902, 95.16341895893969, 96.03240364439274, 96.9059996312159,\n    97.78421388448044, 98.6670533535366, 99.55452497210776,\n  ];\n\n  /**\n   * Sanitizes a small enough angle in radians.\n   *\n   * @param angle An angle in radians; must not deviate too much\n   * from 0.\n   * @return A coterminal angle between 0 and 2pi.\n   */\n  private static sanitizeRadians(angle: number): number {\n    return (angle + Math.PI * 8) % (Math.PI * 2);\n  }\n\n  /**\n   * Delinearizes an RGB component, returning a floating-point\n   * number.\n   *\n   * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n   * linear R/G/B channel\n   * @return 0.0 <= output <= 255.0, color channel converted to\n   * regular RGB space\n   */\n  private static trueDelinearized(rgbComponent: number): number {\n    const normalized = rgbComponent / 100.0;\n    let delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n      delinearized = normalized * 12.92;\n    } else {\n      delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return delinearized * 255.0;\n  }\n\n  private static chromaticAdaptation(component: number): number {\n    const af = Math.pow(Math.abs(component), 0.42);\n    return (mathUtils.signum(component) * 400.0 * af) / (af + 27.13);\n  }\n\n  /**\n   * Returns the hue of a linear RGB color in CAM16.\n   *\n   * @param linrgb The linear RGB coordinates of a color.\n   * @return The hue of the color in CAM16, in radians.\n   */\n  private static hueOf(linrgb: number[]): number {\n    const scaledDiscount = mathUtils.matrixMultiply(\n      linrgb,\n      HctSolver.SCALED_DISCOUNT_FROM_LINRGB,\n    );\n    const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n    const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n    const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    return Math.atan2(b, a);\n  }\n\n  private static areInCyclicOrder(a: number, b: number, c: number): boolean {\n    const deltaAB = HctSolver.sanitizeRadians(b - a);\n    const deltaAC = HctSolver.sanitizeRadians(c - a);\n    return deltaAB < deltaAC;\n  }\n\n  /**\n   * Solves the lerp equation.\n   *\n   * @param source The starting number.\n   * @param mid The number in the middle.\n   * @param target The ending number.\n   * @return A number t such that lerp(source, target, t) = mid.\n   */\n  private static intercept(\n    source: number,\n    mid: number,\n    target: number,\n  ): number {\n    return (mid - source) / (target - source);\n  }\n\n  private static lerpPoint(\n    source: number[],\n    t: number,\n    target: number[],\n  ): number[] {\n    return [\n      source[0] + (target[0] - source[0]) * t,\n      source[1] + (target[1] - source[1]) * t,\n      source[2] + (target[2] - source[2]) * t,\n    ];\n  }\n\n  /**\n   * Intersects a segment with a plane.\n   *\n   * @param source The coordinates of point A.\n   * @param coordinate The R-, G-, or B-coordinate of the plane.\n   * @param target The coordinates of point B.\n   * @param axis The axis the plane is perpendicular with. (0: R, 1:\n   * G, 2: B)\n   * @return The intersection point of the segment AB with the plane\n   * R=coordinate, G=coordinate, or B=coordinate\n   */\n  private static setCoordinate(\n    source: number[],\n    coordinate: number,\n    target: number[],\n    axis: number,\n  ): number[] {\n    const t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n    return HctSolver.lerpPoint(source, t, target);\n  }\n\n  private static isBounded(x: number): boolean {\n    return 0.0 <= x && x <= 100.0;\n  }\n\n  /**\n   * Returns the nth possible vertex of the polygonal intersection.\n   *\n   * @param y The Y value of the plane.\n   * @param n The zero-based index of the point. 0 <= n <= 11.\n   * @return The nth possible vertex of the polygonal intersection\n   * of the y plane and the RGB cube, in linear RGB coordinates, if\n   * it exists. If this possible vertex lies outside of the cube,\n   * [-1.0, -1.0, -1.0] is returned.\n   */\n  private static nthVertex(y: number, n: number): number[] {\n    const kR = HctSolver.Y_FROM_LINRGB[0];\n    const kG = HctSolver.Y_FROM_LINRGB[1];\n    const kB = HctSolver.Y_FROM_LINRGB[2];\n    const coordA = n % 4 <= 1 ? 0.0 : 100.0;\n    const coordB = n % 2 === 0 ? 0.0 : 100.0;\n    if (n < 4) {\n      const g = coordA;\n      const b = coordB;\n      const r = (y - g * kG - b * kB) / kR;\n      if (HctSolver.isBounded(r)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else if (n < 8) {\n      const b = coordA;\n      const r = coordB;\n      const g = (y - r * kR - b * kB) / kG;\n      if (HctSolver.isBounded(g)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else {\n      const r = coordA;\n      const g = coordB;\n      const b = (y - r * kR - g * kG) / kB;\n      if (HctSolver.isBounded(b)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    }\n  }\n\n  /**\n   * Finds the segment containing the desired color.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return A list of two sets of linear RGB coordinates, each\n   * corresponding to an endpoint of the segment containing the\n   * desired color.\n   */\n  private static bisectToSegment(y: number, targetHue: number): number[][] {\n    let left = [-1.0, -1.0, -1.0];\n    let right = left;\n    let leftHue = 0.0;\n    let rightHue = 0.0;\n    let initialized = false;\n    let uncut = true;\n    for (let n = 0; n < 12; n++) {\n      const mid = HctSolver.nthVertex(y, n);\n      if (mid[0] < 0) {\n        continue;\n      }\n      const midHue = HctSolver.hueOf(mid);\n      if (!initialized) {\n        left = mid;\n        right = mid;\n        leftHue = midHue;\n        rightHue = midHue;\n        initialized = true;\n        continue;\n      }\n      if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n        uncut = false;\n        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n          right = mid;\n          rightHue = midHue;\n        } else {\n          left = mid;\n          leftHue = midHue;\n        }\n      }\n    }\n    return [left, right];\n  }\n\n  private static midpoint(a: number[], b: number[]): number[] {\n    return [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2, (a[2] + b[2]) / 2];\n  }\n\n  private static criticalPlaneBelow(x: number): number {\n    return Math.floor(x - 0.5);\n  }\n\n  private static criticalPlaneAbove(x: number): number {\n    return Math.ceil(x - 0.5);\n  }\n\n  /**\n   * Finds a color with the given Y and hue on the boundary of the\n   * cube.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return The desired color, in linear RGB coordinates.\n   */\n  private static bisectToLimit(y: number, targetHue: number): number[] {\n    const segment = HctSolver.bisectToSegment(y, targetHue);\n    let left = segment[0];\n    let leftHue = HctSolver.hueOf(left);\n    let right = segment[1];\n    for (let axis = 0; axis < 3; axis++) {\n      if (left[axis] !== right[axis]) {\n        let lPlane = -1;\n        let rPlane = 255;\n        if (left[axis] < right[axis]) {\n          lPlane = HctSolver.criticalPlaneBelow(\n            HctSolver.trueDelinearized(left[axis]),\n          );\n          rPlane = HctSolver.criticalPlaneAbove(\n            HctSolver.trueDelinearized(right[axis]),\n          );\n        } else {\n          lPlane = HctSolver.criticalPlaneAbove(\n            HctSolver.trueDelinearized(left[axis]),\n          );\n          rPlane = HctSolver.criticalPlaneBelow(\n            HctSolver.trueDelinearized(right[axis]),\n          );\n        }\n        for (let i = 0; i < 8; i++) {\n          if (Math.abs(rPlane - lPlane) <= 1) {\n            break;\n          } else {\n            const mPlane = Math.floor((lPlane + rPlane) / 2.0);\n            const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n            const mid = HctSolver.setCoordinate(\n              left,\n              midPlaneCoordinate,\n              right,\n              axis,\n            );\n            const midHue = HctSolver.hueOf(mid);\n            if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n              right = mid;\n              rPlane = mPlane;\n            } else {\n              left = mid;\n              leftHue = midHue;\n              lPlane = mPlane;\n            }\n          }\n        }\n      }\n    }\n    return HctSolver.midpoint(left, right);\n  }\n\n  private static inverseChromaticAdaptation(adapted: number): number {\n    const adaptedAbs = Math.abs(adapted);\n    const base = Math.max(0, (27.13 * adaptedAbs) / (400.0 - adaptedAbs));\n    return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n  }\n\n  /**\n   * Finds a color with the given hue, chroma, and Y.\n   *\n   * @param hueRadians The desired hue in radians.\n   * @param chroma The desired chroma.\n   * @param y The desired Y.\n   * @return The desired color as a hexadecimal integer, if found; 0\n   * otherwise.\n   */\n  private static findResultByJ(\n    hueRadians: number,\n    chroma: number,\n    y: number,\n  ): number {\n    // Initial estimate of j.\n    let j = Math.sqrt(y) * 11.0;\n    // ===========================================================\n    // Operations inlined from Cam16 to avoid repeated calculation\n    // ===========================================================\n    const viewingConditions = ViewingConditions.DEFAULT;\n    const tInnerCoeff =\n      1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n    const p1 =\n      eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const hSin = Math.sin(hueRadians);\n    const hCos = Math.cos(hueRadians);\n    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      const jNormalized = j / 100.0;\n      const alpha =\n        chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n      const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n      const ac =\n        viewingConditions.aw *\n        Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);\n      const p2 = ac / viewingConditions.nbb;\n      const gamma =\n        (23.0 * (p2 + 0.305) * t) /\n        (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      const a = gamma * hCos;\n      const b = gamma * hSin;\n      const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      const rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n      const gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n      const bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n      const linrgb = mathUtils.matrixMultiply(\n        [rCScaled, gCScaled, bCScaled],\n        HctSolver.LINRGB_FROM_SCALED_DISCOUNT,\n      );\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n        return 0;\n      }\n      const kR = HctSolver.Y_FROM_LINRGB[0];\n      const kG = HctSolver.Y_FROM_LINRGB[1];\n      const kB = HctSolver.Y_FROM_LINRGB[2];\n      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n      if (fnj <= 0) {\n        return 0;\n      }\n      if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n          return 0;\n        }\n        return colorUtils.argbFromLinrgb(linrgb);\n      }\n      // Iterates with Newton method,\n      // Using 2 * fn(j) / j as the approximation of fn'(j)\n      j = j - ((fnj - y) * j) / (2 * fnj);\n    }\n    return 0;\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return A hexadecimal representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToInt(hueDegrees: number, chroma: number, lstar: number): number {\n    if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n      return colorUtils.argbFromLstar(lstar);\n    }\n    hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);\n    const hueRadians = (hueDegrees / 180) * Math.PI;\n    const y = colorUtils.yFromLstar(lstar);\n    const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n    if (exactAnswer !== 0) {\n      return exactAnswer;\n    }\n    const linrgb = HctSolver.bisectToLimit(y, hueRadians);\n    return colorUtils.argbFromLinrgb(linrgb);\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return An CAM16 object representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16 {\n    return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\nimport * as utils from \"../utils/color_utils\";\n\nimport { Cam16 } from \"./cam16\";\nimport { HctSolver } from \"./hct_solver\";\nimport { ViewingConditions } from \"./viewing_conditions\";\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class Hct {\n  /**\n   * @param hue 0 <= hue < 360; invalid values are corrected.\n   * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n   *     returned may be lower than the requested chroma. Chroma has a different\n   *     maximum for any given hue and tone.\n   * @param tone 0 <= tone <= 100; invalid values are corrected.\n   * @return HCT representation of a color in default viewing conditions.\n   */\n\n  internalHue: number;\n  internalChroma: number;\n  internalTone: number;\n\n  static from(hue: number, chroma: number, tone: number) {\n    return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return HCT representation of a color in default viewing conditions\n   */\n  static fromInt(argb: number) {\n    return new Hct(argb);\n  }\n\n  toInt(): number {\n    return this.argb;\n  }\n\n  /**\n   * A number, in degrees, representing ex. red, orange, yellow, etc.\n   * Ranges from 0 <= hue < 360.\n   */\n  get hue(): number {\n    return this.internalHue;\n  }\n\n  /**\n   * @param newHue 0 <= newHue < 360; invalid values are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set hue(newHue: number) {\n    this.setInternalState(\n      HctSolver.solveToInt(newHue, this.internalChroma, this.internalTone),\n    );\n  }\n\n  get chroma(): number {\n    return this.internalChroma;\n  }\n\n  /**\n   * @param newChroma 0 <= newChroma < ?\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set chroma(newChroma: number) {\n    this.setInternalState(\n      HctSolver.solveToInt(this.internalHue, newChroma, this.internalTone),\n    );\n  }\n\n  /** Lightness. Ranges from 0 to 100. */\n  get tone(): number {\n    return this.internalTone;\n  }\n\n  /**\n   * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set tone(newTone: number) {\n    this.setInternalState(\n      HctSolver.solveToInt(this.internalHue, this.internalChroma, newTone),\n    );\n  }\n\n  /** Sets a property of the Hct object. */\n  setValue(propertyName: string, value: number) {\n    (this as any)[propertyName] = value;\n  }\n\n  toString(): string {\n    return `HCT(${this.hue.toFixed(0)}, ${this.chroma.toFixed(\n      0,\n    )}, ${this.tone.toFixed(0)})`;\n  }\n\n  static isBlue(hue: number): boolean {\n    return hue >= 250 && hue < 270;\n  }\n\n  static isYellow(hue: number): boolean {\n    return hue >= 105 && hue < 125;\n  }\n\n  static isCyan(hue: number): boolean {\n    return hue >= 170 && hue < 207;\n  }\n\n  private constructor(private argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  private setInternalState(argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  /**\n   * Translates a color into different [ViewingConditions].\n   *\n   * Colors change appearance. They look different with lights on versus off,\n   * the same color, as in hex code, on white looks different when on black.\n   * This is called color relativity, most famously explicated by Josef Albers\n   * in Interaction of Color.\n   *\n   * In color science, color appearance models can account for this and\n   * calculate the appearance of a color in different settings. HCT is based on\n   * CAM16, a color appearance model, and uses it to make these calculations.\n   *\n   * See [ViewingConditions.make] for parameters affecting color appearance.\n   */\n  inViewingConditions(vc: ViewingConditions): Hct {\n    // 1. Use CAM16 to find XYZ coordinates of color in specified VC.\n    const cam = Cam16.fromInt(this.toInt());\n    const viewedInVc = cam.xyzInViewingConditions(vc);\n\n    // 2. Create CAM16 of those XYZ coordinates in default VC.\n    const recastInVc = Cam16.fromXyzInViewingConditions(\n      viewedInVc[0],\n      viewedInVc[1],\n      viewedInVc[2],\n      ViewingConditions.make(),\n    );\n\n    // 3. Create HCT from:\n    // - CAM16 using default VC with XYZ coordinates in specified VC.\n    // - L* converted from Y in XYZ coordinates in specified VC.\n    const recastHct = Hct.from(\n      recastInVc.hue,\n      recastInVc.chroma,\n      utils.lstarFromY(viewedInVc[1]),\n    );\n    return recastHct;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport { Cam16 } from \"../hct/cam16\";\nimport { Hct } from \"../hct/hct\";\nimport * as colorUtils from \"../utils/color_utils\";\nimport * as mathUtils from \"../utils/math_utils\";\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n/**\n * Functions for blending in HCT and CAM16.\n */\nexport class Blend {\n  /**\n   * Blend the design color's HCT hue towards the key color's HCT\n   * hue, in a way that leaves the original color recognizable and\n   * recognizably shifted towards the key color.\n   *\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param sourceColor ARGB representation of the main theme color.\n   * @return The design color with a hue shifted towards the\n   * system's color, a slightly warmer/cooler variant of the design\n   * color's hue.\n   */\n  static harmonize(designColor: number, sourceColor: number): number {\n    const fromHct = Hct.fromInt(designColor);\n    const toHct = Hct.fromInt(sourceColor);\n    const differenceDegrees = mathUtils.differenceDegrees(\n      fromHct.hue,\n      toHct.hue,\n    );\n    const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\n    const outputHue = mathUtils.sanitizeDegreesDouble(\n      fromHct.hue +\n        rotationDegrees * mathUtils.rotationDirection(fromHct.hue, toHct.hue),\n    );\n    return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();\n  }\n\n  /**\n   * Blends hue from one color into another. The chroma and tone of\n   * the original color are maintained.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, with a hue blended towards to. Chroma and tone\n   * are constant.\n   */\n  static hctHue(from: number, to: number, amount: number): number {\n    const ucs = Blend.cam16Ucs(from, to, amount);\n    const ucsCam = Cam16.fromInt(ucs);\n    const fromCam = Cam16.fromInt(from);\n    const blended = Hct.from(\n      ucsCam.hue,\n      fromCam.chroma,\n      colorUtils.lstarFromArgb(from),\n    );\n    return blended.toInt();\n  }\n\n  /**\n   * Blend in CAM16-UCS space.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, blended towards to. Hue, chroma, and tone will\n   * change.\n   */\n  static cam16Ucs(from: number, to: number, amount: number): number {\n    const fromCam = Cam16.fromInt(from);\n    const toCam = Cam16.fromInt(to);\n    const fromJ = fromCam.jstar;\n    const fromA = fromCam.astar;\n    const fromB = fromCam.bstar;\n    const toJ = toCam.jstar;\n    const toA = toCam.astar;\n    const toB = toCam.bstar;\n    const jstar = fromJ + (toJ - fromJ) * amount;\n    const astar = fromA + (toA - fromA) * amount;\n    const bstar = fromB + (toB - fromB) * amount;\n    return Cam16.fromUcs(jstar, astar, bstar).toInt();\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\nimport * as utils from \"../utils/color_utils\";\nimport * as math from \"../utils/math_utils\";\n\n/**\n * Utility methods for calculating contrast given two colors, or calculating a\n * color given one color and a contrast ratio.\n *\n * Contrast ratio is calculated using XYZ's Y. When linearized to match human\n * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the\n * lightness of a color.\n *\n * Methods refer to tone, T in the the HCT color space.\n * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color\n * space.\n */\nexport class Contrast {\n  /**\n   * Returns a contrast ratio, which ranges from 1 to 21.\n   *\n   * @param toneA Tone between 0 and 100. Values outside will be clamped.\n   * @param toneB Tone between 0 and 100. Values outside will be clamped.\n   */\n  static ratioOfTones(toneA: number, toneB: number): number {\n    toneA = math.clampDouble(0.0, 100.0, toneA);\n    toneB = math.clampDouble(0.0, 100.0, toneB);\n    return Contrast.ratioOfYs(utils.yFromLstar(toneA), utils.yFromLstar(toneB));\n  }\n\n  static ratioOfYs(y1: number, y2: number): number {\n    const lighter = y1 > y2 ? y1 : y2;\n    const darker = lighter === y2 ? y1 : y2;\n    return (lighter + 5.0) / (darker + 5.0);\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns -1 if ratio cannot be achieved with tone parameter.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in -1 being returned.\n   * @param ratio Contrast ratio of return value and tone.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static lighter(tone: number, ratio: number): number {\n    if (tone < 0.0 || tone > 100.0) {\n      return -1.0;\n    }\n\n    const darkY = utils.yFromLstar(tone);\n    const lightY = ratio * (darkY + 5.0) - 5.0;\n    const realContrast = Contrast.ratioOfYs(lightY, darkY);\n    const delta = Math.abs(realContrast - ratio);\n    if (realContrast < ratio && delta > 0.04) {\n      return -1;\n    }\n\n    // Ensure gamut mapping, which requires a 'range' on tone, will still result\n    // the correct ratio by darkening slightly.\n    const returnValue = utils.lstarFromY(lightY) + 0.4;\n    if (returnValue < 0 || returnValue > 100) {\n      return -1;\n    }\n    return returnValue;\n  }\n\n  /**\n   * Returns a tone <= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns -1 if ratio cannot be achieved with tone parameter.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in -1 being returned.\n   * @param ratio Contrast ratio of return value and tone.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static darker(tone: number, ratio: number): number {\n    if (tone < 0.0 || tone > 100.0) {\n      return -1.0;\n    }\n\n    const lightY = utils.yFromLstar(tone);\n    const darkY = (lightY + 5.0) / ratio - 5.0;\n    const realContrast = Contrast.ratioOfYs(lightY, darkY);\n\n    const delta = Math.abs(realContrast - ratio);\n    if (realContrast < ratio && delta > 0.04) {\n      return -1;\n    }\n\n    // Ensure gamut mapping, which requires a 'range' on tone, will still result\n    // the correct ratio by darkening slightly.\n    const returnValue = utils.lstarFromY(darkY) - 0.4;\n    if (returnValue < 0 || returnValue > 100) {\n      return -1;\n    }\n    return returnValue;\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns 100 if ratio cannot be achieved with tone parameter.\n   *\n   * This method is unsafe because the returned value is guaranteed to be in\n   * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n   * the ratio with tone. For example, there is no color lighter than T100.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in 100 being returned.\n   * @param ratio Desired contrast ratio of return value and tone parameter.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static lighterUnsafe(tone: number, ratio: number): number {\n    const lighterSafe = Contrast.lighter(tone, ratio);\n    return lighterSafe < 0.0 ? 100.0 : lighterSafe;\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns 100 if ratio cannot be achieved with tone parameter.\n   *\n   * This method is unsafe because the returned value is guaranteed to be in\n   * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n   * the [ratio with [tone]. For example, there is no color darker than T0.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in 0 being returned.\n   * @param ratio Desired contrast ratio of return value and tone parameter.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static darkerUnsafe(tone: number, ratio: number): number {\n    const darkerSafe = Contrast.darker(tone, ratio);\n    return darkerSafe < 0.0 ? 0.0 : darkerSafe;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Hct } from \"../hct/hct\";\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n/**\n * Check and/or fix universally disliked colors.\n * Color science studies of color preference indicate universal distaste for\n * dark yellow-greens, and also show this is correlated to distate for\n * biological waste and rotting food.\n *\n * See Palmer and Schloss, 2010 or Schloss and Palmer's Chapter 21 in Handbook\n * of Color Psychology (2015).\n */\nexport class DislikeAnalyzer {\n  /**\n   * Returns true if a color is disliked.\n   *\n   * @param hct A color to be judged.\n   * @return Whether the color is disliked.\n   *\n   * Disliked is defined as a dark yellow-green that is not neutral.\n   */\n  static isDisliked(hct: Hct): boolean {\n    const huePasses =\n      Math.round(hct.hue) >= 90.0 && Math.round(hct.hue) <= 111.0;\n    const chromaPasses = Math.round(hct.chroma) > 16.0;\n    const tonePasses = Math.round(hct.tone) < 65.0;\n\n    return huePasses && chromaPasses && tonePasses;\n  }\n\n  /**\n   * If a color is disliked, lighten it to make it likable.\n   *\n   * @param hct A color to be judged.\n   * @return A new color if the original color is disliked, or the original\n   *   color if it is acceptable.\n   */\n  static fixIfDisliked(hct: Hct): Hct {\n    if (DislikeAnalyzer.isDisliked(hct)) {\n      return Hct.from(hct.hue, hct.chroma, 70.0);\n    }\n\n    return hct;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as math from \"../utils/math_utils\";\n\n/**\n * A class containing a value that changes with the contrast level.\n *\n * Usually represents the contrast requirements for a dynamic color on its\n * background. The four values correspond to values for contrast levels -1.0,\n * 0.0, 0.5, and 1.0, respectively.\n */\nexport class ContrastCurve {\n  /**\n   * Creates a `ContrastCurve` object.\n   *\n   * @param low Value for contrast level -1.0\n   * @param normal Value for contrast level 0.0\n   * @param medium Value for contrast level 0.5\n   * @param high Value for contrast level 1.0\n   */\n  constructor(\n    readonly low: number,\n    readonly normal: number,\n    readonly medium: number,\n    readonly high: number,\n  ) {}\n\n  /**\n   * Returns the value at a given contrast level.\n   *\n   * @param contrastLevel The contrast level. 0.0 is the default (normal); -1.0\n   *     is the lowest; 1.0 is the highest.\n   * @return The value. For contrast ratios, a number between 1.0 and 21.0.\n   */\n  get(contrastLevel: number): number {\n    if (contrastLevel <= -1.0) {\n      return this.low;\n    } else if (contrastLevel < 0.0) {\n      return math.lerp(this.low, this.normal, (contrastLevel - -1) / 1);\n    } else if (contrastLevel < 0.5) {\n      return math.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);\n    } else if (contrastLevel < 1.0) {\n      return math.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n    } else {\n      return this.high;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Contrast } from \"../contrast/contrast\";\nimport { Hct } from \"../hct/hct\";\nimport type { TonalPalette } from \"../palettes/tonal_palette\";\nimport * as math from \"../utils/math_utils\";\nimport type { ContrastCurve } from \"./contrast_curve\";\nimport type { DynamicScheme } from \"./dynamic_scheme\";\nimport type { ToneDeltaPair } from \"./tone_delta_pair\";\nimport type { SpecVersion } from \"./spec_version\";\n\n/**\n * @param name The name of the dynamic color. Defaults to empty.\n * @param palette Function that provides a TonalPalette given DynamicScheme. A\n *     TonalPalette is defined by a hue and chroma, so this replaces the need to\n *     specify hue/chroma. By providing a tonal palette, when contrast\n *     adjustments are made, intended chroma can be preserved.\n * @param tone Function that provides a tone given DynamicScheme. When not\n *     provided, the tone is same as the background tone or 50, when no\n *     background is provided.\n * @param chromaMultiplier A factor that multiplies the chroma for this color.\n *     Default to 1.\n * @param isBackground Whether this dynamic color is a background, with some\n *     other color as the foreground. Defaults to false.\n * @param background The background of the dynamic color (as a function of a\n *     `DynamicScheme`), if it exists.\n * @param secondBackground A second background of the dynamic color (as a\n *     function of a `DynamicScheme`), if it exists.\n * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n *     against its background should behave in various contrast levels options.\n *     Must used together with `background`. When not provided or resolved as\n *     undefined, the contrast curve is calculated based on other constraints.\n * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n *     constraint between two colors. One of them must be the color being\n *     constructed. When not provided or resolved as undefined, the tone is\n *     calculated based on other constraints.\n */\ninterface FromPaletteOptions {\n  name?: string;\n  palette: (scheme: DynamicScheme) => TonalPalette;\n  tone?: (scheme: DynamicScheme) => number;\n  chromaMultiplier?: (scheme: DynamicScheme) => number;\n  isBackground?: boolean;\n  background?: (scheme: DynamicScheme) => DynamicColor | undefined;\n  secondBackground?: (scheme: DynamicScheme) => DynamicColor | undefined;\n  contrastCurve?: (scheme: DynamicScheme) => ContrastCurve | undefined;\n  toneDeltaPair?: (scheme: DynamicScheme) => ToneDeltaPair | undefined;\n  opacity?: (scheme: DynamicScheme) => number | undefined;\n}\n\n/**\n * A delegate that provides the HCT and tone of a DynamicColor.\n *\n * This is used to allow different implementations of the color calculation\n * logic for different spec versions.\n */\ninterface ColorCalculationDelegate {\n  getHct(scheme: DynamicScheme, color: DynamicColor): Hct;\n  getTone(scheme: DynamicScheme, color: DynamicColor): number;\n}\n\nfunction validateExtendedColor(\n  originalColor: DynamicColor,\n  specVersion: SpecVersion,\n  extendedColor: DynamicColor,\n) {\n  if (originalColor.name !== extendedColor.name) {\n    throw new Error(\n      `Attempting to extend color ${originalColor.name} with color ${extendedColor.name} of different name for spec version ${specVersion}.`,\n    );\n  }\n  if (originalColor.isBackground !== extendedColor.isBackground) {\n    throw new Error(\n      `Attempting to extend color ${originalColor.name} as a ${\n        originalColor.isBackground ? \"background\" : \"foreground\"\n      } with color ${extendedColor.name} as a ${\n        extendedColor.isBackground ? \"background\" : \"foreground\"\n      } for spec version ${specVersion}.`,\n    );\n  }\n}\n/**\n * Returns a new DynamicColor that is the same as the original color, but with\n * the extended dynamic color's constraints for the given spec version.\n *\n * @param originalColor The original color.\n * @param specVersion The spec version to extend.\n * @param extendedColor The color with the values to extend.\n */\nexport function extendSpecVersion(\n  originalColor: DynamicColor,\n  specVersion: SpecVersion,\n  extendedColor: DynamicColor,\n): DynamicColor {\n  validateExtendedColor(originalColor, specVersion, extendedColor);\n\n  return DynamicColor.fromPalette({\n    name: originalColor.name,\n    palette: (s) =>\n      s.specVersion === specVersion\n        ? extendedColor.palette(s)\n        : originalColor.palette(s),\n    tone: (s) =>\n      s.specVersion === specVersion\n        ? extendedColor.tone(s)\n        : originalColor.tone(s),\n    isBackground: originalColor.isBackground,\n    chromaMultiplier: (s) => {\n      const chromaMultiplier =\n        s.specVersion === specVersion\n          ? extendedColor.chromaMultiplier\n          : originalColor.chromaMultiplier;\n      return chromaMultiplier !== undefined ? chromaMultiplier(s) : 1;\n    },\n    background: (s) => {\n      const background =\n        s.specVersion === specVersion\n          ? extendedColor.background\n          : originalColor.background;\n      return background !== undefined ? background(s) : undefined;\n    },\n    secondBackground: (s) => {\n      const secondBackground =\n        s.specVersion === specVersion\n          ? extendedColor.secondBackground\n          : originalColor.secondBackground;\n      return secondBackground !== undefined ? secondBackground(s) : undefined;\n    },\n    contrastCurve: (s) => {\n      const contrastCurve =\n        s.specVersion === specVersion\n          ? extendedColor.contrastCurve\n          : originalColor.contrastCurve;\n      return contrastCurve !== undefined ? contrastCurve(s) : undefined;\n    },\n    toneDeltaPair: (s) => {\n      const toneDeltaPair =\n        s.specVersion === specVersion\n          ? extendedColor.toneDeltaPair\n          : originalColor.toneDeltaPair;\n      return toneDeltaPair !== undefined ? toneDeltaPair(s) : undefined;\n    },\n    opacity: (s) => {\n      const opacity =\n        s.specVersion === specVersion\n          ? extendedColor.opacity\n          : originalColor.opacity;\n      return opacity !== undefined ? opacity(s) : undefined;\n    },\n  });\n}\n\n/**\n * A color that adjusts itself based on UI state provided by DynamicScheme.\n *\n * Colors without backgrounds do not change tone when contrast changes. Colors\n * with backgrounds become closer to their background as contrast lowers, and\n * further when contrast increases.\n *\n * Prefer static constructors. They require either a hexcode, a palette and\n * tone, or a hue and chroma. Optionally, they can provide a background\n * DynamicColor.\n */\nexport class DynamicColor {\n  private readonly hctCache = new Map<DynamicScheme, Hct>();\n\n  /**\n   * Create a DynamicColor defined by a TonalPalette and HCT tone.\n   *\n   * @param args Functions with DynamicScheme as input. Must provide a palette\n   *     and tone. May provide a background DynamicColor and ToneDeltaPair.\n   */\n  static fromPalette(args: FromPaletteOptions): DynamicColor {\n    return new DynamicColor(\n      args.name ?? \"\",\n      args.palette,\n      args.tone ?? DynamicColor.getInitialToneFromBackground(args.background),\n      args.isBackground ?? false,\n      args.chromaMultiplier,\n      args.background,\n      args.secondBackground,\n      args.contrastCurve,\n      args.toneDeltaPair,\n      args.opacity,\n    );\n  }\n\n  static getInitialToneFromBackground(\n    background?: (scheme: DynamicScheme) => DynamicColor | undefined,\n  ): (scheme: DynamicScheme) => number {\n    if (background === undefined) {\n      return (s) => 50;\n    }\n    return (s) => (background(s) ? background(s)!.getTone(s) : 50);\n  }\n\n  /**\n   * The base constructor for DynamicColor.\n   *\n   * _Strongly_ prefer using one of the convenience constructors. This class is\n   * arguably too flexible to ensure it can support any scenario. Functional\n   * arguments allow  overriding without risks that come with subclasses.\n   *\n   * For example, the default behavior of adjust tone at max contrast\n   * to be at a 7.0 ratio with its background is principled and\n   * matches accessibility guidance. That does not mean it's the desired\n   * approach for _every_ design system, and every color pairing,\n   * always, in every case.\n   *\n   * @param name The name of the dynamic color. Defaults to empty.\n   * @param palette Function that provides a TonalPalette given DynamicScheme. A\n   *     TonalPalette is defined by a hue and chroma, so this replaces the need\n   *     to specify hue/chroma. By providing a tonal palette, when contrast\n   *     adjustments are made, intended chroma can be preserved.\n   * @param tone Function that provides a tone, given a DynamicScheme.\n   * @param isBackground Whether this dynamic color is a background, with some\n   *     other color as the foreground. Defaults to false.\n   * @param chromaMultiplier A factor that multiplies the chroma for this color.\n   * @param background The background of the dynamic color (as a function of a\n   *     `DynamicScheme`), if it exists.\n   * @param secondBackground A second background of the dynamic color (as a\n   *     function of a `DynamicScheme`), if it exists.\n   * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n   *     against its background should behave in various contrast levels\n   *     options.\n   * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n   *     constraint between two colors. One of them must be the color being\n   *     constructed.\n   */\n  constructor(\n    readonly name: string,\n    readonly palette: (scheme: DynamicScheme) => TonalPalette,\n    readonly tone: (scheme: DynamicScheme) => number,\n    readonly isBackground: boolean,\n    readonly chromaMultiplier?: (scheme: DynamicScheme) => number,\n    readonly background?: (scheme: DynamicScheme) => DynamicColor | undefined,\n    readonly secondBackground?: (\n      scheme: DynamicScheme,\n    ) => DynamicColor | undefined,\n    readonly contrastCurve?: (\n      scheme: DynamicScheme,\n    ) => ContrastCurve | undefined,\n    readonly toneDeltaPair?: (\n      scheme: DynamicScheme,\n    ) => ToneDeltaPair | undefined,\n    readonly opacity?: (scheme: DynamicScheme) => number | undefined,\n  ) {\n    if (!background && secondBackground) {\n      throw new Error(\n        `Color ${name} has secondBackground` +\n          `defined, but background is not defined.`,\n      );\n    }\n    if (!background && contrastCurve) {\n      throw new Error(\n        `Color ${name} has contrastCurve` +\n          `defined, but background is not defined.`,\n      );\n    }\n    if (background && !contrastCurve) {\n      throw new Error(\n        `Color ${name} has background` +\n          `defined, but contrastCurve is not defined.`,\n      );\n    }\n  }\n\n  /**\n   * Returns a deep copy of this DynamicColor.\n   */\n  clone(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: this.name,\n      palette: this.palette,\n      tone: this.tone,\n      isBackground: this.isBackground,\n      chromaMultiplier: this.chromaMultiplier,\n      background: this.background,\n      secondBackground: this.secondBackground,\n      contrastCurve: this.contrastCurve,\n      toneDeltaPair: this.toneDeltaPair,\n      opacity: this.opacity,\n    });\n  }\n\n  /**\n   * Clears the cache of HCT values for this color. For testing or debugging\n   * purposes.\n   */\n  clearCache() {\n    this.hctCache.clear();\n  }\n\n  /**\n   * Returns a ARGB integer (i.e. a hex code).\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   *     whether or not it is dark mode or light mode, and what the desired\n   *     contrast level is.\n   */\n  getArgb(scheme: DynamicScheme): number {\n    const argb = this.getHct(scheme).toInt();\n    if (this.opacity == null) return argb;\n    const percentage = this.opacity(scheme);\n    if (percentage == null) return argb;\n    const alpha = math.clampInt(0, 255, Math.round(percentage * 255));\n    return (argb & 0x00ffffff) | (alpha << 24);\n  }\n\n  /**\n   * Returns a color, expressed in the HCT color space, that this\n   * DynamicColor is under the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   *     whether or not it is dark mode or light mode, and what the desired\n   *     contrast level is.\n   */\n  getHct(scheme: DynamicScheme): Hct {\n    const cachedAnswer = this.hctCache.get(scheme);\n    if (cachedAnswer != null) {\n      return cachedAnswer;\n    }\n    const answer = getSpec(scheme.specVersion).getHct(scheme, this);\n    if (this.hctCache.size > 4) {\n      this.hctCache.clear();\n    }\n    this.hctCache.set(scheme, answer);\n    return answer;\n  }\n\n  /**\n   * Returns a tone, T in the HCT color space, that this DynamicColor is under\n   * the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   *     whether or not it is dark mode or light mode, and what the desired\n   *     contrast level is.\n   */\n  getTone(scheme: DynamicScheme): number {\n    return getSpec(scheme.specVersion).getTone(scheme, this);\n  }\n\n  /**\n   * Given a background tone, finds a foreground tone, while ensuring they reach\n   * a contrast ratio that is as close to [ratio] as possible.\n   *\n   * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it\n   *     falls outside that range.\n   * @param ratio The contrast ratio desired between bgTone and the return\n   *     value.\n   */\n  static foregroundTone(bgTone: number, ratio: number): number {\n    const lighterTone = Contrast.lighterUnsafe(bgTone, ratio);\n    const darkerTone = Contrast.darkerUnsafe(bgTone, ratio);\n    const lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);\n    const darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);\n    const preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);\n\n    if (preferLighter) {\n      // This handles an edge case where the initial contrast ratio is high\n      // (ex. 13.0), and the ratio passed to the function is that high\n      // ratio, and both the lighter and darker ratio fails to pass that\n      // ratio.\n      //\n      // This was observed with Tonal Spot's On Primary Container turning\n      // black momentarily between high and max contrast in light mode. PC's\n      // standard tone was T90, OPC's was T10, it was light mode, and the\n      // contrast value was 0.6568521221032331.\n      const negligibleDifference =\n        Math.abs(lighterRatio - darkerRatio) < 0.1 &&\n        lighterRatio < ratio &&\n        darkerRatio < ratio;\n      return lighterRatio >= ratio ||\n        lighterRatio >= darkerRatio ||\n        negligibleDifference\n        ? lighterTone\n        : darkerTone;\n    } else {\n      return darkerRatio >= ratio || darkerRatio >= lighterRatio\n        ? darkerTone\n        : lighterTone;\n    }\n  }\n\n  /**\n   * Returns whether [tone] prefers a light foreground.\n   *\n   * People prefer white foregrounds on ~T60-70. Observed over time, and also\n   * by Andrew Somers during research for APCA.\n   *\n   * T60 used as to create the smallest discontinuity possible when skipping\n   * down to T49 in order to ensure light foregrounds.\n   * Since `tertiaryContainer` in dark monochrome scheme requires a tone of\n   * 60, it should not be adjusted. Therefore, 60 is excluded here.\n   */\n  static tonePrefersLightForeground(tone: number): boolean {\n    return Math.round(tone) < 60.0;\n  }\n\n  /**\n   * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter\n   * color.\n   */\n  static toneAllowsLightForeground(tone: number): boolean {\n    return Math.round(tone) <= 49.0;\n  }\n\n  /**\n   * Adjusts a tone such that white has 4.5 contrast, if the tone is\n   * reasonably close to supporting it.\n   */\n  static enableLightForeground(tone: number): number {\n    if (\n      DynamicColor.tonePrefersLightForeground(tone) &&\n      !DynamicColor.toneAllowsLightForeground(tone)\n    ) {\n      return 49.0;\n    }\n    return tone;\n  }\n}\n\n/**\n * A delegate for the color calculation of a DynamicScheme in the 2021 spec.\n */\nclass ColorCalculationDelegateImpl2021 implements ColorCalculationDelegate {\n  getHct(scheme: DynamicScheme, color: DynamicColor): Hct {\n    const tone = color.getTone(scheme);\n    const palette = color.palette(scheme);\n    return palette.getHct(tone);\n  }\n\n  getTone(scheme: DynamicScheme, color: DynamicColor): number {\n    const decreasingContrast = scheme.contrastLevel < 0;\n    const toneDeltaPair = color.toneDeltaPair\n      ? color.toneDeltaPair(scheme)\n      : undefined;\n\n    // Case 1: dual foreground, pair of colors with delta constraint.\n    if (toneDeltaPair) {\n      const roleA = toneDeltaPair.roleA;\n      const roleB = toneDeltaPair.roleB;\n      const delta = toneDeltaPair.delta;\n      const polarity = toneDeltaPair.polarity;\n      const stayTogether = toneDeltaPair.stayTogether;\n\n      const aIsNearer =\n        polarity === \"nearer\" ||\n        (polarity === \"lighter\" && !scheme.isDark) ||\n        (polarity === \"darker\" && scheme.isDark);\n      const nearer = aIsNearer ? roleA : roleB;\n      const farther = aIsNearer ? roleB : roleA;\n      const amNearer = color.name === nearer.name;\n      const expansionDir = scheme.isDark ? 1 : -1;\n      let nTone = nearer.tone(scheme);\n      let fTone = farther.tone(scheme);\n\n      // 1st round: solve to min for each, if background and contrast curve\n      // are defined.\n      if (color.background && nearer.contrastCurve && farther.contrastCurve) {\n        const bg = color.background(scheme);\n        const nContrastCurve = nearer.contrastCurve(scheme);\n        const fContrastCurve = farther.contrastCurve(scheme);\n        if (bg && nContrastCurve && fContrastCurve) {\n          const bgTone = bg.getTone(scheme);\n          const nContrast = nContrastCurve.get(scheme.contrastLevel);\n          const fContrast = fContrastCurve.get(scheme.contrastLevel);\n          // If a color is good enough, it is not adjusted.\n          // Initial and adjusted tones for `nearer`\n          if (Contrast.ratioOfTones(bgTone, nTone) < nContrast) {\n            nTone = DynamicColor.foregroundTone(bgTone, nContrast);\n          }\n          // Initial and adjusted tones for `farther`\n          if (Contrast.ratioOfTones(bgTone, fTone) < fContrast) {\n            fTone = DynamicColor.foregroundTone(bgTone, fContrast);\n          }\n          if (decreasingContrast) {\n            // If decreasing contrast, adjust color to the \"bare minimum\"\n            // that satisfies contrast.\n            nTone = DynamicColor.foregroundTone(bgTone, nContrast);\n            fTone = DynamicColor.foregroundTone(bgTone, fContrast);\n          }\n        }\n      }\n\n      if ((fTone - nTone) * expansionDir < delta) {\n        // 2nd round: expand farther to match delta, if contrast is not\n        // satisfied.\n        fTone = math.clampDouble(0, 100, nTone + delta * expansionDir);\n        if ((fTone - nTone) * expansionDir >= delta) {\n          // Good! Tones now satisfy the constraint; no change needed.\n        } else {\n          // 3rd round: contract nearer to match delta.\n          nTone = math.clampDouble(0, 100, fTone - delta * expansionDir);\n        }\n      }\n\n      // Avoids the 50-59 awkward zone.\n      if (50 <= nTone && nTone < 60) {\n        // If `nearer` is in the awkward zone, move it away, together with\n        // `farther`.\n        if (expansionDir > 0) {\n          nTone = 60;\n          fTone = Math.max(fTone, nTone + delta * expansionDir);\n        } else {\n          nTone = 49;\n          fTone = Math.min(fTone, nTone + delta * expansionDir);\n        }\n      } else if (50 <= fTone && fTone < 60) {\n        if (stayTogether) {\n          // Fixes both, to avoid two colors on opposite sides of the \"awkward\n          // zone\".\n          if (expansionDir > 0) {\n            nTone = 60;\n            fTone = Math.max(fTone, nTone + delta * expansionDir);\n          } else {\n            nTone = 49;\n            fTone = Math.min(fTone, nTone + delta * expansionDir);\n          }\n        } else {\n          // Not required to stay together; fixes just one.\n          if (expansionDir > 0) {\n            fTone = 60;\n          } else {\n            fTone = 49;\n          }\n        }\n      }\n\n      // Returns `nTone` if this color is `nearer`, otherwise `fTone`.\n      return amNearer ? nTone : fTone;\n    } else {\n      // Case 2: No contrast pair; just solve for itself.\n      let answer = color.tone(scheme);\n\n      if (\n        color.background == undefined ||\n        color.background(scheme) === undefined ||\n        color.contrastCurve == undefined ||\n        color.contrastCurve(scheme) === undefined\n      ) {\n        return answer; // No adjustment for colors with no background.\n      }\n\n      const bgTone = color.background(scheme)!.getTone(scheme);\n      const desiredRatio = color\n        .contrastCurve(scheme)!\n        .get(scheme.contrastLevel);\n\n      if (Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {\n        // Don't \"improve\" what's good enough.\n      } else {\n        // Rough improvement.\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (decreasingContrast) {\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (color.isBackground && 50 <= answer && answer < 60) {\n        // Must adjust\n        if (Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {\n          answer = 49;\n        } else {\n          answer = 60;\n        }\n      }\n\n      if (\n        color.secondBackground == undefined ||\n        color.secondBackground(scheme) === undefined\n      ) {\n        return answer;\n      }\n\n      // Case 3: Adjust for dual backgrounds.\n      const [bg1, bg2] = [color.background, color.secondBackground];\n      const [bgTone1, bgTone2] = [\n        bg1(scheme)!.getTone(scheme),\n        bg2(scheme)!.getTone(scheme),\n      ];\n      const [upper, lower] = [\n        Math.max(bgTone1, bgTone2),\n        Math.min(bgTone1, bgTone2),\n      ];\n\n      if (\n        Contrast.ratioOfTones(upper, answer) >= desiredRatio &&\n        Contrast.ratioOfTones(lower, answer) >= desiredRatio\n      ) {\n        return answer;\n      }\n\n      // The darkest light tone that satisfies the desired ratio,\n      // or -1 if such ratio cannot be reached.\n      const lightOption = Contrast.lighter(upper, desiredRatio);\n\n      // The lightest dark tone that satisfies the desired ratio,\n      // or -1 if such ratio cannot be reached.\n      const darkOption = Contrast.darker(lower, desiredRatio);\n\n      // Tones suitable for the foreground.\n      const availables = [];\n      if (lightOption !== -1) availables.push(lightOption);\n      if (darkOption !== -1) availables.push(darkOption);\n\n      const prefersLight =\n        DynamicColor.tonePrefersLightForeground(bgTone1) ||\n        DynamicColor.tonePrefersLightForeground(bgTone2);\n      if (prefersLight) {\n        return lightOption < 0 ? 100 : lightOption;\n      }\n      if (availables.length === 1) {\n        return availables[0];\n      }\n      return darkOption < 0 ? 0 : darkOption;\n    }\n  }\n}\n\n/**\n * A delegate for the color calculation of a DynamicScheme in the 2025 spec.\n */\nclass ColorCalculationDelegateImpl2025 implements ColorCalculationDelegate {\n  getHct(scheme: DynamicScheme, color: DynamicColor): Hct {\n    const palette = color.palette(scheme);\n    const tone = color.getTone(scheme);\n    const hue = palette.hue;\n    const chroma =\n      palette.chroma *\n      (color.chromaMultiplier ? color.chromaMultiplier(scheme) : 1);\n\n    return Hct.from(hue, chroma, tone);\n  }\n\n  getTone(scheme: DynamicScheme, color: DynamicColor): number {\n    const toneDeltaPair = color.toneDeltaPair\n      ? color.toneDeltaPair(scheme)\n      : undefined;\n\n    // Case 0: tone delta constraint.\n    if (toneDeltaPair) {\n      const roleA = toneDeltaPair.roleA;\n      const roleB = toneDeltaPair.roleB;\n      const polarity = toneDeltaPair.polarity;\n      const constraint = toneDeltaPair.constraint;\n      const absoluteDelta =\n        polarity === \"darker\" ||\n        (polarity === \"relative_lighter\" && scheme.isDark) ||\n        (polarity === \"relative_darker\" && !scheme.isDark)\n          ? -toneDeltaPair.delta\n          : toneDeltaPair.delta;\n\n      const amRoleA = color.name === roleA.name;\n      const selfRole = amRoleA ? roleA : roleB;\n      const refRole = amRoleA ? roleB : roleA;\n      let selfTone = selfRole.tone(scheme);\n      let refTone = refRole.getTone(scheme);\n      const relativeDelta = absoluteDelta * (amRoleA ? 1 : -1);\n\n      if (constraint === \"exact\") {\n        selfTone = math.clampDouble(0, 100, refTone + relativeDelta);\n      } else if (constraint === \"nearer\") {\n        if (relativeDelta > 0) {\n          selfTone = math.clampDouble(\n            0,\n            100,\n            math.clampDouble(refTone, refTone + relativeDelta, selfTone),\n          );\n        } else {\n          selfTone = math.clampDouble(\n            0,\n            100,\n            math.clampDouble(refTone + relativeDelta, refTone, selfTone),\n          );\n        }\n      } else if (constraint === \"farther\") {\n        if (relativeDelta > 0) {\n          selfTone = math.clampDouble(refTone + relativeDelta, 100, selfTone);\n        } else {\n          selfTone = math.clampDouble(0, refTone + relativeDelta, selfTone);\n        }\n      }\n\n      if (color.background && color.contrastCurve) {\n        const background = color.background(scheme);\n        const contrastCurve = color.contrastCurve(scheme);\n        if (background && contrastCurve) {\n          // Adjust the tones for contrast, if background and contrast curve\n          // are defined.\n          const bgTone = background.getTone(scheme);\n          const selfContrast = contrastCurve.get(scheme.contrastLevel);\n          selfTone =\n            Contrast.ratioOfTones(bgTone, selfTone) >= selfContrast &&\n            scheme.contrastLevel >= 0\n              ? selfTone\n              : DynamicColor.foregroundTone(bgTone, selfContrast);\n        }\n      }\n\n      // This can avoid the awkward tones for background colors including the\n      // access fixed colors. Accent fixed dim colors should not be adjusted.\n      if (color.isBackground && !color.name.endsWith(\"_fixed_dim\")) {\n        if (selfTone >= 57) {\n          selfTone = math.clampDouble(65, 100, selfTone);\n        } else {\n          selfTone = math.clampDouble(0, 49, selfTone);\n        }\n      }\n\n      return selfTone;\n    } else {\n      // Case 1: No tone delta pair; just solve for itself.\n      let answer = color.tone(scheme);\n\n      if (\n        color.background == undefined ||\n        color.background(scheme) === undefined ||\n        color.contrastCurve == undefined ||\n        color.contrastCurve(scheme) === undefined\n      ) {\n        return answer; // No adjustment for colors with no background.\n      }\n\n      const bgTone = color.background(scheme)!.getTone(scheme);\n      const desiredRatio = color\n        .contrastCurve(scheme)!\n        .get(scheme.contrastLevel);\n\n      // Recalculate the tone from desired contrast ratio if the current\n      // contrast ratio is not enough or desired contrast level is decreasing\n      // (<0).\n      answer =\n        Contrast.ratioOfTones(bgTone, answer) >= desiredRatio &&\n        scheme.contrastLevel >= 0\n          ? answer\n          : DynamicColor.foregroundTone(bgTone, desiredRatio);\n\n      // This can avoid the awkward tones for background colors including the\n      // access fixed colors. Accent fixed dim colors should not be adjusted.\n      if (color.isBackground && !color.name.endsWith(\"_fixed_dim\")) {\n        if (answer >= 57) {\n          answer = math.clampDouble(65, 100, answer);\n        } else {\n          answer = math.clampDouble(0, 49, answer);\n        }\n      }\n\n      if (\n        color.secondBackground == undefined ||\n        color.secondBackground(scheme) === undefined\n      ) {\n        return answer;\n      }\n\n      // Case 2: Adjust for dual backgrounds.\n      const [bg1, bg2] = [color.background, color.secondBackground];\n      const [bgTone1, bgTone2] = [\n        bg1(scheme)!.getTone(scheme),\n        bg2(scheme)!.getTone(scheme),\n      ];\n      const [upper, lower] = [\n        Math.max(bgTone1, bgTone2),\n        Math.min(bgTone1, bgTone2),\n      ];\n\n      if (\n        Contrast.ratioOfTones(upper, answer) >= desiredRatio &&\n        Contrast.ratioOfTones(lower, answer) >= desiredRatio\n      ) {\n        return answer;\n      }\n\n      // The darkest light tone that satisfies the desired ratio,\n      // or -1 if such ratio cannot be reached.\n      const lightOption = Contrast.lighter(upper, desiredRatio);\n\n      // The lightest dark tone that satisfies the desired ratio,\n      // or -1 if such ratio cannot be reached.\n      const darkOption = Contrast.darker(lower, desiredRatio);\n\n      // Tones suitable for the foreground.\n      const availables = [];\n      if (lightOption !== -1) availables.push(lightOption);\n      if (darkOption !== -1) availables.push(darkOption);\n\n      const prefersLight =\n        DynamicColor.tonePrefersLightForeground(bgTone1) ||\n        DynamicColor.tonePrefersLightForeground(bgTone2);\n      if (prefersLight) {\n        return lightOption < 0 ? 100 : lightOption;\n      }\n      if (availables.length === 1) {\n        return availables[0];\n      }\n      return darkOption < 0 ? 0 : darkOption;\n    }\n  }\n}\n\nconst spec2021 = new ColorCalculationDelegateImpl2021();\nconst spec2025 = new ColorCalculationDelegateImpl2025();\n\n/**\n * Returns the ColorCalculationDelegate for the given spec version.\n */\nfunction getSpec(specVersion: SpecVersion): ColorCalculationDelegate {\n  return specVersion === \"2025\" ? spec2025 : spec2021;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Hct } from \"../hct/hct\";\n\n/**\n *  A convenience class for retrieving colors that are constant in hue and\n *  chroma, but vary in tone.\n */\nexport class TonalPalette {\n  private readonly cache = new Map<number, number>();\n\n  /**\n   * @param argb ARGB representation of a color\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromInt(argb: number): TonalPalette {\n    const hct = Hct.fromInt(argb);\n    return TonalPalette.fromHct(hct);\n  }\n\n  /**\n   * @param hct Hct\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromHct(hct: Hct) {\n    return new TonalPalette(hct.hue, hct.chroma, hct);\n  }\n\n  /**\n   * @param hue HCT hue\n   * @param chroma HCT chroma\n   * @return Tones matching hue and chroma.\n   */\n  static fromHueAndChroma(hue: number, chroma: number): TonalPalette {\n    const keyColor = new KeyColor(hue, chroma).create();\n    return new TonalPalette(hue, chroma, keyColor);\n  }\n\n  private constructor(\n    readonly hue: number,\n    readonly chroma: number,\n    readonly keyColor: Hct,\n  ) {}\n\n  /**\n   * @param tone HCT tone, measured from 0 to 100.\n   * @return ARGB representation of a color with that tone.\n   */\n  tone(tone: number): number {\n    let argb = this.cache.get(tone);\n    if (argb === undefined) {\n      if (tone == 99 && Hct.isYellow(this.hue)) {\n        argb = this.averageArgb(this.tone(98), this.tone(100));\n      } else {\n        argb = Hct.from(this.hue, this.chroma, tone).toInt();\n      }\n      this.cache.set(tone, argb);\n    }\n    return argb;\n  }\n\n  /**\n   * @param tone HCT tone.\n   * @return HCT representation of a color with that tone.\n   */\n  getHct(tone: number): Hct {\n    return Hct.fromInt(this.tone(tone));\n  }\n\n  private averageArgb(argb1: number, argb2: number): number {\n    const red1 = (argb1 >>> 16) & 0xff;\n    const green1 = (argb1 >>> 8) & 0xff;\n    const blue1 = argb1 & 0xff;\n    const red2 = (argb2 >>> 16) & 0xff;\n    const green2 = (argb2 >>> 8) & 0xff;\n    const blue2 = argb2 & 0xff;\n    const red = Math.round((red1 + red2) / 2);\n    const green = Math.round((green1 + green2) / 2);\n    const blue = Math.round((blue1 + blue2) / 2);\n    return (\n      ((255 << 24) |\n        ((red & 255) << 16) |\n        ((green & 255) << 8) |\n        (blue & 255)) >>>\n      0\n    );\n  }\n}\n\n/**\n * Key color is a color that represents the hue and chroma of a tonal palette\n */\nclass KeyColor {\n  // Cache that maps tone to max chroma to avoid duplicated HCT calculation.\n  private readonly chromaCache = new Map<number, number>();\n  private readonly maxChromaValue = 200.0;\n\n  constructor(\n    readonly hue: number,\n    readonly requestedChroma: number,\n  ) {}\n\n  /**\n   * Creates a key color from a [hue] and a [chroma].\n   * The key color is the first tone, starting from T50, matching the given hue\n   * and chroma.\n   *\n   * @return Key color [Hct]\n   */\n  create(): Hct {\n    // Pivot around T50 because T50 has the most chroma available, on\n    // average. Thus it is most likely to have a direct answer.\n    const pivotTone = 50;\n    const toneStepSize = 1;\n    // Epsilon to accept values slightly higher than the requested chroma.\n    const epsilon = 0.01;\n\n    // Binary search to find the tone that can provide a chroma that is closest\n    // to the requested chroma.\n    let lowerTone = 0;\n    let upperTone = 100;\n    while (lowerTone < upperTone) {\n      const midTone = Math.floor((lowerTone + upperTone) / 2);\n      const isAscending =\n        this.maxChroma(midTone) < this.maxChroma(midTone + toneStepSize);\n      const sufficientChroma =\n        this.maxChroma(midTone) >= this.requestedChroma - epsilon;\n\n      if (sufficientChroma) {\n        // Either range [lowerTone, midTone] or [midTone, upperTone] has\n        // the answer, so search in the range that is closer the pivot tone.\n        if (Math.abs(lowerTone - pivotTone) < Math.abs(upperTone - pivotTone)) {\n          upperTone = midTone;\n        } else {\n          if (lowerTone === midTone) {\n            return Hct.from(this.hue, this.requestedChroma, lowerTone);\n          }\n          lowerTone = midTone;\n        }\n      } else {\n        // As there is no sufficient chroma in the midTone, follow the direction\n        // to the chroma peak.\n        if (isAscending) {\n          lowerTone = midTone + toneStepSize;\n        } else {\n          // Keep midTone for potential chroma peak.\n          upperTone = midTone;\n        }\n      }\n    }\n\n    return Hct.from(this.hue, this.requestedChroma, lowerTone);\n  }\n\n  // Find the maximum chroma for a given tone\n  private maxChroma(tone: number): number {\n    if (this.chromaCache.has(tone)) {\n      return this.chromaCache.get(tone)!;\n    }\n    const chroma = Hct.from(this.hue, this.maxChromaValue, tone).chroma;\n    this.chromaCache.set(tone, chroma);\n    return chroma;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport { Hct } from \"../hct/hct.js\";\nimport * as colorUtils from \"../utils/color_utils.js\";\nimport * as mathUtils from \"../utils/math_utils.js\";\n\n/**\n * Design utilities using color temperature theory.\n *\n * Analogous colors, complementary color, and cache to efficiently, lazily,\n * generate data for calculations when needed.\n */\nexport class TemperatureCache {\n  constructor(public input: Hct) {}\n\n  hctsByTempCache: Hct[] = [];\n  hctsByHueCache: Hct[] = [];\n  tempsByHctCache = new Map<Hct, number>();\n  inputRelativeTemperatureCache: number = -1.0;\n  complementCache: Hct | null = null;\n\n  get hctsByTemp(): Hct[] {\n    if (this.hctsByTempCache.length > 0) {\n      return this.hctsByTempCache;\n    }\n\n    const hcts = this.hctsByHue.concat([this.input]);\n    const temperaturesByHct = this.tempsByHct;\n    hcts.sort((a, b) => temperaturesByHct.get(a)! - temperaturesByHct.get(b)!);\n    this.hctsByTempCache = hcts;\n    return hcts;\n  }\n\n  get warmest(): Hct {\n    return this.hctsByTemp[this.hctsByTemp.length - 1];\n  }\n\n  get coldest(): Hct {\n    return this.hctsByTemp[0];\n  }\n\n  /**\n   * A set of colors with differing hues, equidistant in temperature.\n   *\n   * In art, this is usually described as a set of 5 colors on a color wheel\n   * divided into 12 sections. This method allows provision of either of those\n   * values.\n   *\n   * Behavior is undefined when [count] or [divisions] is 0.\n   * When divisions < count, colors repeat.\n   *\n   * [count] The number of colors to return, includes the input color.\n   * [divisions] The number of divisions on the color wheel.\n   */\n  analogous(count = 5, divisions = 12): Hct[] {\n    const startHue = Math.round(this.input.hue);\n    const startHct = this.hctsByHue[startHue];\n    let lastTemp = this.relativeTemperature(startHct);\n    const allColors = [startHct];\n\n    let absoluteTotalTempDelta = 0.0;\n    for (let i = 0; i < 360; i++) {\n      const hue = mathUtils.sanitizeDegreesInt(startHue + i);\n      const hct = this.hctsByHue[hue];\n      const temp = this.relativeTemperature(hct);\n      const tempDelta = Math.abs(temp - lastTemp);\n      lastTemp = temp;\n      absoluteTotalTempDelta += tempDelta;\n    }\n    let hueAddend = 1;\n    const tempStep = absoluteTotalTempDelta / divisions;\n    let totalTempDelta = 0.0;\n    lastTemp = this.relativeTemperature(startHct);\n    while (allColors.length < divisions) {\n      const hue = mathUtils.sanitizeDegreesInt(startHue + hueAddend);\n      const hct = this.hctsByHue[hue];\n      const temp = this.relativeTemperature(hct);\n      const tempDelta = Math.abs(temp - lastTemp);\n      totalTempDelta += tempDelta;\n\n      const desiredTotalTempDeltaForIndex = allColors.length * tempStep;\n      let indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;\n      let indexAddend = 1;\n      // Keep adding this hue to the answers until its temperature is\n      // insufficient. This ensures consistent behavior when there aren't\n      // [divisions] discrete steps between 0 and 360 in hue with [tempStep]\n      // delta in temperature between them.\n      //\n      // For example, white and black have no analogues: there are no other\n      // colors at T100/T0. Therefore, they should just be added to the array\n      // as answers.\n      while (indexSatisfied && allColors.length < divisions) {\n        allColors.push(hct);\n        const desiredTotalTempDeltaForIndex =\n          (allColors.length + indexAddend) * tempStep;\n        indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;\n        indexAddend++;\n      }\n      lastTemp = temp;\n      hueAddend++;\n      if (hueAddend > 360) {\n        while (allColors.length < divisions) {\n          allColors.push(hct);\n        }\n        break;\n      }\n    }\n\n    const answers = [this.input];\n\n    // First, generate analogues from rotating counter-clockwise.\n    const increaseHueCount = Math.floor((count - 1) / 2.0);\n    for (let i = 1; i < increaseHueCount + 1; i++) {\n      let index = 0 - i;\n      while (index < 0) {\n        index = allColors.length + index;\n      }\n      if (index >= allColors.length) {\n        index = index % allColors.length;\n      }\n      answers.splice(0, 0, allColors[index]);\n    }\n\n    // Second, generate analogues from rotating clockwise.\n    const decreaseHueCount = count - increaseHueCount - 1;\n    for (let i = 1; i < decreaseHueCount + 1; i++) {\n      let index = i;\n      while (index < 0) {\n        index = allColors.length + index;\n      }\n      if (index >= allColors.length) {\n        index = index % allColors.length;\n      }\n      answers.push(allColors[index]);\n    }\n\n    return answers;\n  }\n\n  /**\n   * A color that complements the input color aesthetically.\n   *\n   * In art, this is usually described as being across the color wheel.\n   * History of this shows intent as a color that is just as cool-warm as the\n   * input color is warm-cool.\n   */\n  get complement(): Hct {\n    if (this.complementCache != null) {\n      return this.complementCache;\n    }\n\n    const coldestHue = this.coldest.hue;\n    const coldestTemp = this.tempsByHct.get(this.coldest)!;\n\n    const warmestHue = this.warmest.hue;\n    const warmestTemp = this.tempsByHct.get(this.warmest)!;\n    const range = warmestTemp - coldestTemp;\n    const startHueIsColdestToWarmest = TemperatureCache.isBetween(\n      this.input.hue,\n      coldestHue,\n      warmestHue,\n    );\n    const startHue = startHueIsColdestToWarmest ? warmestHue : coldestHue;\n    const endHue = startHueIsColdestToWarmest ? coldestHue : warmestHue;\n    const directionOfRotation = 1.0;\n    let smallestError = 1000.0;\n    let answer = this.hctsByHue[Math.round(this.input.hue)];\n\n    const complementRelativeTemp = 1.0 - this.inputRelativeTemperature;\n    // Find the color in the other section, closest to the inverse percentile\n    // of the input color. This is the complement.\n    for (let hueAddend = 0.0; hueAddend <= 360.0; hueAddend += 1.0) {\n      const hue = mathUtils.sanitizeDegreesDouble(\n        startHue + directionOfRotation * hueAddend,\n      );\n      if (!TemperatureCache.isBetween(hue, startHue, endHue)) {\n        continue;\n      }\n      const possibleAnswer = this.hctsByHue[Math.round(hue)];\n      const relativeTemp =\n        (this.tempsByHct.get(possibleAnswer)! - coldestTemp) / range;\n      const error = Math.abs(complementRelativeTemp - relativeTemp);\n      if (error < smallestError) {\n        smallestError = error;\n        answer = possibleAnswer;\n      }\n    }\n    this.complementCache = answer;\n    return this.complementCache;\n  }\n\n  /**\n   * Temperature relative to all colors with the same chroma and tone.\n   * Value on a scale from 0 to 1.\n   */\n  relativeTemperature(hct: Hct): number {\n    const range =\n      this.tempsByHct.get(this.warmest)! - this.tempsByHct.get(this.coldest)!;\n    const differenceFromColdest =\n      this.tempsByHct.get(hct)! - this.tempsByHct.get(this.coldest)!;\n    // Handle when there's no difference in temperature between warmest and\n    // coldest: for example, at T100, only one color is available, white.\n    if (range === 0.0) {\n      return 0.5;\n    }\n    return differenceFromColdest / range;\n  }\n\n  /** Relative temperature of the input color. See [relativeTemperature]. */\n  get inputRelativeTemperature(): number {\n    if (this.inputRelativeTemperatureCache >= 0.0) {\n      return this.inputRelativeTemperatureCache;\n    }\n\n    this.inputRelativeTemperatureCache = this.relativeTemperature(this.input);\n    return this.inputRelativeTemperatureCache;\n  }\n\n  /** A Map with keys of HCTs in [hctsByTemp], values of raw temperature. */\n  get tempsByHct(): Map<Hct, number> {\n    if (this.tempsByHctCache.size > 0) {\n      return this.tempsByHctCache;\n    }\n    const allHcts = this.hctsByHue.concat([this.input]);\n    const temperaturesByHct = new Map<Hct, number>();\n    for (const e of allHcts) {\n      temperaturesByHct.set(e, TemperatureCache.rawTemperature(e));\n    }\n    this.tempsByHctCache = temperaturesByHct;\n    return temperaturesByHct;\n  }\n\n  /**\n   * HCTs for all hues, with the same chroma/tone as the input.\n   * Sorted ascending, hue 0 to 360.\n   */\n  get hctsByHue(): Hct[] {\n    if (this.hctsByHueCache.length > 0) {\n      return this.hctsByHueCache;\n    }\n    const hcts: Hct[] = [];\n    for (let hue = 0.0; hue <= 360.0; hue += 1.0) {\n      const colorAtHue = Hct.from(hue, this.input.chroma, this.input.tone);\n      hcts.push(colorAtHue);\n    }\n    this.hctsByHueCache = hcts;\n    return this.hctsByHueCache;\n  }\n\n  /** Determines if an angle is between two other angles, rotating clockwise. */\n  static isBetween(angle: number, a: number, b: number): boolean {\n    if (a < b) {\n      return a <= angle && angle <= b;\n    }\n    return a <= angle || angle <= b;\n  }\n\n  /**\n   * Value representing cool-warm factor of a color.\n   * Values below 0 are considered cool, above, warm.\n   *\n   * Color science has researched emotion and harmony, which art uses to select\n   * colors. Warm-cool is the foundation of analogous and complementary colors.\n   * See:\n   * - Li-Chen Ou's Chapter 19 in Handbook of Color Psychology (2015).\n   * - Josef Albers' Interaction of Color chapters 19 and 21.\n   *\n   * Implementation of Ou, Woodcock and Wright's algorithm, which uses\n   * L*a*b* / LCH color space.\n   * Return value has these properties:\n   * - Values below 0 are cool, above 0 are warm.\n   * - Lower bound: -0.52 - (chroma ^ 1.07 / 20). L*a*b* chroma is infinite.\n   *   Assuming max of 130 chroma, -9.66.\n   * - Upper bound: -0.52 + (chroma ^ 1.07 / 20). L*a*b* chroma is infinite.\n   *   Assuming max of 130 chroma, 8.61.\n   */\n  static rawTemperature(color: Hct): number {\n    const lab = colorUtils.labFromArgb(color.toInt());\n    const hue = mathUtils.sanitizeDegreesDouble(\n      (Math.atan2(lab[2], lab[1]) * 180.0) / Math.PI,\n    );\n    const chroma = Math.sqrt(lab[1] * lab[1] + lab[2] * lab[2]);\n    const temperature =\n      -0.5 +\n      0.02 *\n        Math.pow(chroma, 1.07) *\n        Math.cos(\n          (mathUtils.sanitizeDegreesDouble(hue - 50.0) * Math.PI) / 180.0,\n        );\n    return temperature;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicColor } from \"./dynamic_color\";\n\n/**\n * Describes the different in tone between colors.\n *\n * nearer and farther are deprecated. Use DeltaConstraint instead.\n */\nexport type TonePolarity =\n  | \"darker\"\n  | \"lighter\"\n  | \"nearer\"\n  | \"farther\"\n  | \"relative_darker\"\n  | \"relative_lighter\";\n\n/**\n * Describes how to fulfill a tone delta pair constraint.\n */\nexport type DeltaConstraint = \"exact\" | \"nearer\" | \"farther\";\n\n/**\n * Documents a constraint between two DynamicColors, in which their tones must\n * have a certain distance from each other.\n *\n * Prefer a DynamicColor with a background, this is for special cases when\n * designers want tonal distance, literally contrast, between two colors that\n * don't have a background / foreground relationship or a contrast guarantee.\n */\nexport class ToneDeltaPair {\n  /**\n   * Documents a constraint in tone distance between two DynamicColors.\n   *\n   * The polarity is an adjective that describes \"A\", compared to \"B\".\n   *\n   * For instance, ToneDeltaPair(A, B, 15, 'darker', 'exact') states that\n   * A's tone should be exactly 15 darker than B's.\n   *\n   * 'relative_darker' and 'relative_lighter' describes the tone adjustment\n   * relative to the surface color trend (white in light mode; black in dark\n   * mode). For instance, ToneDeltaPair(A, B, 10, 'relative_lighter',\n   * 'farther') states that A should be at least 10 lighter than B in light\n   * mode, and at least 10 darker than B in dark mode.\n   *\n   * @param roleA The first role in a pair.\n   * @param roleB The second role in a pair.\n   * @param delta Required difference between tones. Absolute value, negative\n   * values have undefined behavior.\n   * @param polarity The relative relation between tones of roleA and roleB,\n   * as described above.\n   * @param constraint How to fulfill the tone delta pair constraint.\n   * @param stayTogether Whether these two roles should stay on the same side\n   * of the \"awkward zone\" (T50-59). This is necessary for certain cases where\n   * one role has two backgrounds.\n   */\n  constructor(\n    readonly roleA: DynamicColor,\n    readonly roleB: DynamicColor,\n    readonly delta: number,\n    readonly polarity: TonePolarity,\n    readonly stayTogether: boolean,\n    readonly constraint?: DeltaConstraint,\n  ) {\n    this.constraint = constraint ?? \"exact\";\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Set of themes supported by Dynamic Color.\n * Instantiate the corresponding subclass, ex. SchemeTonalSpot, to create\n * colors corresponding to the theme.\n */\nexport enum Variant {\n  MONOCHROME,\n  NEUTRAL,\n  TONAL_SPOT,\n  VIBRANT,\n  EXPRESSIVE,\n  FIDELITY,\n  CONTENT,\n  RAINBOW,\n  FRUIT_SALAD,\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ColorSpecDelegate } from \"./color_spec\";\nimport type { DynamicScheme } from \"./dynamic_scheme\";\nimport { DislikeAnalyzer } from \"../dislike/dislike_analyzer\";\nimport { Hct } from \"../hct/hct\";\nimport { ContrastCurve } from \"./contrast_curve\";\nimport { DynamicColor } from \"./dynamic_color\";\nimport { ToneDeltaPair } from \"./tone_delta_pair\";\nimport { Variant } from \"./variant\";\n\n/**\n * Returns true if the scheme is Fidelity or Content.\n */\nfunction isFidelity(scheme: DynamicScheme): boolean {\n  return (\n    scheme.variant === Variant.FIDELITY || scheme.variant === Variant.CONTENT\n  );\n}\n\n/**\n * Returns true if the scheme is Monochrome.\n */\nfunction isMonochrome(scheme: DynamicScheme): boolean {\n  return scheme.variant === Variant.MONOCHROME;\n}\n\n/**\n * Returns the desired chroma for a given tone at a specific hue.\n *\n * @param hue The given hue.\n * @param chroma The target chroma.\n * @param tone The tone to start with.\n * @param byDecreasingTone Whether to search for lower tones.\n */\nfunction findDesiredChromaByTone(\n  hue: number,\n  chroma: number,\n  tone: number,\n  byDecreasingTone: boolean,\n): number {\n  let answer = tone;\n\n  let closestToChroma = Hct.from(hue, chroma, tone);\n  if (closestToChroma.chroma < chroma) {\n    let chromaPeak = closestToChroma.chroma;\n    while (closestToChroma.chroma < chroma) {\n      answer += byDecreasingTone ? -1.0 : 1.0;\n      const potentialSolution = Hct.from(hue, chroma, answer);\n      if (chromaPeak > potentialSolution.chroma) {\n        break;\n      }\n      if (Math.abs(potentialSolution.chroma - chroma) < 0.4) {\n        break;\n      }\n\n      const potentialDelta = Math.abs(potentialSolution.chroma - chroma);\n      const currentDelta = Math.abs(closestToChroma.chroma - chroma);\n      if (potentialDelta < currentDelta) {\n        closestToChroma = potentialSolution;\n      }\n      chromaPeak = Math.max(chromaPeak, potentialSolution.chroma);\n    }\n  }\n\n  return answer;\n}\n\n/**\n * A delegate for the dynamic color spec of a DynamicScheme in the 2021 spec.\n */\nexport class ColorSpecDelegateImpl2021 implements ColorSpecDelegate {\n  ////////////////////////////////////////////////////////////////\n  // Main Palettes                                              //\n  ////////////////////////////////////////////////////////////////\n\n  primaryPaletteKeyColor(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"primary_palette_key_color\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => s.primaryPalette.keyColor.tone,\n    });\n  }\n\n  secondaryPaletteKeyColor(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"secondary_palette_key_color\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => s.secondaryPalette.keyColor.tone,\n    });\n  }\n\n  tertiaryPaletteKeyColor(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"tertiary_palette_key_color\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => s.tertiaryPalette.keyColor.tone,\n    });\n  }\n\n  neutralPaletteKeyColor(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"neutral_palette_key_color\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => s.neutralPalette.keyColor.tone,\n    });\n  }\n\n  neutralVariantPaletteKeyColor(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"neutral_variant_palette_key_color\",\n      palette: (s) => s.neutralVariantPalette,\n      tone: (s) => s.neutralVariantPalette.keyColor.tone,\n    });\n  }\n\n  errorPaletteKeyColor(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"error_palette_key_color\",\n      palette: (s) => s.errorPalette,\n      tone: (s) => s.errorPalette.keyColor.tone,\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Surfaces [S]                                               //\n  ////////////////////////////////////////////////////////////////\n\n  background(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"background\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 6 : 98),\n      isBackground: true,\n    });\n  }\n\n  onBackground(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_background\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 90 : 10),\n      background: (s) => this.background(),\n      contrastCurve: (s) => new ContrastCurve(3, 3, 4.5, 7),\n    });\n  }\n\n  surface(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 6 : 98),\n      isBackground: true,\n    });\n  }\n\n  surfaceDim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_dim\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) =>\n        s.isDark ? 6 : new ContrastCurve(87, 87, 80, 75).get(s.contrastLevel),\n      isBackground: true,\n    });\n  }\n\n  surfaceBright(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_bright\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) =>\n        s.isDark ? new ContrastCurve(24, 24, 29, 34).get(s.contrastLevel) : 98,\n      isBackground: true,\n    });\n  }\n\n  surfaceContainerLowest(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_container_lowest\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) =>\n        s.isDark ? new ContrastCurve(4, 4, 2, 0).get(s.contrastLevel) : 100,\n      isBackground: true,\n    });\n  }\n\n  surfaceContainerLow(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_container_low\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) =>\n        s.isDark\n          ? new ContrastCurve(10, 10, 11, 12).get(s.contrastLevel)\n          : new ContrastCurve(96, 96, 96, 95).get(s.contrastLevel),\n      isBackground: true,\n    });\n  }\n\n  surfaceContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_container\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) =>\n        s.isDark\n          ? new ContrastCurve(12, 12, 16, 20).get(s.contrastLevel)\n          : new ContrastCurve(94, 94, 92, 90).get(s.contrastLevel),\n      isBackground: true,\n    });\n  }\n\n  surfaceContainerHigh(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_container_high\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) =>\n        s.isDark\n          ? new ContrastCurve(17, 17, 21, 25).get(s.contrastLevel)\n          : new ContrastCurve(92, 92, 88, 85).get(s.contrastLevel),\n      isBackground: true,\n    });\n  }\n\n  surfaceContainerHighest(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_container_highest\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) =>\n        s.isDark\n          ? new ContrastCurve(22, 22, 26, 30).get(s.contrastLevel)\n          : new ContrastCurve(90, 90, 84, 80).get(s.contrastLevel),\n      isBackground: true,\n    });\n  }\n\n  onSurface(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_surface\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 90 : 10),\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  surfaceVariant(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_variant\",\n      palette: (s) => s.neutralVariantPalette,\n      tone: (s) => (s.isDark ? 30 : 90),\n      isBackground: true,\n    });\n  }\n\n  onSurfaceVariant(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_surface_variant\",\n      palette: (s) => s.neutralVariantPalette,\n      tone: (s) => (s.isDark ? 80 : 30),\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n\n  inverseSurface(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"inverse_surface\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 90 : 20),\n      isBackground: true,\n    });\n  }\n\n  inverseOnSurface(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"inverse_on_surface\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 20 : 95),\n      background: (s) => this.inverseSurface(),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  outline(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"outline\",\n      palette: (s) => s.neutralVariantPalette,\n      tone: (s) => (s.isDark ? 60 : 50),\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1.5, 3, 4.5, 7),\n    });\n  }\n\n  outlineVariant(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"outline_variant\",\n      palette: (s) => s.neutralVariantPalette,\n      tone: (s) => (s.isDark ? 30 : 80),\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n    });\n  }\n\n  shadow(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"shadow\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => 0,\n    });\n  }\n\n  scrim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"scrim\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => 0,\n    });\n  }\n\n  surfaceTint(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"surface_tint\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => (s.isDark ? 80 : 40),\n      isBackground: true,\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Primary [P].                                               //\n  ////////////////////////////////////////////////////////////////\n\n  primary(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"primary\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 100 : 0;\n        }\n        return s.isDark ? 80 : 40;\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.primaryContainer(),\n          this.primary(),\n          10,\n          \"nearer\",\n          false,\n        ),\n    });\n  }\n\n  primaryDim(): DynamicColor | undefined {\n    return undefined;\n  }\n\n  onPrimary(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_primary\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 10 : 90;\n        }\n        return s.isDark ? 20 : 100;\n      },\n      background: (s) => this.primary(),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  primaryContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"primary_container\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => {\n        if (isFidelity(s)) {\n          return s.sourceColorHct.tone;\n        }\n        if (isMonochrome(s)) {\n          return s.isDark ? 85 : 25;\n        }\n        return s.isDark ? 30 : 90;\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.primaryContainer(),\n          this.primary(),\n          10,\n          \"nearer\",\n          false,\n        ),\n    });\n  }\n\n  onPrimaryContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_primary_container\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => {\n        if (isFidelity(s)) {\n          return DynamicColor.foregroundTone(\n            this.primaryContainer().tone(s),\n            4.5,\n          );\n        }\n        if (isMonochrome(s)) {\n          return s.isDark ? 0 : 100;\n        }\n        return s.isDark ? 90 : 30;\n      },\n      background: (s) => this.primaryContainer(),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n\n  inversePrimary(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"inverse_primary\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => (s.isDark ? 40 : 80),\n      background: (s) => this.inverseSurface(),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 7),\n    });\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Secondary [Q].                                              //\n  /////////////////////////////////////////////////////////////////\n\n  secondary(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"secondary\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => (s.isDark ? 80 : 40),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.secondaryContainer(),\n          this.secondary(),\n          10,\n          \"nearer\",\n          false,\n        ),\n    });\n  }\n\n  secondaryDim(): DynamicColor | undefined {\n    return undefined;\n  }\n\n  onSecondary(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_secondary\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 10 : 100;\n        } else {\n          return s.isDark ? 20 : 100;\n        }\n      },\n      background: (s) => this.secondary(),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  secondaryContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"secondary_container\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => {\n        const initialTone = s.isDark ? 30 : 90;\n        if (isMonochrome(s)) {\n          return s.isDark ? 30 : 85;\n        }\n        if (!isFidelity(s)) {\n          return initialTone;\n        }\n        return findDesiredChromaByTone(\n          s.secondaryPalette.hue,\n          s.secondaryPalette.chroma,\n          initialTone,\n          s.isDark ? false : true,\n        );\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.secondaryContainer(),\n          this.secondary(),\n          10,\n          \"nearer\",\n          false,\n        ),\n    });\n  }\n\n  onSecondaryContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_secondary_container\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 90 : 10;\n        }\n        if (!isFidelity(s)) {\n          return s.isDark ? 90 : 30;\n        }\n        return DynamicColor.foregroundTone(\n          this.secondaryContainer().tone(s),\n          4.5,\n        );\n      },\n      background: (s) => this.secondaryContainer(),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Tertiary [T].                                               //\n  /////////////////////////////////////////////////////////////////\n\n  tertiary(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"tertiary\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 90 : 25;\n        }\n        return s.isDark ? 80 : 40;\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.tertiaryContainer(),\n          this.tertiary(),\n          10,\n          \"nearer\",\n          false,\n        ),\n    });\n  }\n\n  tertiaryDim(): DynamicColor | undefined {\n    return undefined;\n  }\n\n  onTertiary(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_tertiary\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 10 : 90;\n        }\n        return s.isDark ? 20 : 100;\n      },\n      background: (s) => this.tertiary(),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  tertiaryContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"tertiary_container\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 60 : 49;\n        }\n        if (!isFidelity(s)) {\n          return s.isDark ? 30 : 90;\n        }\n        const proposedHct = s.tertiaryPalette.getHct(s.sourceColorHct.tone);\n        return DislikeAnalyzer.fixIfDisliked(proposedHct).tone;\n      },\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.tertiaryContainer(),\n          this.tertiary(),\n          10,\n          \"nearer\",\n          false,\n        ),\n    });\n  }\n\n  onTertiaryContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_tertiary_container\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 0 : 100;\n        }\n        if (!isFidelity(s)) {\n          return s.isDark ? 90 : 30;\n        }\n        return DynamicColor.foregroundTone(\n          this.tertiaryContainer().tone(s),\n          4.5,\n        );\n      },\n      background: (s) => this.tertiaryContainer(),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Error [E].                                                   //\n  //////////////////////////////////////////////////////////////////\n\n  error(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"error\",\n      palette: (s) => s.errorPalette,\n      tone: (s) => (s.isDark ? 80 : 40),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 7),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.errorContainer(),\n          this.error(),\n          10,\n          \"nearer\",\n          false,\n        ),\n    });\n  }\n\n  errorDim(): DynamicColor | undefined {\n    return undefined;\n  }\n\n  onError(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_error\",\n      palette: (s) => s.errorPalette,\n      tone: (s) => (s.isDark ? 20 : 100),\n      background: (s) => this.error(),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  errorContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"error_container\",\n      palette: (s) => s.errorPalette,\n      tone: (s) => (s.isDark ? 30 : 90),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.errorContainer(),\n          this.error(),\n          10,\n          \"nearer\",\n          false,\n        ),\n    });\n  }\n\n  onErrorContainer(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_error_container\",\n      palette: (s) => s.errorPalette,\n      tone: (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 90 : 10;\n        }\n        return s.isDark ? 90 : 30;\n      },\n      background: (s) => this.errorContainer(),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Primary Fixed [PF]                                           //\n  //////////////////////////////////////////////////////////////////\n\n  primaryFixed(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"primary_fixed\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => (isMonochrome(s) ? 40.0 : 90.0),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.primaryFixed(),\n          this.primaryFixedDim(),\n          10,\n          \"lighter\",\n          true,\n        ),\n    });\n  }\n\n  primaryFixedDim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"primary_fixed_dim\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => (isMonochrome(s) ? 30.0 : 80.0),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.primaryFixed(),\n          this.primaryFixedDim(),\n          10,\n          \"lighter\",\n          true,\n        ),\n    });\n  }\n\n  onPrimaryFixed(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_primary_fixed\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => (isMonochrome(s) ? 100.0 : 10.0),\n      background: (s) => this.primaryFixedDim(),\n      secondBackground: (s) => this.primaryFixed(),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  onPrimaryFixedVariant(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_primary_fixed_variant\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => (isMonochrome(s) ? 90.0 : 30.0),\n      background: (s) => this.primaryFixedDim(),\n      secondBackground: (s) => this.primaryFixed(),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  // Secondary Fixed [QF]                                          //\n  ///////////////////////////////////////////////////////////////////\n\n  secondaryFixed(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"secondary_fixed\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => (isMonochrome(s) ? 80.0 : 90.0),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.secondaryFixed(),\n          this.secondaryFixedDim(),\n          10,\n          \"lighter\",\n          true,\n        ),\n    });\n  }\n\n  secondaryFixedDim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"secondary_fixed_dim\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => (isMonochrome(s) ? 70.0 : 80.0),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.secondaryFixed(),\n          this.secondaryFixedDim(),\n          10,\n          \"lighter\",\n          true,\n        ),\n    });\n  }\n\n  onSecondaryFixed(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_secondary_fixed\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => 10.0,\n      background: (s) => this.secondaryFixedDim(),\n      secondBackground: (s) => this.secondaryFixed(),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  onSecondaryFixedVariant(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_secondary_fixed_variant\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => (isMonochrome(s) ? 25.0 : 30.0),\n      background: (s) => this.secondaryFixedDim(),\n      secondBackground: (s) => this.secondaryFixed(),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Tertiary Fixed [TF]                                         //\n  /////////////////////////////////////////////////////////////////\n\n  tertiaryFixed(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"tertiary_fixed\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => (isMonochrome(s) ? 40.0 : 90.0),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.tertiaryFixed(),\n          this.tertiaryFixedDim(),\n          10,\n          \"lighter\",\n          true,\n        ),\n    });\n  }\n\n  tertiaryFixedDim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"tertiary_fixed_dim\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => (isMonochrome(s) ? 30.0 : 80.0),\n      isBackground: true,\n      background: (s) => this.highestSurface(s),\n      contrastCurve: (s) => new ContrastCurve(1, 1, 3, 4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.tertiaryFixed(),\n          this.tertiaryFixedDim(),\n          10,\n          \"lighter\",\n          true,\n        ),\n    });\n  }\n\n  onTertiaryFixed(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_tertiary_fixed\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => (isMonochrome(s) ? 100.0 : 10.0),\n      background: (s) => this.tertiaryFixedDim(),\n      secondBackground: (s) => this.tertiaryFixed(),\n      contrastCurve: (s) => new ContrastCurve(4.5, 7, 11, 21),\n    });\n  }\n\n  onTertiaryFixedVariant(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"on_tertiary_fixed_variant\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => (isMonochrome(s) ? 90.0 : 30.0),\n      background: (s) => this.tertiaryFixedDim(),\n      secondBackground: (s) => this.tertiaryFixed(),\n      contrastCurve: (s) => new ContrastCurve(3, 4.5, 7, 11),\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Android-only Colors                                        //\n  ////////////////////////////////////////////////////////////////\n\n  controlActivated(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"control_activated\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => (s.isDark ? 30.0 : 90.0),\n      isBackground: true,\n    });\n  }\n\n  controlNormal(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"control_normal\",\n      palette: (s) => s.neutralVariantPalette,\n      tone: (s) => (s.isDark ? 80.0 : 30.0),\n    });\n  }\n\n  controlHighlight(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"control_highlight\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 100.0 : 0.0),\n      opacity: (s) => (s.isDark ? 0.2 : 0.12),\n    });\n  }\n\n  textPrimaryInverse(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"text_primary_inverse\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 10.0 : 90.0),\n    });\n  }\n\n  textSecondaryAndTertiaryInverse(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"text_secondary_and_tertiary_inverse\",\n      palette: (s) => s.neutralVariantPalette,\n      tone: (s) => (s.isDark ? 30.0 : 80.0),\n    });\n  }\n\n  textPrimaryInverseDisableOnly(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"text_primary_inverse_disable_only\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.inverseOnSurface ? 10.0 : 90.0),\n    });\n  }\n\n  textSecondaryAndTertiaryInverseDisabled(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"text_secondary_and_tertiary_inverse_disabled\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 10.0 : 90.0),\n    });\n  }\n\n  textHintInverse(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"text_hint_inverse\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 10.0 : 90.0),\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Other                                                      //\n  ////////////////////////////////////////////////////////////////\n\n  highestSurface(s: DynamicScheme): DynamicColor {\n    return s.isDark ? this.surfaceBright() : this.surfaceDim();\n  }\n}\n","export enum SpecVersion {\n  SPEC_2021 = \"2021\",\n  SPEC_2025 = \"2025\",\n}\n","/**\n * The platform on which this scheme is intended to be used. Only used in the\n * 2025 spec.\n */\nexport enum Platform {\n  PHONE,\n  WATCH,\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as math from \"../utils/math_utils\";\nimport { Hct } from \"../hct/hct\";\nimport { TonalPalette } from \"../palettes/tonal_palette\";\nimport { ColorSpecDelegateImpl2021 } from \"./color_spec_2021\";\nimport { ContrastCurve } from \"./contrast_curve\";\nimport { DynamicColor, extendSpecVersion } from \"./dynamic_color\";\nimport { ToneDeltaPair } from \"./tone_delta_pair\";\nimport { Variant } from \"./variant\";\nimport { SpecVersion } from \"./spec_version\";\nimport { Platform } from \"./platform\";\nimport type { DynamicScheme } from \"./dynamic_scheme\";\n\n/**\n * Returns the maximum tone for a given chroma in the palette.\n *\n * @param palette The tonal palette to use.\n * @param lowerBound The lower bound of the tone.\n * @param upperBound The upper bound of the tone.\n */\nfunction tMaxC(\n  palette: TonalPalette,\n  lowerBound: number = 0,\n  upperBound: number = 100,\n  chromaMultiplier: number = 1,\n): number {\n  let answer = findBestToneForChroma(\n    palette.hue,\n    palette.chroma * chromaMultiplier,\n    100,\n    true,\n  );\n  return math.clampDouble(lowerBound, upperBound, answer);\n}\n\n/**\n * Returns the minimum tone for a given chroma in the palette.\n *\n * @param palette The tonal palette to use.\n * @param lowerBound The lower bound of the tone.\n * @param upperBound The upper bound of the tone.\n */\nfunction tMinC(\n  palette: TonalPalette,\n  lowerBound: number = 0,\n  upperBound: number = 100,\n): number {\n  let answer = findBestToneForChroma(palette.hue, palette.chroma, 0, false);\n  return math.clampDouble(lowerBound, upperBound, answer);\n}\n\n/**\n * Searches for the best tone with a given chroma from a given tone at a\n * specific hue.\n *\n * @param hue The given hue.\n * @param chroma The target chroma.\n * @param tone The tone to start with.\n * @param byDecreasingTone Whether to search for lower tones.\n */\nfunction findBestToneForChroma(\n  hue: number,\n  chroma: number,\n  tone: number,\n  byDecreasingTone: boolean,\n): number {\n  let answer = tone;\n  let bestCandidate = Hct.from(hue, chroma, answer);\n  while (bestCandidate.chroma < chroma) {\n    if (tone < 0 || tone > 100) {\n      break;\n    }\n    tone += byDecreasingTone ? -1.0 : 1.0;\n    const newCandidate = Hct.from(hue, chroma, tone);\n    if (bestCandidate.chroma < newCandidate.chroma) {\n      bestCandidate = newCandidate;\n      answer = tone;\n    }\n  }\n\n  return answer;\n}\n\n/**\n * Returns the contrast curve for a given default contrast.\n *\n * @param defaultContrast The default contrast to use.\n */\nfunction getCurve(defaultContrast: number): ContrastCurve {\n  if (defaultContrast === 1.5) {\n    return new ContrastCurve(1.5, 1.5, 3, 4.5);\n  } else if (defaultContrast === 3) {\n    return new ContrastCurve(3, 3, 4.5, 7);\n  } else if (defaultContrast === 4.5) {\n    return new ContrastCurve(4.5, 4.5, 7, 11);\n  } else if (defaultContrast === 6) {\n    return new ContrastCurve(6, 6, 7, 11);\n  } else if (defaultContrast === 7) {\n    return new ContrastCurve(7, 7, 11, 21);\n  } else if (defaultContrast === 9) {\n    return new ContrastCurve(9, 9, 11, 21);\n  } else if (defaultContrast === 11) {\n    return new ContrastCurve(11, 11, 21, 21);\n  } else if (defaultContrast === 21) {\n    return new ContrastCurve(21, 21, 21, 21);\n  } else {\n    // Shouldn't happen.\n    return new ContrastCurve(defaultContrast, defaultContrast, 7, 21);\n  }\n}\n\n/**\n * A delegate for the dynamic color spec of a DynamicScheme in the 2025 spec.\n */\nexport class ColorSpecDelegateImpl2025 extends ColorSpecDelegateImpl2021 {\n  ////////////////////////////////////////////////////////////////\n  // Surfaces [S]                                               //\n  ////////////////////////////////////////////////////////////////\n\n  override surface(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"surface\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => {\n        super.surface().tone(s);\n        if (s.platform === Platform.PHONE) {\n          if (s.isDark) {\n            return 4;\n          } else {\n            if (Hct.isYellow(s.neutralPalette.hue)) {\n              return 99;\n            } else if (s.variant === Variant.VIBRANT) {\n              return 97;\n            } else {\n              return 98;\n            }\n          }\n        } else {\n          return 0;\n        }\n      },\n      isBackground: true,\n    });\n    return extendSpecVersion(super.surface(), SpecVersion.SPEC_2025, color2025);\n  }\n\n  override surfaceDim(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"surface_dim\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => {\n        if (s.isDark) {\n          return 4;\n        } else {\n          if (Hct.isYellow(s.neutralPalette.hue)) {\n            return 90;\n          } else if (s.variant === Variant.VIBRANT) {\n            return 85;\n          } else {\n            return 87;\n          }\n        }\n      },\n      isBackground: true,\n      chromaMultiplier: (s) => {\n        if (!s.isDark) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 2.5;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.7;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue) ? 2.7 : 1.75;\n          } else if (s.variant === Variant.VIBRANT) {\n            return 1.36;\n          }\n        }\n        return 1;\n      },\n    });\n    return extendSpecVersion(\n      super.surfaceDim(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override surfaceBright(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"surface_bright\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => {\n        if (s.isDark) {\n          return 18;\n        } else {\n          if (Hct.isYellow(s.neutralPalette.hue)) {\n            return 99;\n          } else if (s.variant === Variant.VIBRANT) {\n            return 97;\n          } else {\n            return 98;\n          }\n        }\n      },\n      isBackground: true,\n      chromaMultiplier: (s) => {\n        if (s.isDark) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 2.5;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.7;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue) ? 2.7 : 1.75;\n          } else if (s.variant === Variant.VIBRANT) {\n            return 1.36;\n          }\n        }\n        return 1;\n      },\n    });\n    return extendSpecVersion(\n      super.surfaceBright(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override surfaceContainerLowest(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"surface_container_lowest\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 0 : 100),\n      isBackground: true,\n    });\n    return extendSpecVersion(\n      super.surfaceContainerLowest(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override surfaceContainerLow(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"surface_container_low\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.isDark) {\n            return 6;\n          } else {\n            if (Hct.isYellow(s.neutralPalette.hue)) {\n              return 98;\n            } else if (s.variant === Variant.VIBRANT) {\n              return 95;\n            } else {\n              return 96;\n            }\n          }\n        } else {\n          return 15;\n        }\n      },\n      isBackground: true,\n      chromaMultiplier: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 1.3;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.25;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue) ? 1.3 : 1.15;\n          } else if (s.variant === Variant.VIBRANT) {\n            return 1.08;\n          }\n        }\n        return 1;\n      },\n    });\n    return extendSpecVersion(\n      super.surfaceContainerLow(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override surfaceContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"surface_container\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.isDark) {\n            return 9;\n          } else {\n            if (Hct.isYellow(s.neutralPalette.hue)) {\n              return 96;\n            } else if (s.variant === Variant.VIBRANT) {\n              return 92;\n            } else {\n              return 94;\n            }\n          }\n        } else {\n          return 20;\n        }\n      },\n      isBackground: true,\n      chromaMultiplier: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 1.6;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.4;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue) ? 1.6 : 1.3;\n          } else if (s.variant === Variant.VIBRANT) {\n            return 1.15;\n          }\n        }\n        return 1;\n      },\n    });\n    return extendSpecVersion(\n      super.surfaceContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override surfaceContainerHigh(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"surface_container_high\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.isDark) {\n            return 12;\n          } else {\n            if (Hct.isYellow(s.neutralPalette.hue)) {\n              return 94;\n            } else if (s.variant === Variant.VIBRANT) {\n              return 90;\n            } else {\n              return 92;\n            }\n          }\n        } else {\n          return 25;\n        }\n      },\n      isBackground: true,\n      chromaMultiplier: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 1.9;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.5;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue) ? 1.95 : 1.45;\n          } else if (s.variant === Variant.VIBRANT) {\n            return 1.22;\n          }\n        }\n        return 1;\n      },\n    });\n    return extendSpecVersion(\n      super.surfaceContainerHigh(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override surfaceContainerHighest(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"surface_container_highest\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => {\n        if (s.isDark) {\n          return 15;\n        } else {\n          if (Hct.isYellow(s.neutralPalette.hue)) {\n            return 92;\n          } else if (s.variant === Variant.VIBRANT) {\n            return 88;\n          } else {\n            return 90;\n          }\n        }\n      },\n      isBackground: true,\n      chromaMultiplier: (s) => {\n        if (s.variant === Variant.NEUTRAL) {\n          return 2.2;\n        } else if (s.variant === Variant.TONAL_SPOT) {\n          return 1.7;\n        } else if (s.variant === Variant.EXPRESSIVE) {\n          return Hct.isYellow(s.neutralPalette.hue) ? 2.3 : 1.6;\n        } else if (s.variant === Variant.VIBRANT) {\n          return 1.29;\n        } else {\n          // default\n          return 1;\n        }\n      },\n    });\n    return extendSpecVersion(\n      super.surfaceContainerHighest(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onSurface(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_surface\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => {\n        if (s.variant === Variant.VIBRANT) {\n          return tMaxC(s.neutralPalette, 0, 100, 1.1);\n        } else {\n          // For all other variants, the initial tone should be the default\n          // tone, which is the same as the background color.\n          return DynamicColor.getInitialToneFromBackground((s) =>\n            s.platform === Platform.PHONE\n              ? this.highestSurface(s)\n              : this.surfaceContainerHigh(),\n          )(s);\n        }\n      },\n      chromaMultiplier: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 2.2;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.7;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue)\n              ? s.isDark\n                ? 3.0\n                : 2.3\n              : 1.6;\n          }\n        }\n        return 1;\n      },\n      background: (s) =>\n        s.platform === Platform.PHONE\n          ? this.highestSurface(s)\n          : this.surfaceContainerHigh(),\n      contrastCurve: (s) => (s.isDark ? getCurve(11) : getCurve(9)),\n    });\n    return extendSpecVersion(\n      super.onSurface(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onSurfaceVariant(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_surface_variant\",\n      palette: (s) => s.neutralPalette,\n      chromaMultiplier: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 2.2;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.7;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue)\n              ? s.isDark\n                ? 3.0\n                : 2.3\n              : 1.6;\n          }\n        }\n        return 1;\n      },\n      background: (s) =>\n        s.platform === Platform.PHONE\n          ? this.highestSurface(s)\n          : this.surfaceContainerHigh(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE\n          ? s.isDark\n            ? getCurve(6)\n            : getCurve(4.5)\n          : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onSurfaceVariant(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override outline(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"outline\",\n      palette: (s) => s.neutralPalette,\n      chromaMultiplier: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 2.2;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.7;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue)\n              ? s.isDark\n                ? 3.0\n                : 2.3\n              : 1.6;\n          }\n        }\n        return 1;\n      },\n      background: (s) =>\n        s.platform === Platform.PHONE\n          ? this.highestSurface(s)\n          : this.surfaceContainerHigh(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(3) : getCurve(4.5),\n    });\n    return extendSpecVersion(super.outline(), SpecVersion.SPEC_2025, color2025);\n  }\n\n  override outlineVariant(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"outline_variant\",\n      palette: (s) => s.neutralPalette,\n      chromaMultiplier: (s) => {\n        if (s.platform === Platform.PHONE) {\n          if (s.variant === Variant.NEUTRAL) {\n            return 2.2;\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return 1.7;\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return Hct.isYellow(s.neutralPalette.hue)\n              ? s.isDark\n                ? 3.0\n                : 2.3\n              : 1.6;\n          }\n        }\n        return 1;\n      },\n      background: (s) =>\n        s.platform === Platform.PHONE\n          ? this.highestSurface(s)\n          : this.surfaceContainerHigh(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(1.5) : getCurve(3),\n    });\n    return extendSpecVersion(\n      super.outlineVariant(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override inverseSurface(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"inverse_surface\",\n      palette: (s) => s.neutralPalette,\n      tone: (s) => (s.isDark ? 98 : 4),\n      isBackground: true,\n    });\n    return extendSpecVersion(\n      super.inverseSurface(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override inverseOnSurface(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"inverse_on_surface\",\n      palette: (s) => s.neutralPalette,\n      background: (s) => this.inverseSurface(),\n      contrastCurve: (s) => getCurve(7),\n    });\n    return extendSpecVersion(\n      super.inverseOnSurface(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Primaries [P]                                              //\n  ////////////////////////////////////////////////////////////////\n\n  override primary(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"primary\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => {\n        if (s.variant === Variant.NEUTRAL) {\n          if (s.platform === Platform.PHONE) {\n            return s.isDark ? 80 : 40;\n          } else {\n            return 90;\n          }\n        } else if (s.variant === Variant.TONAL_SPOT) {\n          if (s.platform === Platform.PHONE) {\n            if (s.isDark) {\n              return 80;\n            } else {\n              return tMaxC(s.primaryPalette);\n            }\n          } else {\n            return tMaxC(s.primaryPalette, 0, 90);\n          }\n        } else if (s.variant === Variant.EXPRESSIVE) {\n          return tMaxC(\n            s.primaryPalette,\n            0,\n            Hct.isYellow(s.primaryPalette.hue)\n              ? 25\n              : Hct.isCyan(s.primaryPalette.hue)\n                ? 88\n                : 98,\n          );\n        } else {\n          // VIBRANT\n          return tMaxC(\n            s.primaryPalette,\n            0,\n            Hct.isCyan(s.primaryPalette.hue) ? 88 : 98,\n          );\n        }\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE\n          ? this.highestSurface(s)\n          : this.surfaceContainerHigh(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(4.5) : getCurve(7),\n      toneDeltaPair: (s) =>\n        s.platform === Platform.PHONE\n          ? new ToneDeltaPair(\n              this.primaryContainer(),\n              this.primary(),\n              5,\n              \"relative_lighter\",\n              true,\n              \"farther\",\n            )\n          : undefined,\n    });\n    return extendSpecVersion(super.primary(), SpecVersion.SPEC_2025, color2025);\n  }\n\n  override primaryDim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"primary_dim\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => {\n        if (s.variant === Variant.NEUTRAL) {\n          return 85;\n        } else if (s.variant === Variant.TONAL_SPOT) {\n          return tMaxC(s.primaryPalette, 0, 90);\n        } else {\n          return tMaxC(s.primaryPalette);\n        }\n      },\n      isBackground: true,\n      background: (s) => this.surfaceContainerHigh(),\n      contrastCurve: (s) => getCurve(4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.primaryDim(),\n          this.primary(),\n          5,\n          \"darker\",\n          true,\n          \"farther\",\n        ),\n    });\n  }\n\n  override onPrimary(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_primary\",\n      palette: (s) => s.primaryPalette,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.primary() : this.primaryDim(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(6) : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onPrimary(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override primaryContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"primary_container\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => {\n        if (s.platform === Platform.WATCH) {\n          return 30;\n        } else if (s.variant === Variant.NEUTRAL) {\n          return s.isDark ? 30 : 90;\n        } else if (s.variant === Variant.TONAL_SPOT) {\n          return s.isDark\n            ? tMinC(s.primaryPalette, 35, 93)\n            : tMaxC(s.primaryPalette, 0, 90);\n        } else if (s.variant === Variant.EXPRESSIVE) {\n          return s.isDark\n            ? tMaxC(s.primaryPalette, 30, 93)\n            : tMaxC(\n                s.primaryPalette,\n                78,\n                Hct.isCyan(s.primaryPalette.hue) ? 88 : 90,\n              );\n        } else {\n          // VIBRANT\n          return s.isDark\n            ? tMinC(s.primaryPalette, 66, 93)\n            : tMaxC(\n                s.primaryPalette,\n                66,\n                Hct.isCyan(s.primaryPalette.hue) ? 88 : 93,\n              );\n        }\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.highestSurface(s) : undefined,\n      toneDeltaPair: (s) =>\n        s.platform === Platform.PHONE\n          ? undefined\n          : new ToneDeltaPair(\n              this.primaryContainer(),\n              this.primaryDim(),\n              10,\n              \"darker\",\n              true,\n              \"farther\",\n            ),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE && s.contrastLevel > 0\n          ? getCurve(1.5)\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.primaryContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onPrimaryContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_primary_container\",\n      palette: (s) => s.primaryPalette,\n      background: (s) => this.primaryContainer(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(6) : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onPrimaryContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override primaryFixed(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"primary_fixed\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => {\n        let tempS = Object.assign({}, s, { isDark: false, contrastLevel: 0 });\n        return this.primaryContainer().getTone(tempS);\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.highestSurface(s) : undefined,\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE && s.contrastLevel > 0\n          ? getCurve(1.5)\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.primaryFixed(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override primaryFixedDim(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"primary_fixed_dim\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => this.primaryFixed().getTone(s),\n      isBackground: true,\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.primaryFixedDim(),\n          this.primaryFixed(),\n          5,\n          \"darker\",\n          true,\n          \"exact\",\n        ),\n    });\n    return extendSpecVersion(\n      super.primaryFixedDim(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onPrimaryFixed(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_primary_fixed\",\n      palette: (s) => s.primaryPalette,\n      background: (s) => this.primaryFixedDim(),\n      contrastCurve: (s) => getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onPrimaryFixed(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onPrimaryFixedVariant(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_primary_fixed_variant\",\n      palette: (s) => s.primaryPalette,\n      background: (s) => this.primaryFixedDim(),\n      contrastCurve: (s) => getCurve(4.5),\n    });\n    return extendSpecVersion(\n      super.onPrimaryFixedVariant(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override inversePrimary(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"inverse_primary\",\n      palette: (s) => s.primaryPalette,\n      tone: (s) => tMaxC(s.primaryPalette),\n      background: (s) => this.inverseSurface(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(6) : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.inversePrimary(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Secondaries [Q]                                            //\n  ////////////////////////////////////////////////////////////////\n\n  override secondary(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"secondary\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => {\n        if (s.platform === Platform.WATCH) {\n          return s.variant === Variant.NEUTRAL\n            ? 90\n            : tMaxC(s.secondaryPalette, 0, 90);\n        } else if (s.variant === Variant.NEUTRAL) {\n          return s.isDark\n            ? tMinC(s.secondaryPalette, 0, 98)\n            : tMaxC(s.secondaryPalette);\n        } else if (s.variant === Variant.VIBRANT) {\n          return tMaxC(s.secondaryPalette, 0, s.isDark ? 90 : 98);\n        } else {\n          // EXPRESSIVE and TONAL_SPOT\n          return s.isDark ? 80 : tMaxC(s.secondaryPalette);\n        }\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE\n          ? this.highestSurface(s)\n          : this.surfaceContainerHigh(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(4.5) : getCurve(7),\n      toneDeltaPair: (s) =>\n        s.platform === Platform.PHONE\n          ? new ToneDeltaPair(\n              this.secondaryContainer(),\n              this.secondary(),\n              5,\n              \"relative_lighter\",\n              true,\n              \"farther\",\n            )\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.secondary(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override secondaryDim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"secondary_dim\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => {\n        if (s.variant === Variant.NEUTRAL) {\n          return 85;\n        } else {\n          return tMaxC(s.secondaryPalette, 0, 90);\n        }\n      },\n      isBackground: true,\n      background: (s) => this.surfaceContainerHigh(),\n      contrastCurve: (s) => getCurve(4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.secondaryDim(),\n          this.secondary(),\n          5,\n          \"darker\",\n          true,\n          \"farther\",\n        ),\n    });\n  }\n\n  override onSecondary(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_secondary\",\n      palette: (s) => s.secondaryPalette,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.secondary() : this.secondaryDim(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(6) : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onSecondary(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override secondaryContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"secondary_container\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => {\n        if (s.platform === Platform.WATCH) {\n          return 30;\n        } else if (s.variant === Variant.VIBRANT) {\n          return s.isDark\n            ? tMinC(s.secondaryPalette, 30, 40)\n            : tMaxC(s.secondaryPalette, 84, 90);\n        } else if (s.variant === Variant.EXPRESSIVE) {\n          return s.isDark ? 15 : tMaxC(s.secondaryPalette, 90, 95);\n        } else {\n          return s.isDark ? 25 : 90;\n        }\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.highestSurface(s) : undefined,\n      toneDeltaPair: (s) =>\n        s.platform === Platform.WATCH\n          ? new ToneDeltaPair(\n              this.secondaryContainer(),\n              this.secondaryDim(),\n              10,\n              \"darker\",\n              true,\n              \"farther\",\n            )\n          : undefined,\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE && s.contrastLevel > 0\n          ? getCurve(1.5)\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.secondaryContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onSecondaryContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_secondary_container\",\n      palette: (s) => s.secondaryPalette,\n      background: (s) => this.secondaryContainer(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(6) : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onSecondaryContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override secondaryFixed(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"secondary_fixed\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => {\n        let tempS = Object.assign({}, s, { isDark: false, contrastLevel: 0 });\n        return this.secondaryContainer().getTone(tempS);\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.highestSurface(s) : undefined,\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE && s.contrastLevel > 0\n          ? getCurve(1.5)\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.secondaryFixed(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override secondaryFixedDim(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"secondary_fixed_dim\",\n      palette: (s) => s.secondaryPalette,\n      tone: (s) => this.secondaryFixed().getTone(s),\n      isBackground: true,\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.secondaryFixedDim(),\n          this.secondaryFixed(),\n          5,\n          \"darker\",\n          true,\n          \"exact\",\n        ),\n    });\n    return extendSpecVersion(\n      super.secondaryFixedDim(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onSecondaryFixed(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_secondary_fixed\",\n      palette: (s) => s.secondaryPalette,\n      background: (s) => this.secondaryFixedDim(),\n      contrastCurve: (s) => getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onSecondaryFixed(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onSecondaryFixedVariant(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_secondary_fixed_variant\",\n      palette: (s) => s.secondaryPalette,\n      background: (s) => this.secondaryFixedDim(),\n      contrastCurve: (s) => getCurve(4.5),\n    });\n    return extendSpecVersion(\n      super.onSecondaryFixedVariant(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Tertiaries [T]                                             //\n  ////////////////////////////////////////////////////////////////\n\n  override tertiary(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"tertiary\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => {\n        if (s.platform === Platform.WATCH) {\n          return s.variant === Variant.TONAL_SPOT\n            ? tMaxC(s.tertiaryPalette, 0, 90)\n            : tMaxC(s.tertiaryPalette);\n        } else if (\n          s.variant === Variant.EXPRESSIVE ||\n          s.variant === Variant.VIBRANT\n        ) {\n          return tMaxC(\n            s.tertiaryPalette,\n            0,\n            Hct.isCyan(s.tertiaryPalette.hue) ? 88 : s.isDark ? 98 : 100,\n          );\n        } else {\n          // NEUTRAL and TONAL_SPOT\n          return s.isDark\n            ? tMaxC(s.tertiaryPalette, 0, 98)\n            : tMaxC(s.tertiaryPalette);\n        }\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE\n          ? this.highestSurface(s)\n          : this.surfaceContainerHigh(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(4.5) : getCurve(7),\n      toneDeltaPair: (s) =>\n        s.platform === Platform.PHONE\n          ? new ToneDeltaPair(\n              this.tertiaryContainer(),\n              this.tertiary(),\n              5,\n              \"relative_lighter\",\n              true,\n              \"farther\",\n            )\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.tertiary(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override tertiaryDim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"tertiary_dim\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => {\n        if (s.variant === Variant.TONAL_SPOT) {\n          return tMaxC(s.tertiaryPalette, 0, 90);\n        } else {\n          return tMaxC(s.tertiaryPalette);\n        }\n      },\n      isBackground: true,\n      background: (s) => this.surfaceContainerHigh(),\n      contrastCurve: (s) => getCurve(4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.tertiaryDim(),\n          this.tertiary(),\n          5,\n          \"darker\",\n          true,\n          \"farther\",\n        ),\n    });\n  }\n\n  override onTertiary(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_tertiary\",\n      palette: (s) => s.tertiaryPalette,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.tertiary() : this.tertiaryDim(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(6) : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onTertiary(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override tertiaryContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"tertiary_container\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => {\n        if (s.platform === Platform.WATCH) {\n          return s.variant === Variant.TONAL_SPOT\n            ? tMaxC(s.tertiaryPalette, 0, 90)\n            : tMaxC(s.tertiaryPalette);\n        } else {\n          if (s.variant === Variant.NEUTRAL) {\n            return s.isDark\n              ? tMaxC(s.tertiaryPalette, 0, 93)\n              : tMaxC(s.tertiaryPalette, 0, 96);\n          } else if (s.variant === Variant.TONAL_SPOT) {\n            return tMaxC(s.tertiaryPalette, 0, s.isDark ? 93 : 100);\n          } else if (s.variant === Variant.EXPRESSIVE) {\n            return tMaxC(\n              s.tertiaryPalette,\n              75,\n              Hct.isCyan(s.tertiaryPalette.hue) ? 88 : s.isDark ? 93 : 100,\n            );\n          } else {\n            // VIBRANT\n            return s.isDark\n              ? tMaxC(s.tertiaryPalette, 0, 93)\n              : tMaxC(s.tertiaryPalette, 72, 100);\n          }\n        }\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.highestSurface(s) : undefined,\n      toneDeltaPair: (s) =>\n        s.platform === Platform.WATCH\n          ? new ToneDeltaPair(\n              this.tertiaryContainer(),\n              this.tertiaryDim(),\n              10,\n              \"darker\",\n              true,\n              \"farther\",\n            )\n          : undefined,\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE && s.contrastLevel > 0\n          ? getCurve(1.5)\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.tertiaryContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onTertiaryContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_tertiary_container\",\n      palette: (s) => s.tertiaryPalette,\n      background: (s) => this.tertiaryContainer(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(6) : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onTertiaryContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override tertiaryFixed(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"tertiary_fixed\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => {\n        let tempS = Object.assign({}, s, { isDark: false, contrastLevel: 0 });\n        return this.tertiaryContainer().getTone(tempS);\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.highestSurface(s) : undefined,\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE && s.contrastLevel > 0\n          ? getCurve(1.5)\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.tertiaryFixed(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override tertiaryFixedDim(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"tertiary_fixed_dim\",\n      palette: (s) => s.tertiaryPalette,\n      tone: (s) => this.tertiaryFixed().getTone(s),\n      isBackground: true,\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.tertiaryFixedDim(),\n          this.tertiaryFixed(),\n          5,\n          \"darker\",\n          true,\n          \"exact\",\n        ),\n    });\n    return extendSpecVersion(\n      super.tertiaryFixedDim(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onTertiaryFixed(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_tertiary_fixed\",\n      palette: (s) => s.tertiaryPalette,\n      background: (s) => this.tertiaryFixedDim(),\n      contrastCurve: (s) => getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onTertiaryFixed(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onTertiaryFixedVariant(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_tertiary_fixed_variant\",\n      palette: (s) => s.tertiaryPalette,\n      background: (s) => this.tertiaryFixedDim(),\n      contrastCurve: (s) => getCurve(4.5),\n    });\n    return extendSpecVersion(\n      super.onTertiaryFixedVariant(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Errors [E]                                                 //\n  ////////////////////////////////////////////////////////////////\n\n  override error(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"error\",\n      palette: (s) => s.errorPalette,\n      tone: (s) => {\n        if (s.platform === Platform.PHONE) {\n          return s.isDark\n            ? tMinC(s.errorPalette, 0, 98)\n            : tMaxC(s.errorPalette);\n        } else {\n          return tMinC(s.errorPalette);\n        }\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE\n          ? this.highestSurface(s)\n          : this.surfaceContainerHigh(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(4.5) : getCurve(7),\n      toneDeltaPair: (s) =>\n        s.platform === Platform.PHONE\n          ? new ToneDeltaPair(\n              this.errorContainer(),\n              this.error(),\n              5,\n              \"relative_lighter\",\n              true,\n              \"farther\",\n            )\n          : undefined,\n    });\n    return extendSpecVersion(super.error(), SpecVersion.SPEC_2025, color2025);\n  }\n\n  override errorDim(): DynamicColor {\n    return DynamicColor.fromPalette({\n      name: \"error_dim\",\n      palette: (s) => s.errorPalette,\n      tone: (s) => tMinC(s.errorPalette),\n      isBackground: true,\n      background: (s) => this.surfaceContainerHigh(),\n      contrastCurve: (s) => getCurve(4.5),\n      toneDeltaPair: (s) =>\n        new ToneDeltaPair(\n          this.errorDim(),\n          this.error(),\n          5,\n          \"darker\",\n          true,\n          \"farther\",\n        ),\n    });\n  }\n\n  override onError(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_error\",\n      palette: (s) => s.errorPalette,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.error() : this.errorDim(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(6) : getCurve(7),\n    });\n    return extendSpecVersion(super.onError(), SpecVersion.SPEC_2025, color2025);\n  }\n\n  override errorContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"error_container\",\n      palette: (s) => s.errorPalette,\n      tone: (s) => {\n        if (s.platform === Platform.WATCH) {\n          return 30;\n        } else {\n          return s.isDark\n            ? tMinC(s.errorPalette, 30, 93)\n            : tMaxC(s.errorPalette, 0, 90);\n        }\n      },\n      isBackground: true,\n      background: (s) =>\n        s.platform === Platform.PHONE ? this.highestSurface(s) : undefined,\n      toneDeltaPair: (s) =>\n        s.platform === Platform.WATCH\n          ? new ToneDeltaPair(\n              this.errorContainer(),\n              this.errorDim(),\n              10,\n              \"darker\",\n              true,\n              \"farther\",\n            )\n          : undefined,\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE && s.contrastLevel > 0\n          ? getCurve(1.5)\n          : undefined,\n    });\n    return extendSpecVersion(\n      super.errorContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onErrorContainer(): DynamicColor {\n    const color2025: DynamicColor = DynamicColor.fromPalette({\n      name: \"on_error_container\",\n      palette: (s) => s.errorPalette,\n      background: (s) => this.errorContainer(),\n      contrastCurve: (s) =>\n        s.platform === Platform.PHONE ? getCurve(4.5) : getCurve(7),\n    });\n    return extendSpecVersion(\n      super.onErrorContainer(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Remapped Colors                                             //\n  /////////////////////////////////////////////////////////////////\n\n  override surfaceVariant(): DynamicColor {\n    const color2025: DynamicColor = Object.assign(\n      this.surfaceContainerHighest().clone(),\n      { name: \"surface_variant\" },\n    );\n    return extendSpecVersion(\n      super.surfaceVariant(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override surfaceTint(): DynamicColor {\n    const color2025: DynamicColor = Object.assign(this.primary().clone(), {\n      name: \"surface_tint\",\n    });\n    return extendSpecVersion(\n      super.surfaceTint(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override background(): DynamicColor {\n    const color2025: DynamicColor = Object.assign(this.surface().clone(), {\n      name: \"background\",\n    });\n    return extendSpecVersion(\n      super.background(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override onBackground(): DynamicColor {\n    const color2025: DynamicColor = Object.assign(this.onSurface().clone(), {\n      name: \"on_background\",\n      tone: (s: DynamicScheme) => {\n        return s.platform === Platform.WATCH\n          ? 100.0\n          : this.onSurface().getTone(s);\n      },\n    });\n    return extendSpecVersion(\n      super.onBackground(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override controlActivated(): DynamicColor {\n    const color2025: DynamicColor = Object.assign(\n      this.primaryContainer().clone(),\n      {\n        name: \"control_activated\",\n      },\n    );\n    return extendSpecVersion(\n      super.controlActivated(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override controlNormal(): DynamicColor {\n    const color2025: DynamicColor = Object.assign(\n      this.onSurfaceVariant().clone(),\n      {\n        name: \"control_normal\",\n      },\n    );\n    return extendSpecVersion(\n      super.controlNormal(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n\n  override textPrimaryInverse(): DynamicColor {\n    const color2025: DynamicColor = Object.assign(\n      this.inverseOnSurface().clone(),\n      {\n        name: \"text_primary_inverse\",\n      },\n    );\n    return extendSpecVersion(\n      super.textPrimaryInverse(),\n      SpecVersion.SPEC_2025,\n      color2025,\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ColorSpecDelegateImpl2025 } from \"./color_spec_2025\";\nimport { DynamicColor } from \"./dynamic_color\";\nimport type { DynamicScheme } from \"./dynamic_scheme\";\n\n/**\n * DynamicColors for the colors in the Material Design system.\n */\n// Material Color Utilities namespaces the various utilities it provides.\n// tslint:disable-next-line:class-as-namespace\nexport class MaterialDynamicColors {\n  static contentAccentToneDelta = 15.0;\n\n  private static readonly colorSpec = new ColorSpecDelegateImpl2025();\n\n  highestSurface(s: DynamicScheme): DynamicColor {\n    return MaterialDynamicColors.colorSpec.highestSurface(s);\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Main Palettes                                              //\n  ////////////////////////////////////////////////////////////////\n\n  primaryPaletteKeyColor(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.primaryPaletteKeyColor();\n  }\n\n  secondaryPaletteKeyColor(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.secondaryPaletteKeyColor();\n  }\n\n  tertiaryPaletteKeyColor(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.tertiaryPaletteKeyColor();\n  }\n\n  neutralPaletteKeyColor(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.neutralPaletteKeyColor();\n  }\n\n  neutralVariantPaletteKeyColor(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.neutralVariantPaletteKeyColor();\n  }\n\n  errorPaletteKeyColor(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.errorPaletteKeyColor();\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Surfaces [S]                                               //\n  ////////////////////////////////////////////////////////////////\n\n  background(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.background();\n  }\n\n  onBackground(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onBackground();\n  }\n\n  surface(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surface();\n  }\n\n  surfaceDim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceDim();\n  }\n\n  surfaceBright(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceBright();\n  }\n\n  surfaceContainerLowest(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceContainerLowest();\n  }\n\n  surfaceContainerLow(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceContainerLow();\n  }\n\n  surfaceContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceContainer();\n  }\n\n  surfaceContainerHigh(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceContainerHigh();\n  }\n\n  surfaceContainerHighest(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceContainerHighest();\n  }\n\n  onSurface(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onSurface();\n  }\n\n  surfaceVariant(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceVariant();\n  }\n\n  onSurfaceVariant(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onSurfaceVariant();\n  }\n\n  outline(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.outline();\n  }\n\n  outlineVariant(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.outlineVariant();\n  }\n\n  inverseSurface(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.inverseSurface();\n  }\n\n  inverseOnSurface(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.inverseOnSurface();\n  }\n\n  shadow(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.shadow();\n  }\n\n  scrim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.scrim();\n  }\n\n  surfaceTint(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.surfaceTint();\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Primaries [P]                                              //\n  ////////////////////////////////////////////////////////////////\n\n  primary(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.primary();\n  }\n\n  primaryDim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.primaryDim();\n  }\n\n  onPrimary(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onPrimary();\n  }\n\n  primaryContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.primaryContainer();\n  }\n\n  onPrimaryContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onPrimaryContainer();\n  }\n\n  inversePrimary(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.inversePrimary();\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Primary Fixed [PF]                                          //\n  /////////////////////////////////////////////////////////////////\n\n  primaryFixed(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.primaryFixed();\n  }\n\n  primaryFixedDim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.primaryFixedDim();\n  }\n\n  onPrimaryFixed(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onPrimaryFixed();\n  }\n\n  onPrimaryFixedVariant(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onPrimaryFixedVariant();\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Secondaries [Q]                                            //\n  ////////////////////////////////////////////////////////////////\n\n  secondary(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.secondary();\n  }\n\n  secondaryDim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.secondaryDim();\n  }\n\n  onSecondary(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onSecondary();\n  }\n\n  secondaryContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.secondaryContainer();\n  }\n\n  onSecondaryContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onSecondaryContainer();\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Secondary Fixed [QF]                                        //\n  /////////////////////////////////////////////////////////////////\n\n  secondaryFixed(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.secondaryFixed();\n  }\n\n  secondaryFixedDim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.secondaryFixedDim();\n  }\n\n  onSecondaryFixed(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onSecondaryFixed();\n  }\n\n  onSecondaryFixedVariant(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onSecondaryFixedVariant();\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Tertiaries [T]                                             //\n  ////////////////////////////////////////////////////////////////\n\n  tertiary(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.tertiary();\n  }\n\n  tertiaryDim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.tertiaryDim();\n  }\n\n  onTertiary(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onTertiary();\n  }\n\n  tertiaryContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.tertiaryContainer();\n  }\n\n  onTertiaryContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onTertiaryContainer();\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Tertiary Fixed [TF]                                         //\n  /////////////////////////////////////////////////////////////////\n\n  tertiaryFixed(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.tertiaryFixed();\n  }\n\n  tertiaryFixedDim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.tertiaryFixedDim();\n  }\n\n  onTertiaryFixed(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onTertiaryFixed();\n  }\n\n  onTertiaryFixedVariant(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onTertiaryFixedVariant();\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Errors [E]                                                 //\n  ////////////////////////////////////////////////////////////////\n\n  error(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.error();\n  }\n\n  errorDim(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.errorDim();\n  }\n\n  onError(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onError();\n  }\n\n  errorContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.errorContainer();\n  }\n\n  onErrorContainer(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.onErrorContainer();\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // Android-only Colors                                        //\n  ////////////////////////////////////////////////////////////////\n\n  controlActivated(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.controlActivated();\n  }\n\n  controlNormal(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.controlNormal();\n  }\n\n  controlHighlight(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.controlHighlight();\n  }\n\n  textPrimaryInverse(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.textPrimaryInverse();\n  }\n\n  textSecondaryAndTertiaryInverse(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.textSecondaryAndTertiaryInverse();\n  }\n\n  textPrimaryInverseDisableOnly(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.textPrimaryInverseDisableOnly();\n  }\n\n  textSecondaryAndTertiaryInverseDisabled(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.textSecondaryAndTertiaryInverseDisabled();\n  }\n\n  textHintInverse(): DynamicColor {\n    return MaterialDynamicColors.colorSpec.textHintInverse();\n  }\n\n  ////////////////////////////////////////////////////////////////\n  // All Colors                                                 //\n  ////////////////////////////////////////////////////////////////\n\n  public readonly allDynamicColors: DynamicColor[] = [\n    this.primaryPaletteKeyColor(),\n    this.secondaryPaletteKeyColor(),\n    this.tertiaryPaletteKeyColor(),\n    this.neutralPaletteKeyColor(),\n    this.neutralVariantPaletteKeyColor(),\n    this.errorPaletteKeyColor(),\n    this.background(),\n    this.onBackground(),\n    this.surface(),\n    this.surfaceDim(),\n    this.surfaceBright(),\n    this.surfaceContainerLowest(),\n    this.surfaceContainerLow(),\n    this.surfaceContainer(),\n    this.surfaceContainerHigh(),\n    this.surfaceContainerHighest(),\n    this.onSurface(),\n    this.surfaceVariant(),\n    this.onSurfaceVariant(),\n    this.outline(),\n    this.outlineVariant(),\n    this.inverseSurface(),\n    this.inverseOnSurface(),\n    this.shadow(),\n    this.scrim(),\n    this.surfaceTint(),\n    this.primary(),\n    this.primaryDim(),\n    this.onPrimary(),\n    this.primaryContainer(),\n    this.onPrimaryContainer(),\n    this.primaryFixed(),\n    this.primaryFixedDim(),\n    this.onPrimaryFixed(),\n    this.onPrimaryFixedVariant(),\n    this.inversePrimary(),\n    this.secondary(),\n    this.secondaryDim(),\n    this.onSecondary(),\n    this.secondaryContainer(),\n    this.onSecondaryContainer(),\n    this.secondaryFixed(),\n    this.secondaryFixedDim(),\n    this.onSecondaryFixed(),\n    this.onSecondaryFixedVariant(),\n    this.tertiary(),\n    this.tertiaryDim(),\n    this.onTertiary(),\n    this.tertiaryContainer(),\n    this.onTertiaryContainer(),\n    this.tertiaryFixed(),\n    this.tertiaryFixedDim(),\n    this.onTertiaryFixed(),\n    this.onTertiaryFixedVariant(),\n    this.error(),\n    this.errorDim(),\n    this.onError(),\n    this.errorContainer(),\n    this.onErrorContainer(),\n    this.controlActivated(),\n    this.controlNormal(),\n    this.controlHighlight(),\n    this.textPrimaryInverse(),\n    this.textSecondaryAndTertiaryInverse(),\n    this.textPrimaryInverseDisableOnly(),\n    this.textSecondaryAndTertiaryInverseDisabled(),\n    this.textHintInverse(),\n  ];\n\n  // Static variables are deprecated. Use the instance methods to get correct\n  // specs based on request.\n\n  /** @deprecated Use highestSurface() instead. */\n  static highestSurface(s: DynamicScheme): DynamicColor {\n    return MaterialDynamicColors.colorSpec.highestSurface(s);\n  }\n\n  /** @deprecated Use primaryPaletteKeyColor() instead. */\n  static primaryPaletteKeyColor =\n    MaterialDynamicColors.colorSpec.primaryPaletteKeyColor();\n\n  /** @deprecated Use secondaryPaletteKeyColor() instead. */\n  static secondaryPaletteKeyColor =\n    MaterialDynamicColors.colorSpec.secondaryPaletteKeyColor();\n\n  /** @deprecated Use tertiaryPaletteKeyColor() instead. */\n  static tertiaryPaletteKeyColor =\n    MaterialDynamicColors.colorSpec.tertiaryPaletteKeyColor();\n\n  /** @deprecated Use neutralPaletteKeyColor() instead. */\n  static neutralPaletteKeyColor =\n    MaterialDynamicColors.colorSpec.neutralPaletteKeyColor();\n\n  /** @deprecated Use neutralVariantPaletteKeyColor() instead. */\n  static neutralVariantPaletteKeyColor =\n    MaterialDynamicColors.colorSpec.neutralVariantPaletteKeyColor();\n\n  /** @deprecated Use background() instead. */\n  static background = MaterialDynamicColors.colorSpec.background();\n\n  /** @deprecated Use background() instead. */\n  static onBackground = MaterialDynamicColors.colorSpec.onBackground();\n\n  /** @deprecated Use surface() instead. */\n  static surface = MaterialDynamicColors.colorSpec.surface();\n\n  /** @deprecated Use surfaceDim() instead. */\n  static surfaceDim = MaterialDynamicColors.colorSpec.surfaceDim();\n\n  /** @deprecated Use surfaceBright() instead. */\n  static surfaceBright = MaterialDynamicColors.colorSpec.surfaceBright();\n\n  /** @deprecated Use surfaceContainerLowest() instead. */\n  static surfaceContainerLowest =\n    MaterialDynamicColors.colorSpec.surfaceContainerLowest();\n\n  /** @deprecated Use surfaceContainerLow() instead. */\n  static surfaceContainerLow =\n    MaterialDynamicColors.colorSpec.surfaceContainerLow();\n\n  /** @deprecated Use surfaceContainer() instead. */\n  static surfaceContainer = MaterialDynamicColors.colorSpec.surfaceContainer();\n\n  /** @deprecated Use surfaceContainerHigh() instead. */\n  static surfaceContainerHigh =\n    MaterialDynamicColors.colorSpec.surfaceContainerHigh();\n\n  /** @deprecated Use surfaceContainerHighest() instead. */\n  static surfaceContainerHighest =\n    MaterialDynamicColors.colorSpec.surfaceContainerHighest();\n\n  /** @deprecated Use onSurface() instead. */\n  static onSurface = MaterialDynamicColors.colorSpec.onSurface();\n\n  /** @deprecated Use surfaceVariant() instead. */\n  static surfaceVariant = MaterialDynamicColors.colorSpec.surfaceVariant();\n\n  /** @deprecated Use onSurfaceVariant() instead. */\n  static onSurfaceVariant = MaterialDynamicColors.colorSpec.onSurfaceVariant();\n\n  /** @deprecated Use inverseSurface() instead. */\n  static inverseSurface = MaterialDynamicColors.colorSpec.inverseSurface();\n\n  /** @deprecated Use inverseOnSurface() instead. */\n  static inverseOnSurface = MaterialDynamicColors.colorSpec.inverseOnSurface();\n\n  /** @deprecated Use outline() instead. */\n  static outline = MaterialDynamicColors.colorSpec.outline();\n\n  /** @deprecated Use outlineVariant() instead. */\n  static outlineVariant = MaterialDynamicColors.colorSpec.outlineVariant();\n\n  /** @deprecated Use shadow() instead. */\n  static shadow = MaterialDynamicColors.colorSpec.shadow();\n\n  /** @deprecated Use scrim() instead. */\n  static scrim = MaterialDynamicColors.colorSpec.scrim();\n\n  /** @deprecated Use surfaceTint() instead. */\n  static surfaceTint = MaterialDynamicColors.colorSpec.surfaceTint();\n\n  /** @deprecated Use primary() instead. */\n  static primary = MaterialDynamicColors.colorSpec.primary();\n\n  /** @deprecated Use onPrimary() instead. */\n  static onPrimary = MaterialDynamicColors.colorSpec.onPrimary();\n\n  /** @deprecated Use primaryContainer() instead. */\n  static primaryContainer = MaterialDynamicColors.colorSpec.primaryContainer();\n\n  /** @deprecated Use onPrimaryContainer() instead. */\n  static onPrimaryContainer =\n    MaterialDynamicColors.colorSpec.onPrimaryContainer();\n\n  /** @deprecated Use inversePrimary() instead. */\n  static inversePrimary = MaterialDynamicColors.colorSpec.inversePrimary();\n\n  /** @deprecated Use secondary() instead. */\n  static secondary = MaterialDynamicColors.colorSpec.secondary();\n\n  /** @deprecated Use onSecondary() instead. */\n  static onSecondary = MaterialDynamicColors.colorSpec.onSecondary();\n\n  /** @deprecated Use secondaryContainer() instead. */\n  static secondaryContainer =\n    MaterialDynamicColors.colorSpec.secondaryContainer();\n\n  /** @deprecated Use onSecondaryContainer() instead. */\n  static onSecondaryContainer =\n    MaterialDynamicColors.colorSpec.onSecondaryContainer();\n\n  /** @deprecated Use tertiary() instead. */\n  static tertiary = MaterialDynamicColors.colorSpec.tertiary();\n\n  /** @deprecated Use onTertiary() instead. */\n  static onTertiary = MaterialDynamicColors.colorSpec.onTertiary();\n\n  /** @deprecated Use tertiaryContainer() instead. */\n  static tertiaryContainer =\n    MaterialDynamicColors.colorSpec.tertiaryContainer();\n\n  /** @deprecated Use onTertiaryContainer() instead. */\n  static onTertiaryContainer =\n    MaterialDynamicColors.colorSpec.onTertiaryContainer();\n\n  /** @deprecated Use error() instead. */\n  static error = MaterialDynamicColors.colorSpec.error();\n\n  /** @deprecated Use onError() instead. */\n  static onError = MaterialDynamicColors.colorSpec.onError();\n\n  /** @deprecated Use errorContainer() instead. */\n  static errorContainer = MaterialDynamicColors.colorSpec.errorContainer();\n\n  /** @deprecated Use onErrorContainer() instead. */\n  static onErrorContainer = MaterialDynamicColors.colorSpec.onErrorContainer();\n\n  /** @deprecated Use primaryFixed() instead. */\n  static primaryFixed = MaterialDynamicColors.colorSpec.primaryFixed();\n\n  /** @deprecated Use primaryFixedDim() instead. */\n  static primaryFixedDim = MaterialDynamicColors.colorSpec.primaryFixedDim();\n\n  /** @deprecated Use onPrimaryFixed() instead. */\n  static onPrimaryFixed = MaterialDynamicColors.colorSpec.onPrimaryFixed();\n\n  /** @deprecated Use onPrimaryFixedVariant() instead. */\n  static onPrimaryFixedVariant =\n    MaterialDynamicColors.colorSpec.onPrimaryFixedVariant();\n\n  /** @deprecated Use secondaryFixed() instead. */\n  static secondaryFixed = MaterialDynamicColors.colorSpec.secondaryFixed();\n\n  /** @deprecated Use secondaryFixedDim() instead. */\n  static secondaryFixedDim =\n    MaterialDynamicColors.colorSpec.secondaryFixedDim();\n\n  /** @deprecated Use onSecondaryFixed() instead. */\n  static onSecondaryFixed = MaterialDynamicColors.colorSpec.onSecondaryFixed();\n\n  /** @deprecated Use onSecondaryFixedVariant() instead. */\n  static onSecondaryFixedVariant =\n    MaterialDynamicColors.colorSpec.onSecondaryFixedVariant();\n\n  /** @deprecated Use tertiaryFixed() instead. */\n  static tertiaryFixed = MaterialDynamicColors.colorSpec.tertiaryFixed();\n\n  /** @deprecated Use tertiaryFixedDim() instead. */\n  static tertiaryFixedDim = MaterialDynamicColors.colorSpec.tertiaryFixedDim();\n\n  /** @deprecated Use onTertiaryFixed() instead. */\n  static onTertiaryFixed = MaterialDynamicColors.colorSpec.onTertiaryFixed();\n\n  /** @deprecated Use onTertiaryFixedVariant() instead. */\n  static onTertiaryFixedVariant =\n    MaterialDynamicColors.colorSpec.onTertiaryFixedVariant();\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as math from \"../utils/math_utils\";\nimport { DislikeAnalyzer } from \"../dislike/dislike_analyzer\";\nimport { Hct } from \"../hct/hct\";\nimport { TonalPalette } from \"../palettes/tonal_palette\";\nimport { TemperatureCache } from \"../temperature/temperature_cache\";\nimport type { DynamicColor } from \"./dynamic_color\";\nimport { MaterialDynamicColors } from \"./material_dynamic_colors\";\nimport { Variant } from \"./variant\";\nimport { SpecVersion } from \"./spec_version\";\nimport { Platform } from \"./platform\";\n\n/**\n * @param sourceColorArgb The source color of the theme as an ARGB 32-bit\n *     integer.\n * @param variant The variant, or style, of the theme.\n * @param contrastLevel Value from -1 to 1. -1 represents minimum contrast, 0\n *     represents standard (i.e. the design as spec'd), and 1 represents maximum\n *     contrast.\n * @param isDark Whether the scheme is in dark mode or light mode.\n * @param platform The platform on which this scheme is intended to be used.\n * @param specVersion The version of the design spec that this scheme is based\n *     on.\n * @param primaryPalette Given a tone, produces a color. Hue and chroma of the\n *     color are specified in the design specification of the variant. Usually\n *     colorful.\n * @param secondaryPalette Given a tone, produces a color. Hue and chroma of the\n *     color are specified in the design specification of the variant. Usually\n *     less colorful.\n * @param tertiaryPalette Given a tone, produces a color. Hue and chroma of the\n *     color are specified in the design specification of the variant. Usually a\n *     different hue from primary and colorful.\n * @param neutralPalette Given a tone, produces a color. Hue and chroma of the\n *     color are specified in the design specification of the variant. Usually\n *     not colorful at all, intended for background & surface colors.\n * @param neutralVariantPalette Given a tone, produces a color. Hue and chroma\n *     of the color are specified in the design specification of the variant.\n *     Usually not colorful, but slightly more colorful than Neutral. Intended\n *     for backgrounds & surfaces.\n */\nexport interface DynamicSchemeOptions {\n  sourceColorHct: Hct;\n  variant: Variant;\n  isDark: boolean;\n  contrastLevel?: number;\n  platform?: Platform;\n  specVersion?: SpecVersion;\n  primaryPalette?: TonalPalette;\n  secondaryPalette?: TonalPalette;\n  tertiaryPalette?: TonalPalette;\n  neutralPalette?: TonalPalette;\n  neutralVariantPalette?: TonalPalette;\n  errorPalette?: TonalPalette;\n}\n\n/**\n * @param sourceColorArgb The source color of the theme as an ARGB 32-bit\n *     integer.\n * @param variant The variant, or style, of the theme.\n * @param contrastLevel Value from -1 to 1. -1 represents minimum contrast, 0\n *     represents standard (i.e. the design as spec'd), and 1 represents maximum\n *     contrast.\n * @param isDark Whether the scheme is in dark mode or light mode.\n * @param platform The platform on which this scheme is intended to be used.\n * @param specVersion The version of the design spec that this scheme is based\n *     on.\n * @param primaryPalette Given a tone, produces a color. Hue and chroma of the\n *     color are specified in the design specification of the variant. Usually\n *     colorful.\n * @param secondaryPalette Given a tone, produces a color. Hue and chroma of the\n *     color are specified in the design specification of the variant. Usually\n *     less colorful.\n * @param tertiaryPalette Given a tone, produces a color. Hue and chroma of the\n *     color are specified in the design specification of the variant. Usually a\n *     different hue from primary and colorful.\n * @param neutralPalette Given a tone, produces a color. Hue and chroma of the\n *     color are specified in the design specification of the variant. Usually\n *     not colorful at all, intended for background & surface colors.\n * @param neutralVariantPalette Given a tone, produces a color. Hue and chroma\n *     of the color are specified in the design specification of the variant.\n *     Usually not colorful, but slightly more colorful than Neutral. Intended\n *     for backgrounds & surfaces.\n */\nexport type DynamicSchemeFromOptions = DynamicSchemeRoles & {\n  sourceColorHct?: Hct;\n  contrastLevel?: number;\n  isDark: boolean;\n  variant?: Variant;\n  platform?: Platform;\n  specVersion?: SpecVersion;\n};\n\ntype DynamicSchemeColorRole<\n  ColorRoleName extends string,\n  PaletteName extends string = `${ColorRoleName}Palette`,\n  PaletteKeyColorname extends string = `${PaletteName}KeyColor`,\n> =\n  | ({\n      [K in PaletteKeyColorname]?: undefined;\n    } & { [K in PaletteName]?: TonalPalette })\n  | ({ [K in PaletteName]?: undefined } & { [K in PaletteKeyColorname]?: Hct });\n\ntype DynamicSchemeRoles = DynamicSchemeColorRole<\"primary\"> &\n  DynamicSchemeColorRole<\"secondary\"> &\n  DynamicSchemeColorRole<\"tertiary\"> &\n  DynamicSchemeColorRole<\"neutral\"> &\n  DynamicSchemeColorRole<\"neutralVariant\"> &\n  DynamicSchemeColorRole<\"error\">;\n\n// const A: DynamicSchemeColorRole<\"primary\"> = {primaryPalette};\n\n/**\n * A delegate that provides the palettes of a DynamicScheme.\n *\n * This is used to allow different implementations of the palette calculation\n * logic for different spec versions.\n */\ninterface DynamicSchemePalettesDelegate {\n  getPrimaryPalette: (\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ) => TonalPalette;\n\n  getSecondaryPalette: (\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ) => TonalPalette;\n\n  getTertiaryPalette: (\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ) => TonalPalette;\n\n  getNeutralPalette: (\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ) => TonalPalette;\n\n  getNeutralVariantPalette: (\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ) => TonalPalette;\n\n  getErrorPalette: (\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ) => TonalPalette | undefined;\n}\n\n/**\n * Constructed by a set of values representing the current UI state (such as\n * whether or not its dark theme, what the theme style is, etc.), and\n * provides a set of TonalPalettes that can create colors that fit in\n * with the theme style. Used by DynamicColor to resolve into a color.\n */\nexport class DynamicScheme {\n  static readonly DEFAULT_SPEC_VERSION: SpecVersion = SpecVersion.SPEC_2021;\n  static readonly DEFAULT_PLATFORM: Platform = Platform.PHONE;\n\n  /**\n   * The source color of the theme as an HCT color.\n   */\n  readonly sourceColorHct: Hct;\n\n  /** The source color of the theme as an ARGB 32-bit integer. */\n  readonly sourceColorArgb: number;\n\n  /** The variant, or style, of the theme. */\n  readonly variant: Variant;\n\n  /**\n   * Value from -1 to 1. -1 represents minimum contrast. 0 represents standard\n   * (i.e. the design as spec'd), and 1 represents maximum contrast.\n   */\n  readonly contrastLevel: number;\n\n  /** Whether the scheme is in dark mode or light mode. */\n  readonly isDark: boolean;\n\n  /** The platform on which this scheme is intended to be used. */\n  readonly platform: Platform;\n\n  /** The version of the design spec that this scheme is based on. */\n  readonly specVersion: SpecVersion;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually\n   * colorful.\n   */\n  readonly primaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * less colorful.\n   */\n  readonly secondaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * a different hue from primary and colorful.\n   */\n  readonly tertiaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually not\n   * colorful at all, intended for background & surface colors.\n   */\n  readonly neutralPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma\n   * of the color are specified in the design specification of the variant.\n   * Usually not colorful, but slightly more colorful than Neutral. Intended for\n   * backgrounds & surfaces.\n   */\n  readonly neutralVariantPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a reddish, colorful, color.\n   */\n  readonly errorPalette: TonalPalette;\n\n  readonly colors: MaterialDynamicColors;\n\n  constructor({\n    sourceColorHct,\n    isDark,\n    contrastLevel = 0.0,\n    variant,\n    specVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform = DynamicScheme.DEFAULT_PLATFORM,\n    primaryPalette,\n    secondaryPalette,\n    tertiaryPalette,\n    neutralPalette,\n    neutralVariantPalette,\n    errorPalette,\n  }: DynamicSchemeOptions) {\n    this.sourceColorArgb = sourceColorHct.toInt();\n    this.variant = variant;\n    this.contrastLevel = contrastLevel;\n    this.isDark = isDark;\n    this.platform = platform;\n    this.specVersion = specVersion;\n    this.sourceColorHct = sourceColorHct;\n    this.primaryPalette =\n      primaryPalette ??\n      getSpec(specVersion).getPrimaryPalette(\n        variant,\n        sourceColorHct,\n        isDark,\n        platform,\n        contrastLevel,\n      );\n    this.secondaryPalette =\n      secondaryPalette ??\n      getSpec(specVersion).getSecondaryPalette(\n        variant,\n        sourceColorHct,\n        isDark,\n        platform,\n        contrastLevel,\n      );\n    this.tertiaryPalette =\n      tertiaryPalette ??\n      getSpec(specVersion).getTertiaryPalette(\n        variant,\n        sourceColorHct,\n        isDark,\n        platform,\n        contrastLevel,\n      );\n    this.neutralPalette =\n      neutralPalette ??\n      getSpec(specVersion).getNeutralPalette(\n        variant,\n        sourceColorHct,\n        isDark,\n        platform,\n        contrastLevel,\n      );\n    this.neutralVariantPalette =\n      neutralVariantPalette ??\n      getSpec(specVersion).getNeutralVariantPalette(\n        variant,\n        sourceColorHct,\n        isDark,\n        platform,\n        contrastLevel,\n      );\n    this.errorPalette =\n      errorPalette ??\n      getSpec(specVersion).getErrorPalette(\n        variant,\n        sourceColorHct,\n        isDark,\n        platform,\n        contrastLevel,\n      ) ??\n      TonalPalette.fromHueAndChroma(25.0, 84.0);\n\n    this.colors = new MaterialDynamicColors();\n  }\n\n  static from({\n    sourceColorHct = Hct.fromInt(0xff6750a4),\n    isDark,\n    contrastLevel = 0.0,\n    variant = Variant.TONAL_SPOT,\n    specVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform = DynamicScheme.DEFAULT_PLATFORM,\n    primaryPalette,\n    secondaryPalette,\n    tertiaryPalette,\n    neutralPalette,\n    neutralVariantPalette,\n    errorPalette,\n    primaryPaletteKeyColor,\n    secondaryPaletteKeyColor,\n    tertiaryPaletteKeyColor,\n    neutralPaletteKeyColor,\n    neutralVariantPaletteKeyColor,\n    errorPaletteKeyColor,\n  }: DynamicSchemeFromOptions): DynamicScheme {\n    return new DynamicScheme({\n      sourceColorHct,\n      isDark,\n      contrastLevel,\n      variant,\n      specVersion,\n      platform,\n      primaryPalette:\n        primaryPalette ??\n        getSpec(specVersion).getPrimaryPalette(\n          variant,\n          primaryPaletteKeyColor ?? sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        ),\n      secondaryPalette:\n        secondaryPalette ??\n        getSpec(specVersion).getSecondaryPalette(\n          variant,\n          secondaryPaletteKeyColor ?? sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        ),\n      tertiaryPalette:\n        tertiaryPalette ??\n        getSpec(specVersion).getTertiaryPalette(\n          variant,\n          tertiaryPaletteKeyColor ?? sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        ),\n      neutralPalette:\n        neutralPalette ??\n        getSpec(specVersion).getNeutralPalette(\n          variant,\n          neutralPaletteKeyColor ?? sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        ),\n      neutralVariantPalette:\n        neutralVariantPalette ??\n        getSpec(specVersion).getNeutralVariantPalette(\n          variant,\n          neutralVariantPaletteKeyColor ?? sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        ),\n      errorPalette:\n        errorPalette ??\n        getSpec(specVersion).getErrorPalette(\n          variant,\n          errorPaletteKeyColor ?? sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        ) ??\n        TonalPalette.fromHueAndChroma(25.0, 84.0),\n    });\n  }\n\n  toString(): string {\n    return (\n      `Scheme: ` +\n      `variant=${Variant[this.variant]}, ` +\n      `mode=${this.isDark ? \"dark\" : \"light\"}, ` +\n      `platform=${this.platform}, ` +\n      `contrastLevel=${this.contrastLevel.toFixed(1)}, ` +\n      `seed=${this.sourceColorHct.toString()}, ` +\n      `specVersion=${this.specVersion}`\n    );\n  }\n\n  /**\n   * Returns a new hue based on a piecewise function and input color hue.\n   *\n   * For example, for the following function:\n   * result = 26 if 0 <= hue < 101\n   * result = 39 if 101 <= hue < 210\n   * result = 28 if 210 <= hue < 360\n   *\n   * call the function as:\n   *\n   * const hueBreakpoints = [0, 101, 210, 360];\n   * const hues = [26, 39, 28];\n   * const result = scheme.piecewise(hue, hueBreakpoints, hues);\n   *\n   * @param sourceColorHct The input value.\n   * @param hueBreakpoints The breakpoints, in sorted order. No default lower or\n   *     upper bounds are assumed.\n   * @param hues The hues that should be applied when source color's hue is >=\n   *     the same index in hueBrakpoints array, and < the hue at the next index\n   *     in hueBrakpoints array. Otherwise, the source color's hue is returned.\n   */\n  static getPiecewiseHue(\n    sourceColorHct: Hct,\n    hueBreakpoints: number[],\n    hues: number[],\n  ): number {\n    const size = Math.min(hueBreakpoints.length - 1, hues.length);\n    const sourceHue = sourceColorHct.hue;\n    for (let i = 0; i < size; i++) {\n      if (sourceHue >= hueBreakpoints[i] && sourceHue < hueBreakpoints[i + 1]) {\n        return math.sanitizeDegreesDouble(hues[i]);\n      }\n    }\n    // No condition matched, return the source hue.\n    return sourceHue;\n  }\n\n  /**\n   * Returns a shifted hue based on a piecewise function and input color hue.\n   *\n   * For example, for the following function:\n   * result = hue + 26 if 0 <= hue < 101\n   * result = hue - 39 if 101 <= hue < 210\n   * result = hue + 28 if 210 <= hue < 360\n   *\n   * call the function as:\n   *\n   * const hueBreakpoints = [0, 101, 210, 360];\n   * const hues = [26, -39, 28];\n   * const result = scheme.getRotatedHue(hue, hueBreakpoints, hues);\n   *\n   * @param sourceColorHct the source color of the theme, in HCT.\n   * @param hueBreakpoints The \"breakpoints\", i.e. the hues at which a rotation\n   *     should be apply. No default lower or upper bounds are assumed.\n   * @param rotations The rotation that should be applied when source color's\n   *     hue is >= the same index in hues array, and < the hue at the next\n   *     index in hues array. Otherwise, the source color's hue is returned.\n   */\n  static getRotatedHue(\n    sourceColorHct: Hct,\n    hueBreakpoints: number[],\n    rotations: number[],\n  ): number {\n    let rotation = DynamicScheme.getPiecewiseHue(\n      sourceColorHct,\n      hueBreakpoints,\n      rotations,\n    );\n    if (Math.min(hueBreakpoints.length - 1, rotations.length) <= 0) {\n      // No condition matched, return the source hue.\n      rotation = 0;\n    }\n    return math.sanitizeDegreesDouble(sourceColorHct.hue + rotation);\n  }\n\n  getArgb(dynamicColor: DynamicColor): number {\n    return dynamicColor.getArgb(this);\n  }\n\n  getHct(dynamicColor: DynamicColor): Hct {\n    return dynamicColor.getHct(this);\n  }\n\n  // Palette key colors\n\n  get primaryPaletteKeyColor(): number {\n    return this.getArgb(this.colors.primaryPaletteKeyColor());\n  }\n\n  get secondaryPaletteKeyColor(): number {\n    return this.getArgb(this.colors.secondaryPaletteKeyColor());\n  }\n\n  get tertiaryPaletteKeyColor(): number {\n    return this.getArgb(this.colors.tertiaryPaletteKeyColor());\n  }\n\n  get neutralPaletteKeyColor(): number {\n    return this.getArgb(this.colors.neutralPaletteKeyColor());\n  }\n\n  get neutralVariantPaletteKeyColor(): number {\n    return this.getArgb(this.colors.neutralVariantPaletteKeyColor());\n  }\n\n  get errorPaletteKeyColor(): number {\n    return this.getArgb(this.colors.errorPaletteKeyColor());\n  }\n\n  // Surface colors\n\n  get background(): number {\n    return this.getArgb(this.colors.background());\n  }\n\n  get onBackground(): number {\n    return this.getArgb(this.colors.onBackground());\n  }\n\n  get surface(): number {\n    return this.getArgb(this.colors.surface());\n  }\n\n  get surfaceDim(): number {\n    return this.getArgb(this.colors.surfaceDim());\n  }\n\n  get surfaceBright(): number {\n    return this.getArgb(this.colors.surfaceBright());\n  }\n\n  get surfaceContainerLowest(): number {\n    return this.getArgb(this.colors.surfaceContainerLowest());\n  }\n\n  get surfaceContainerLow(): number {\n    return this.getArgb(this.colors.surfaceContainerLow());\n  }\n\n  get surfaceContainer(): number {\n    return this.getArgb(this.colors.surfaceContainer());\n  }\n\n  get surfaceContainerHigh(): number {\n    return this.getArgb(this.colors.surfaceContainerHigh());\n  }\n\n  get surfaceContainerHighest(): number {\n    return this.getArgb(this.colors.surfaceContainerHighest());\n  }\n\n  get onSurface(): number {\n    return this.getArgb(this.colors.onSurface());\n  }\n\n  get surfaceVariant(): number {\n    return this.getArgb(this.colors.surfaceVariant());\n  }\n\n  get onSurfaceVariant(): number {\n    return this.getArgb(this.colors.onSurfaceVariant());\n  }\n\n  get inverseSurface(): number {\n    return this.getArgb(this.colors.inverseSurface());\n  }\n\n  get inverseOnSurface(): number {\n    return this.getArgb(this.colors.inverseOnSurface());\n  }\n\n  get outline(): number {\n    return this.getArgb(this.colors.outline());\n  }\n\n  get outlineVariant(): number {\n    return this.getArgb(this.colors.outlineVariant());\n  }\n\n  get shadow(): number {\n    return this.getArgb(this.colors.shadow());\n  }\n\n  get scrim(): number {\n    return this.getArgb(this.colors.scrim());\n  }\n\n  get surfaceTint(): number {\n    return this.getArgb(this.colors.surfaceTint());\n  }\n\n  // Primary colors\n\n  get primary(): number {\n    return this.getArgb(this.colors.primary());\n  }\n\n  get primaryDim(): number {\n    const primaryDim = this.colors.primaryDim();\n    if (primaryDim === undefined) {\n      throw new Error(\"`primaryDim` color is undefined prior to 2025 spec.\");\n    }\n    return this.getArgb(primaryDim);\n  }\n\n  get onPrimary(): number {\n    return this.getArgb(this.colors.onPrimary());\n  }\n\n  get primaryContainer(): number {\n    return this.getArgb(this.colors.primaryContainer());\n  }\n\n  get onPrimaryContainer(): number {\n    return this.getArgb(this.colors.onPrimaryContainer());\n  }\n\n  get primaryFixed(): number {\n    return this.getArgb(this.colors.primaryFixed());\n  }\n\n  get primaryFixedDim(): number {\n    return this.getArgb(this.colors.primaryFixedDim());\n  }\n\n  get onPrimaryFixed(): number {\n    return this.getArgb(this.colors.onPrimaryFixed());\n  }\n\n  get onPrimaryFixedVariant(): number {\n    return this.getArgb(this.colors.onPrimaryFixedVariant());\n  }\n\n  get inversePrimary(): number {\n    return this.getArgb(this.colors.inversePrimary());\n  }\n\n  // Secondary colors\n\n  get secondary(): number {\n    return this.getArgb(this.colors.secondary());\n  }\n\n  get secondaryDim(): number {\n    const secondaryDim = this.colors.secondaryDim();\n    if (secondaryDim === undefined) {\n      throw new Error(\"`secondaryDim` color is undefined prior to 2025 spec.\");\n    }\n    return this.getArgb(secondaryDim);\n  }\n\n  get onSecondary(): number {\n    return this.getArgb(this.colors.onSecondary());\n  }\n\n  get secondaryContainer(): number {\n    return this.getArgb(this.colors.secondaryContainer());\n  }\n\n  get onSecondaryContainer(): number {\n    return this.getArgb(this.colors.onSecondaryContainer());\n  }\n\n  get secondaryFixed(): number {\n    return this.getArgb(this.colors.secondaryFixed());\n  }\n\n  get secondaryFixedDim(): number {\n    return this.getArgb(this.colors.secondaryFixedDim());\n  }\n\n  get onSecondaryFixed(): number {\n    return this.getArgb(this.colors.onSecondaryFixed());\n  }\n\n  get onSecondaryFixedVariant(): number {\n    return this.getArgb(this.colors.onSecondaryFixedVariant());\n  }\n\n  // Tertiary colors\n\n  get tertiary(): number {\n    return this.getArgb(this.colors.tertiary());\n  }\n\n  get tertiaryDim(): number {\n    const tertiaryDim = this.colors.tertiaryDim();\n    if (tertiaryDim === undefined) {\n      throw new Error(\"`tertiaryDim` color is undefined prior to 2025 spec.\");\n    }\n    return this.getArgb(tertiaryDim);\n  }\n\n  get onTertiary(): number {\n    return this.getArgb(this.colors.onTertiary());\n  }\n\n  get tertiaryContainer(): number {\n    return this.getArgb(this.colors.tertiaryContainer());\n  }\n\n  get onTertiaryContainer(): number {\n    return this.getArgb(this.colors.onTertiaryContainer());\n  }\n\n  get tertiaryFixed(): number {\n    return this.getArgb(this.colors.tertiaryFixed());\n  }\n\n  get tertiaryFixedDim(): number {\n    return this.getArgb(this.colors.tertiaryFixedDim());\n  }\n\n  get onTertiaryFixed(): number {\n    return this.getArgb(this.colors.onTertiaryFixed());\n  }\n\n  get onTertiaryFixedVariant(): number {\n    return this.getArgb(this.colors.onTertiaryFixedVariant());\n  }\n\n  // Error colors\n\n  get error(): number {\n    return this.getArgb(this.colors.error());\n  }\n\n  get errorDim(): number {\n    const errorDim = this.colors.errorDim();\n    if (errorDim === undefined) {\n      throw new Error(\"`errorDim` color is undefined prior to 2025 spec.\");\n    }\n    return this.getArgb(errorDim);\n  }\n\n  get onError(): number {\n    return this.getArgb(this.colors.onError());\n  }\n\n  get errorContainer(): number {\n    return this.getArgb(this.colors.errorContainer());\n  }\n\n  get onErrorContainer(): number {\n    return this.getArgb(this.colors.onErrorContainer());\n  }\n\n  // Android-only colors\n\n  get controlActivated(): number {\n    return this.getArgb(this.colors.controlActivated());\n  }\n\n  get controlNormal(): number {\n    return this.getArgb(this.colors.controlNormal());\n  }\n\n  get controlHighlight(): number {\n    return this.getArgb(this.colors.controlHighlight());\n  }\n\n  get textPrimaryInverse(): number {\n    return this.getArgb(this.colors.textPrimaryInverse());\n  }\n\n  get textSecondaryAndTertiaryInverse(): number {\n    return this.getArgb(this.colors.textSecondaryAndTertiaryInverse());\n  }\n\n  get textPrimaryInverseDisableOnly(): number {\n    return this.getArgb(this.colors.textPrimaryInverseDisableOnly());\n  }\n\n  get textSecondaryAndTertiaryInverseDisabled(): number {\n    return this.getArgb(this.colors.textSecondaryAndTertiaryInverseDisabled());\n  }\n\n  get textHintInverse(): number {\n    return this.getArgb(this.colors.textHintInverse());\n  }\n}\n\n/**\n * A delegate for the palettes of a DynamicScheme in the 2021 spec.\n */\nclass DynamicSchemePalettesDelegateImpl2021\n  implements DynamicSchemePalettesDelegate\n{\n  //////////////////////////////////////////////////////////////////\n  // Scheme Palettes                                              //\n  //////////////////////////////////////////////////////////////////\n\n  getPrimaryPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.CONTENT:\n      case Variant.FIDELITY:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          sourceColorHct.chroma,\n        );\n      case Variant.FRUIT_SALAD:\n        return TonalPalette.fromHueAndChroma(\n          math.sanitizeDegreesDouble(sourceColorHct.hue - 50.0),\n          48.0,\n        );\n      case Variant.MONOCHROME:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0);\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0);\n      case Variant.RAINBOW:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 48.0);\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 36.0);\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          math.sanitizeDegreesDouble(sourceColorHct.hue + 240),\n          40,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 200.0);\n      default:\n        throw new Error(`Unsupported variant: ${variant}`);\n    }\n  }\n\n  getSecondaryPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.CONTENT:\n      case Variant.FIDELITY:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          Math.max(sourceColorHct.chroma - 32.0, sourceColorHct.chroma * 0.5),\n        );\n      case Variant.FRUIT_SALAD:\n        return TonalPalette.fromHueAndChroma(\n          math.sanitizeDegreesDouble(sourceColorHct.hue - 50.0),\n          36.0,\n        );\n      case Variant.MONOCHROME:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0);\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 8.0);\n      case Variant.RAINBOW:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0);\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0);\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 21, 51, 121, 151, 191, 271, 321, 360],\n            [45, 95, 45, 20, 45, 90, 45, 45, 45],\n          ),\n          24.0,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 41, 61, 101, 131, 181, 251, 301, 360],\n            [18, 15, 10, 12, 15, 18, 15, 12, 12],\n          ),\n          24.0,\n        );\n      default:\n        throw new Error(`Unsupported variant: ${variant}`);\n    }\n  }\n\n  getTertiaryPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.CONTENT:\n        return TonalPalette.fromHct(\n          DislikeAnalyzer.fixIfDisliked(\n            new TemperatureCache(sourceColorHct).analogous(\n              /* count= */ 3,\n              /* divisions= */ 6,\n            )[2],\n          ),\n        );\n      case Variant.FIDELITY:\n        return TonalPalette.fromHct(\n          DislikeAnalyzer.fixIfDisliked(\n            new TemperatureCache(sourceColorHct).complement,\n          ),\n        );\n      case Variant.FRUIT_SALAD:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 36.0);\n      case Variant.MONOCHROME:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0);\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0);\n      case Variant.RAINBOW:\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(\n          math.sanitizeDegreesDouble(sourceColorHct.hue + 60.0),\n          24.0,\n        );\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 21, 51, 121, 151, 191, 271, 321, 360],\n            [120, 120, 20, 45, 20, 15, 20, 120, 120],\n          ),\n          32.0,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 41, 61, 101, 131, 181, 251, 301, 360],\n            [35, 30, 20, 25, 30, 35, 30, 25, 25],\n          ),\n          32.0,\n        );\n      default:\n        throw new Error(`Unsupported variant: ${variant}`);\n    }\n  }\n\n  getNeutralPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.CONTENT:\n      case Variant.FIDELITY:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          sourceColorHct.chroma / 8.0,\n        );\n      case Variant.FRUIT_SALAD:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 10.0);\n      case Variant.MONOCHROME:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0);\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 2.0);\n      case Variant.RAINBOW:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0);\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 6.0);\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          math.sanitizeDegreesDouble(sourceColorHct.hue + 15),\n          8,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 10);\n      default:\n        throw new Error(`Unsupported variant: ${variant}`);\n    }\n  }\n\n  getNeutralVariantPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.CONTENT:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          sourceColorHct.chroma / 8.0 + 4.0,\n        );\n      case Variant.FIDELITY:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          sourceColorHct.chroma / 8.0 + 4.0,\n        );\n      case Variant.FRUIT_SALAD:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0);\n      case Variant.MONOCHROME:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0);\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 2.0);\n      case Variant.RAINBOW:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0);\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 8.0);\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          math.sanitizeDegreesDouble(sourceColorHct.hue + 15),\n          12,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12);\n      default:\n        throw new Error(`Unsupported variant: ${variant}`);\n    }\n  }\n\n  getErrorPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette | undefined {\n    return undefined;\n  }\n}\n\n/**\n * A delegate for the palettes of a DynamicScheme in the 2025 spec.\n */\nclass DynamicSchemePalettesDelegateImpl2025 extends DynamicSchemePalettesDelegateImpl2021 {\n  //////////////////////////////////////////////////////////////////\n  // Scheme Palettes                                              //\n  //////////////////////////////////////////////////////////////////\n\n  override getPrimaryPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          platform === Platform.PHONE\n            ? Hct.isBlue(sourceColorHct.hue)\n              ? 12\n              : 8\n            : Hct.isBlue(sourceColorHct.hue)\n              ? 16\n              : 12,\n        );\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          platform === Platform.PHONE && isDark ? 26 : 32,\n        );\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          platform === Platform.PHONE ? (isDark ? 36 : 48) : 40,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          platform === Platform.PHONE ? 74 : 56,\n        );\n      default:\n        return super.getPrimaryPalette(\n          variant,\n          sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        );\n    }\n  }\n\n  override getSecondaryPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          platform === Platform.PHONE\n            ? Hct.isBlue(sourceColorHct.hue)\n              ? 6\n              : 4\n            : Hct.isBlue(sourceColorHct.hue)\n              ? 10\n              : 6,\n        );\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16);\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 105, 140, 204, 253, 278, 300, 333, 360],\n            [-160, 155, -100, 96, -96, -156, -165, -160],\n          ),\n          platform === Platform.PHONE ? (isDark ? 16 : 24) : 24,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 38, 105, 140, 333, 360],\n            [-14, 10, -14, 10, -14],\n          ),\n          platform === Platform.PHONE ? 56 : 36,\n        );\n      default:\n        return super.getSecondaryPalette(\n          variant,\n          sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        );\n    }\n  }\n\n  override getTertiaryPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 38, 105, 161, 204, 278, 333, 360],\n            [-32, 26, 10, -39, 24, -15, -32],\n          ),\n          platform === Platform.PHONE ? 20 : 36,\n        );\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 20, 71, 161, 333, 360],\n            [-40, 48, -32, 40, -32],\n          ),\n          platform === Platform.PHONE ? 28 : 32,\n        );\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 105, 140, 204, 253, 278, 300, 333, 360],\n            [-165, 160, -105, 101, -101, -160, -170, -165],\n          ),\n          48,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n            sourceColorHct,\n            [0, 38, 71, 105, 140, 161, 253, 333, 360],\n            [-72, 35, 24, -24, 62, 50, 62, -72],\n          ),\n          56,\n        );\n      default:\n        return super.getTertiaryPalette(\n          variant,\n          sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        );\n    }\n  }\n\n  private static getExpressiveNeutralHue(sourceColorHct: Hct): number {\n    const hue = DynamicScheme.getRotatedHue(\n      sourceColorHct,\n      [0, 71, 124, 253, 278, 300, 360],\n      [10, 0, 10, 0, 10, 0],\n    );\n    return hue;\n  }\n\n  private static getExpressiveNeutralChroma(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n  ): number {\n    const neutralHue =\n      DynamicSchemePalettesDelegateImpl2025.getExpressiveNeutralHue(\n        sourceColorHct,\n      );\n    return platform === Platform.PHONE\n      ? isDark\n        ? Hct.isYellow(neutralHue)\n          ? 6\n          : 14\n        : 18\n      : 12;\n  }\n\n  private static getVibrantNeutralHue(sourceColorHct: Hct): number {\n    return DynamicScheme.getRotatedHue(\n      sourceColorHct,\n      [0, 38, 105, 140, 333, 360],\n      [-14, 10, -14, 10, -14],\n    );\n  }\n\n  private static getVibrantNeutralChroma(\n    sourceColorHct: Hct,\n    platform: Platform,\n  ): number {\n    const neutralHue =\n      DynamicSchemePalettesDelegateImpl2025.getVibrantNeutralHue(\n        sourceColorHct,\n      );\n    return platform === Platform.PHONE ? 28 : Hct.isBlue(neutralHue) ? 28 : 20;\n  }\n\n  override getNeutralPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          platform === Platform.PHONE ? 1.4 : 6,\n        );\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          platform === Platform.PHONE ? 5 : 10,\n        );\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          DynamicSchemePalettesDelegateImpl2025.getExpressiveNeutralHue(\n            sourceColorHct,\n          ),\n          DynamicSchemePalettesDelegateImpl2025.getExpressiveNeutralChroma(\n            sourceColorHct,\n            isDark,\n            platform,\n          ),\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(\n          DynamicSchemePalettesDelegateImpl2025.getVibrantNeutralHue(\n            sourceColorHct,\n          ),\n          DynamicSchemePalettesDelegateImpl2025.getVibrantNeutralChroma(\n            sourceColorHct,\n            platform,\n          ),\n        );\n      default:\n        return super.getNeutralPalette(\n          variant,\n          sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        );\n    }\n  }\n\n  override getNeutralVariantPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette {\n    switch (variant) {\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          (platform === Platform.PHONE ? 1.4 : 6) * 2.2,\n        );\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(\n          sourceColorHct.hue,\n          (platform === Platform.PHONE ? 5 : 10) * 1.7,\n        );\n      case Variant.EXPRESSIVE:\n        const expressiveNeutralHue =\n          DynamicSchemePalettesDelegateImpl2025.getExpressiveNeutralHue(\n            sourceColorHct,\n          );\n        const expressiveNeutralChroma =\n          DynamicSchemePalettesDelegateImpl2025.getExpressiveNeutralChroma(\n            sourceColorHct,\n            isDark,\n            platform,\n          );\n        return TonalPalette.fromHueAndChroma(\n          expressiveNeutralHue,\n          expressiveNeutralChroma *\n            (expressiveNeutralHue >= 105 && expressiveNeutralHue < 125\n              ? 1.6\n              : 2.3),\n        );\n      case Variant.VIBRANT:\n        const vibrantNeutralHue =\n          DynamicSchemePalettesDelegateImpl2025.getVibrantNeutralHue(\n            sourceColorHct,\n          );\n        const vibrantNeutralChroma =\n          DynamicSchemePalettesDelegateImpl2025.getVibrantNeutralChroma(\n            sourceColorHct,\n            platform,\n          );\n        return TonalPalette.fromHueAndChroma(\n          vibrantNeutralHue,\n          vibrantNeutralChroma * 1.29,\n        );\n      default:\n        return super.getNeutralVariantPalette(\n          variant,\n          sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        );\n    }\n  }\n\n  override getErrorPalette(\n    variant: Variant,\n    sourceColorHct: Hct,\n    isDark: boolean,\n    platform: Platform,\n    contrastLevel: number,\n  ): TonalPalette | undefined {\n    const errorHue = DynamicScheme.getPiecewiseHue(\n      sourceColorHct,\n      [0, 3, 13, 23, 33, 43, 153, 273, 360],\n      [12, 22, 32, 12, 22, 32, 22, 12],\n    );\n    switch (variant) {\n      case Variant.NEUTRAL:\n        return TonalPalette.fromHueAndChroma(\n          errorHue,\n          platform === Platform.PHONE ? 50 : 40,\n        );\n      case Variant.TONAL_SPOT:\n        return TonalPalette.fromHueAndChroma(\n          errorHue,\n          platform === Platform.PHONE ? 60 : 48,\n        );\n      case Variant.EXPRESSIVE:\n        return TonalPalette.fromHueAndChroma(\n          errorHue,\n          platform === Platform.PHONE ? 64 : 48,\n        );\n      case Variant.VIBRANT:\n        return TonalPalette.fromHueAndChroma(\n          errorHue,\n          platform === Platform.PHONE ? 80 : 60,\n        );\n      default:\n        return super.getErrorPalette(\n          variant,\n          sourceColorHct,\n          isDark,\n          platform,\n          contrastLevel,\n        );\n    }\n  }\n}\n\nconst spec2021 = new DynamicSchemePalettesDelegateImpl2021();\nconst spec2025 = new DynamicSchemePalettesDelegateImpl2025();\n\n/**\n * Returns the DynamicSchemePalettesDelegate for the given spec version.\n */\nfunction getSpec(specVersion: SpecVersion): DynamicSchemePalettesDelegate {\n  return specVersion === \"2025\" ? spec2025 : spec2021;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Hct } from \"../hct/hct\";\n\nimport { TonalPalette } from \"./tonal_palette\";\n\n/**\n * @deprecated Use {@link DynamicScheme} for color scheme generation.\n * Use {@link CorePalettes} for core palettes container class.\n */\nexport interface CorePaletteColors {\n  primary: number;\n  secondary?: number;\n  tertiary?: number;\n  neutral?: number;\n  neutralVariant?: number;\n  error?: number;\n}\n\n/**\n * An intermediate concept between the key color for a UI theme, and a full\n * color scheme. 5 sets of tones are generated, all except one use the same hue\n * as the key color, and all vary in chroma.\n *\n * @deprecated Use {@link DynamicScheme} for color scheme generation.\n * Use {@link CorePalettes} for core palettes container class.\n */\nexport class CorePalette {\n  a1: TonalPalette;\n  a2: TonalPalette;\n  a3: TonalPalette;\n  n1: TonalPalette;\n  n2: TonalPalette;\n  error: TonalPalette;\n\n  /**\n   * @param argb ARGB representation of a color\n   *\n   * @deprecated Use {@link DynamicScheme} for color scheme generation.\n   * Use {@link CorePalettes} for core palettes container class.\n   */\n  static of(argb: number): CorePalette {\n    return new CorePalette(argb, false);\n  }\n\n  /**\n   * @param argb ARGB representation of a color\n   *\n   * @deprecated Use {@link DynamicScheme} for color scheme generation.\n   * Use {@link CorePalettes} for core palettes container class.\n   */\n  static contentOf(argb: number): CorePalette {\n    return new CorePalette(argb, true);\n  }\n\n  /**\n   * Create a [CorePalette] from a set of colors\n   *\n   * @deprecated Use {@link DynamicScheme} for color scheme generation.\n   * Use {@link CorePalettes} for core palettes container class.\n   */\n  static fromColors(colors: CorePaletteColors): CorePalette {\n    return CorePalette.createPaletteFromColors(false, colors);\n  }\n\n  /**\n   * Create a content [CorePalette] from a set of colors\n   *\n   * @deprecated Use {@link DynamicScheme} for color scheme generation.\n   * Use {@link CorePalettes} for core palettes container class.\n   */\n  static contentFromColors(colors: CorePaletteColors): CorePalette {\n    return CorePalette.createPaletteFromColors(true, colors);\n  }\n\n  private static createPaletteFromColors(\n    content: boolean,\n    colors: CorePaletteColors,\n  ) {\n    const palette = new CorePalette(colors.primary, content);\n    if (colors.secondary) {\n      const p = new CorePalette(colors.secondary, content);\n      palette.a2 = p.a1;\n    }\n    if (colors.tertiary) {\n      const p = new CorePalette(colors.tertiary, content);\n      palette.a3 = p.a1;\n    }\n    if (colors.error) {\n      const p = new CorePalette(colors.error, content);\n      palette.error = p.a1;\n    }\n    if (colors.neutral) {\n      const p = new CorePalette(colors.neutral, content);\n      palette.n1 = p.n1;\n    }\n    if (colors.neutralVariant) {\n      const p = new CorePalette(colors.neutralVariant, content);\n      palette.n2 = p.n2;\n    }\n    return palette;\n  }\n\n  private constructor(argb: number, isContent: boolean) {\n    const hct = Hct.fromInt(argb);\n    const hue = hct.hue;\n    const chroma = hct.chroma;\n    if (isContent) {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));\n      this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));\n      this.a2 = TonalPalette.fromHueAndChroma(hue, 16);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, 4);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, 8);\n    }\n    this.error = TonalPalette.fromHueAndChroma(25, 84);\n  }\n}\n","/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TonalPalette } from \"./tonal_palette\";\n\n/**\n * Comprises foundational palettes to build a color scheme. Generated from a\n * source color, these palettes will then be part of a [DynamicScheme] together\n * with appearance preferences.\n */\nexport class CorePalettes {\n  constructor(\n    public primary: TonalPalette,\n    public secondary: TonalPalette,\n    public tertiary: TonalPalette,\n    public neutral: TonalPalette,\n    public neutralVariant: TonalPalette,\n  ) {}\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from \"../utils/color_utils\";\n\nimport { type PointProvider } from \"./point_provider\";\n\n/**\n * Provides conversions needed for K-Means quantization. Converting input to\n * points, and converting the final state of the K-Means algorithm to colors.\n */\nexport class LabPointProvider implements PointProvider {\n  /**\n   * Convert a color represented in ARGB to a 3-element array of L*a*b*\n   * coordinates of the color.\n   */\n  fromInt(argb: number): number[] {\n    return utils.labFromArgb(argb);\n  }\n\n  /**\n   * Convert a 3-element array to a color represented in ARGB.\n   */\n  toInt(point: number[]): number {\n    return utils.argbFromLab(point[0], point[1], point[2]);\n  }\n\n  /**\n   * Standard CIE 1976 delta E formula also takes the square root, unneeded\n   * here. This method is used by quantization algorithms to compare distance,\n   * and the relative ordering is the same, with or without a square root.\n   *\n   * This relatively minor optimization is helpful because this method is\n   * called at least once for each pixel in an image.\n   */\n  distance(from: number[], to: number[]): number {\n    const dL = from[0] - to[0];\n    const dA = from[1] - to[1];\n    const dB = from[2] - to[2];\n    return dL * dL + dA * dA + dB * dB;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LabPointProvider } from \"./lab_point_provider\";\n\nconst MAX_ITERATIONS = 10;\nconst MIN_MOVEMENT_DISTANCE = 3.0;\n\n/**\n * An image quantizer that improves on the speed of a standard K-Means algorithm\n * by implementing several optimizations, including deduping identical pixels\n * and a triangle inequality rule that reduces the number of comparisons needed\n * to identify which cluster a point should be moved to.\n *\n * Wsmeans stands for Weighted Square Means.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerWsmeans {\n  /**\n   * @param inputPixels Colors in ARGB format.\n   * @param startingClusters Defines the initial state of the quantizer. Passing\n   *     an empty array is fine, the implementation will create its own initial\n   *     state that leads to reproducible results for the same inputs.\n   *     Passing an array that is the result of Wu quantization leads to higher\n   *     quality results.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Colors in ARGB format.\n   */\n  static quantize(\n    inputPixels: number[],\n    startingClusters: number[],\n    maxColors: number,\n  ): Map<number, number> {\n    const pixelToCount = new Map<number, number>();\n    const points = new Array<number[]>();\n    const pixels = new Array<number>();\n    const pointProvider = new LabPointProvider();\n    let pointCount = 0;\n    for (let i = 0; i < inputPixels.length; i++) {\n      const inputPixel = inputPixels[i];\n      const pixelCount = pixelToCount.get(inputPixel);\n      if (pixelCount === undefined) {\n        pointCount++;\n        points.push(pointProvider.fromInt(inputPixel));\n        pixels.push(inputPixel);\n        pixelToCount.set(inputPixel, 1);\n      } else {\n        pixelToCount.set(inputPixel, pixelCount + 1);\n      }\n    }\n\n    const counts = new Array<number>();\n    for (let i = 0; i < pointCount; i++) {\n      const pixel = pixels[i];\n      const count = pixelToCount.get(pixel);\n      if (count !== undefined) {\n        counts[i] = count;\n      }\n    }\n\n    let clusterCount = Math.min(maxColors, pointCount);\n    if (startingClusters.length > 0) {\n      clusterCount = Math.min(clusterCount, startingClusters.length);\n    }\n\n    const clusters = new Array<number[]>();\n    for (let i = 0; i < startingClusters.length; i++) {\n      clusters.push(pointProvider.fromInt(startingClusters[i]));\n    }\n    const additionalClustersNeeded = clusterCount - clusters.length;\n    if (startingClusters.length === 0 && additionalClustersNeeded > 0) {\n      for (let i = 0; i < additionalClustersNeeded; i++) {\n        const l = Math.random() * 100.0;\n        const a = Math.random() * (100.0 - -100.0 + 1) + -100;\n        const b = Math.random() * (100.0 - -100.0 + 1) + -100;\n\n        clusters.push(new Array(l, a, b));\n      }\n    }\n\n    const clusterIndices = new Array<number>();\n    for (let i = 0; i < pointCount; i++) {\n      clusterIndices.push(Math.floor(Math.random() * clusterCount));\n    }\n\n    const indexMatrix = new Array<number[]>();\n    for (let i = 0; i < clusterCount; i++) {\n      indexMatrix.push(new Array<number>());\n      for (let j = 0; j < clusterCount; j++) {\n        indexMatrix[i].push(0);\n      }\n    }\n\n    const distanceToIndexMatrix = new Array<DistanceAndIndex[]>();\n    for (let i = 0; i < clusterCount; i++) {\n      distanceToIndexMatrix.push(new Array<DistanceAndIndex>());\n      for (let j = 0; j < clusterCount; j++) {\n        distanceToIndexMatrix[i].push(new DistanceAndIndex());\n      }\n    }\n\n    const pixelCountSums = new Array<number>();\n    for (let i = 0; i < clusterCount; i++) {\n      pixelCountSums.push(0);\n    }\n    for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n      for (let i = 0; i < clusterCount; i++) {\n        for (let j = i + 1; j < clusterCount; j++) {\n          const distance = pointProvider.distance(clusters[i], clusters[j]);\n          distanceToIndexMatrix[j][i].distance = distance;\n          distanceToIndexMatrix[j][i].index = i;\n          distanceToIndexMatrix[i][j].distance = distance;\n          distanceToIndexMatrix[i][j].index = j;\n        }\n        distanceToIndexMatrix[i].sort();\n        for (let j = 0; j < clusterCount; j++) {\n          indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;\n        }\n      }\n\n      let pointsMoved = 0;\n      for (let i = 0; i < pointCount; i++) {\n        const point = points[i];\n        const previousClusterIndex = clusterIndices[i];\n        const previousCluster = clusters[previousClusterIndex];\n        const previousDistance = pointProvider.distance(point, previousCluster);\n        let minimumDistance = previousDistance;\n        let newClusterIndex = -1;\n        for (let j = 0; j < clusterCount; j++) {\n          if (\n            distanceToIndexMatrix[previousClusterIndex][j].distance >=\n            4 * previousDistance\n          ) {\n            continue;\n          }\n          const distance = pointProvider.distance(point, clusters[j]);\n          if (distance < minimumDistance) {\n            minimumDistance = distance;\n            newClusterIndex = j;\n          }\n        }\n        if (newClusterIndex !== -1) {\n          const distanceChange = Math.abs(\n            Math.sqrt(minimumDistance) - Math.sqrt(previousDistance),\n          );\n          if (distanceChange > MIN_MOVEMENT_DISTANCE) {\n            pointsMoved++;\n            clusterIndices[i] = newClusterIndex;\n          }\n        }\n      }\n\n      if (pointsMoved === 0 && iteration !== 0) {\n        break;\n      }\n\n      const componentASums = new Array<number>(clusterCount).fill(0);\n      const componentBSums = new Array<number>(clusterCount).fill(0);\n      const componentCSums = new Array<number>(clusterCount).fill(0);\n\n      for (let i = 0; i < clusterCount; i++) {\n        pixelCountSums[i] = 0;\n      }\n      for (let i = 0; i < pointCount; i++) {\n        const clusterIndex = clusterIndices[i];\n        const point = points[i];\n        const count = counts[i];\n        pixelCountSums[clusterIndex] += count;\n        componentASums[clusterIndex] += point[0] * count;\n        componentBSums[clusterIndex] += point[1] * count;\n        componentCSums[clusterIndex] += point[2] * count;\n      }\n\n      for (let i = 0; i < clusterCount; i++) {\n        const count = pixelCountSums[i];\n        if (count === 0) {\n          clusters[i] = [0.0, 0.0, 0.0];\n          continue;\n        }\n        const a = componentASums[i] / count;\n        const b = componentBSums[i] / count;\n        const c = componentCSums[i] / count;\n        clusters[i] = [a, b, c];\n      }\n    }\n\n    const argbToPopulation = new Map<number, number>();\n    for (let i = 0; i < clusterCount; i++) {\n      const count = pixelCountSums[i];\n      if (count === 0) {\n        continue;\n      }\n\n      const possibleNewCluster = pointProvider.toInt(clusters[i]);\n      if (argbToPopulation.has(possibleNewCluster)) {\n        continue;\n      }\n\n      argbToPopulation.set(possibleNewCluster, count);\n    }\n    return argbToPopulation;\n  }\n}\n\n/**\n *  A wrapper for maintaining a table of distances between K-Means clusters.\n */\nclass DistanceAndIndex {\n  distance: number = -1;\n  index: number = -1;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from \"../utils/color_utils\";\n\n/**\n * Quantizes an image into a map, with keys of ARGB colors, and values of the\n * number of times that color appears in the image.\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerMap {\n  /**\n   * @param pixels Colors in ARGB format.\n   * @return A Map with keys of ARGB colors, and values of the number of times\n   *     the color appears in the image.\n   */\n  static quantize(pixels: number[]): Map<number, number> {\n    const countByColor = new Map<number, number>();\n    for (let i = 0; i < pixels.length; i++) {\n      const pixel = pixels[i];\n      const alpha = utils.alphaFromArgb(pixel);\n      if (alpha < 255) {\n        continue;\n      }\n      countByColor.set(pixel, (countByColor.get(pixel) ?? 0) + 1);\n    }\n    return countByColor;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from \"../utils/color_utils\";\n\nimport { QuantizerMap } from \"./quantizer_map\";\n\nconst INDEX_BITS = 5;\nconst SIDE_LENGTH = 33; // ((1 << INDEX_INDEX_BITS) + 1)\nconst TOTAL_SIZE = 35937; // SIDE_LENGTH * SIDE_LENGTH * SIDE_LENGTH\n\nconst directions = {\n  RED: \"red\",\n  GREEN: \"green\",\n  BLUE: \"blue\",\n};\n\n/**\n * An image quantizer that divides the image's pixels into clusters by\n * recursively cutting an RGB cube, based on the weight of pixels in each area\n * of the cube.\n *\n * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in\n * 1991.\n */\nexport class QuantizerWu {\n  constructor(\n    private weights: number[] = [],\n    private momentsR: number[] = [],\n    private momentsG: number[] = [],\n    private momentsB: number[] = [],\n    private moments: number[] = [],\n    private cubes: Box[] = [],\n  ) {}\n\n  /**\n   * @param pixels Colors in ARGB format.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Colors in ARGB format.\n   */\n  quantize(pixels: number[], maxColors: number): number[] {\n    this.constructHistogram(pixels);\n    this.computeMoments();\n    const createBoxesResult = this.createBoxes(maxColors);\n    const results = this.createResult(createBoxesResult.resultCount);\n    return results;\n  }\n\n  private constructHistogram(pixels: number[]) {\n    this.weights = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n    this.momentsR = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n    this.momentsG = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n    this.momentsB = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n    this.moments = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n\n    const countByColor = QuantizerMap.quantize(pixels);\n\n    for (const [pixel, count] of countByColor.entries()) {\n      const red = utils.redFromArgb(pixel);\n      const green = utils.greenFromArgb(pixel);\n      const blue = utils.blueFromArgb(pixel);\n\n      const bitsToRemove = 8 - INDEX_BITS;\n      const iR = (red >> bitsToRemove) + 1;\n      const iG = (green >> bitsToRemove) + 1;\n      const iB = (blue >> bitsToRemove) + 1;\n      const index = this.getIndex(iR, iG, iB);\n\n      this.weights[index] = (this.weights[index] ?? 0) + count;\n      this.momentsR[index] += count * red;\n      this.momentsG[index] += count * green;\n      this.momentsB[index] += count * blue;\n      this.moments[index] += count * (red * red + green * green + blue * blue);\n    }\n  }\n\n  private computeMoments() {\n    for (let r = 1; r < SIDE_LENGTH; r++) {\n      const area = Array.from<number>({ length: SIDE_LENGTH }).fill(0);\n      const areaR = Array.from<number>({ length: SIDE_LENGTH }).fill(0);\n      const areaG = Array.from<number>({ length: SIDE_LENGTH }).fill(0);\n      const areaB = Array.from<number>({ length: SIDE_LENGTH }).fill(0);\n      const area2 = Array.from<number>({ length: SIDE_LENGTH }).fill(0.0);\n      for (let g = 1; g < SIDE_LENGTH; g++) {\n        let line = 0;\n        let lineR = 0;\n        let lineG = 0;\n        let lineB = 0;\n        let line2 = 0.0;\n        for (let b = 1; b < SIDE_LENGTH; b++) {\n          const index = this.getIndex(r, g, b);\n          line += this.weights[index];\n          lineR += this.momentsR[index];\n          lineG += this.momentsG[index];\n          lineB += this.momentsB[index];\n          line2 += this.moments[index];\n\n          area[b] += line;\n          areaR[b] += lineR;\n          areaG[b] += lineG;\n          areaB[b] += lineB;\n          area2[b] += line2;\n\n          const previousIndex = this.getIndex(r - 1, g, b);\n          this.weights[index] = this.weights[previousIndex] + area[b];\n          this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];\n          this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];\n          this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];\n          this.moments[index] = this.moments[previousIndex] + area2[b];\n        }\n      }\n    }\n  }\n\n  private createBoxes(maxColors: number): CreateBoxesResult {\n    this.cubes = Array.from<number>({ length: maxColors })\n      .fill(0)\n      .map(() => new Box());\n    const volumeVariance = Array.from<number>({ length: maxColors }).fill(0.0);\n    this.cubes[0].r0 = 0;\n    this.cubes[0].g0 = 0;\n    this.cubes[0].b0 = 0;\n\n    this.cubes[0].r1 = SIDE_LENGTH - 1;\n    this.cubes[0].g1 = SIDE_LENGTH - 1;\n    this.cubes[0].b1 = SIDE_LENGTH - 1;\n\n    let generatedColorCount = maxColors;\n    let next = 0;\n    for (let i = 1; i < maxColors; i++) {\n      if (this.cut(this.cubes[next], this.cubes[i])) {\n        volumeVariance[next] =\n          this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0.0;\n        volumeVariance[i] =\n          this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0.0;\n      } else {\n        volumeVariance[next] = 0.0;\n        i--;\n      }\n\n      next = 0;\n      let temp = volumeVariance[0];\n      for (let j = 1; j <= i; j++) {\n        if (volumeVariance[j] > temp) {\n          temp = volumeVariance[j];\n          next = j;\n        }\n      }\n      if (temp <= 0.0) {\n        generatedColorCount = i + 1;\n        break;\n      }\n    }\n    return new CreateBoxesResult(maxColors, generatedColorCount);\n  }\n\n  private createResult(colorCount: number): number[] {\n    const colors: number[] = [];\n    for (let i = 0; i < colorCount; ++i) {\n      const cube = this.cubes[i];\n      const weight = this.volume(cube, this.weights);\n      if (weight > 0) {\n        const r = Math.round(this.volume(cube, this.momentsR) / weight);\n        const g = Math.round(this.volume(cube, this.momentsG) / weight);\n        const b = Math.round(this.volume(cube, this.momentsB) / weight);\n        const color =\n          (255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff);\n        colors.push(color);\n      }\n    }\n    return colors;\n  }\n\n  private variance(cube: Box) {\n    const dr = this.volume(cube, this.momentsR);\n    const dg = this.volume(cube, this.momentsG);\n    const db = this.volume(cube, this.momentsB);\n    const xx =\n      this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n      this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n      this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n      this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n      this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n      this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n      this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n      this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];\n    const hypotenuse = dr * dr + dg * dg + db * db;\n    const volume = this.volume(cube, this.weights);\n    return xx - hypotenuse / volume;\n  }\n\n  private cut(one: Box, two: Box) {\n    const wholeR = this.volume(one, this.momentsR);\n    const wholeG = this.volume(one, this.momentsG);\n    const wholeB = this.volume(one, this.momentsB);\n    const wholeW = this.volume(one, this.weights);\n\n    const maxRResult = this.maximize(\n      one,\n      directions.RED,\n      one.r0 + 1,\n      one.r1,\n      wholeR,\n      wholeG,\n      wholeB,\n      wholeW,\n    );\n    const maxGResult = this.maximize(\n      one,\n      directions.GREEN,\n      one.g0 + 1,\n      one.g1,\n      wholeR,\n      wholeG,\n      wholeB,\n      wholeW,\n    );\n    const maxBResult = this.maximize(\n      one,\n      directions.BLUE,\n      one.b0 + 1,\n      one.b1,\n      wholeR,\n      wholeG,\n      wholeB,\n      wholeW,\n    );\n\n    let direction;\n    const maxR = maxRResult.maximum;\n    const maxG = maxGResult.maximum;\n    const maxB = maxBResult.maximum;\n    if (maxR >= maxG && maxR >= maxB) {\n      if (maxRResult.cutLocation < 0) {\n        return false;\n      }\n      direction = directions.RED;\n    } else if (maxG >= maxR && maxG >= maxB) {\n      direction = directions.GREEN;\n    } else {\n      direction = directions.BLUE;\n    }\n\n    two.r1 = one.r1;\n    two.g1 = one.g1;\n    two.b1 = one.b1;\n\n    switch (direction) {\n      case directions.RED:\n        one.r1 = maxRResult.cutLocation;\n        two.r0 = one.r1;\n        two.g0 = one.g0;\n        two.b0 = one.b0;\n        break;\n      case directions.GREEN:\n        one.g1 = maxGResult.cutLocation;\n        two.r0 = one.r0;\n        two.g0 = one.g1;\n        two.b0 = one.b0;\n        break;\n      case directions.BLUE:\n        one.b1 = maxBResult.cutLocation;\n        two.r0 = one.r0;\n        two.g0 = one.g0;\n        two.b0 = one.b1;\n        break;\n      default:\n        throw new Error(\"unexpected direction \" + direction);\n    }\n\n    one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);\n    two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);\n    return true;\n  }\n\n  private maximize(\n    cube: Box,\n    direction: string,\n    first: number,\n    last: number,\n    wholeR: number,\n    wholeG: number,\n    wholeB: number,\n    wholeW: number,\n  ) {\n    const bottomR = this.bottom(cube, direction, this.momentsR);\n    const bottomG = this.bottom(cube, direction, this.momentsG);\n    const bottomB = this.bottom(cube, direction, this.momentsB);\n    const bottomW = this.bottom(cube, direction, this.weights);\n\n    let max = 0.0;\n    let cut = -1;\n\n    let halfR = 0;\n    let halfG = 0;\n    let halfB = 0;\n    let halfW = 0;\n    for (let i = first; i < last; i++) {\n      halfR = bottomR + this.top(cube, direction, i, this.momentsR);\n      halfG = bottomG + this.top(cube, direction, i, this.momentsG);\n      halfB = bottomB + this.top(cube, direction, i, this.momentsB);\n      halfW = bottomW + this.top(cube, direction, i, this.weights);\n      if (halfW === 0) {\n        continue;\n      }\n\n      let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n      let tempDenominator = halfW * 1.0;\n      let temp = tempNumerator / tempDenominator;\n\n      halfR = wholeR - halfR;\n      halfG = wholeG - halfG;\n      halfB = wholeB - halfB;\n      halfW = wholeW - halfW;\n      if (halfW === 0) {\n        continue;\n      }\n\n      tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n      tempDenominator = halfW * 1.0;\n      temp += tempNumerator / tempDenominator;\n\n      if (temp > max) {\n        max = temp;\n        cut = i;\n      }\n    }\n    return new MaximizeResult(cut, max);\n  }\n\n  private volume(cube: Box, moment: number[]) {\n    return (\n      moment[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n      moment[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n      moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n      moment[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n      moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n      moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n      moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n      moment[this.getIndex(cube.r0, cube.g0, cube.b0)]\n    );\n  }\n\n  private bottom(cube: Box, direction: string, moment: number[]) {\n    switch (direction) {\n      case directions.RED:\n        return (\n          -moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n          moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n          moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n          moment[this.getIndex(cube.r0, cube.g0, cube.b0)]\n        );\n      case directions.GREEN:\n        return (\n          -moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n          moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n          moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n          moment[this.getIndex(cube.r0, cube.g0, cube.b0)]\n        );\n      case directions.BLUE:\n        return (\n          -moment[this.getIndex(cube.r1, cube.g1, cube.b0)] +\n          moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n          moment[this.getIndex(cube.r0, cube.g1, cube.b0)] -\n          moment[this.getIndex(cube.r0, cube.g0, cube.b0)]\n        );\n      default:\n        throw new Error(\"unexpected direction $direction\");\n    }\n  }\n\n  private top(\n    cube: Box,\n    direction: string,\n    position: number,\n    moment: number[],\n  ) {\n    switch (direction) {\n      case directions.RED:\n        return (\n          moment[this.getIndex(position, cube.g1, cube.b1)] -\n          moment[this.getIndex(position, cube.g1, cube.b0)] -\n          moment[this.getIndex(position, cube.g0, cube.b1)] +\n          moment[this.getIndex(position, cube.g0, cube.b0)]\n        );\n      case directions.GREEN:\n        return (\n          moment[this.getIndex(cube.r1, position, cube.b1)] -\n          moment[this.getIndex(cube.r1, position, cube.b0)] -\n          moment[this.getIndex(cube.r0, position, cube.b1)] +\n          moment[this.getIndex(cube.r0, position, cube.b0)]\n        );\n      case directions.BLUE:\n        return (\n          moment[this.getIndex(cube.r1, cube.g1, position)] -\n          moment[this.getIndex(cube.r1, cube.g0, position)] -\n          moment[this.getIndex(cube.r0, cube.g1, position)] +\n          moment[this.getIndex(cube.r0, cube.g0, position)]\n        );\n      default:\n        throw new Error(\"unexpected direction $direction\");\n    }\n  }\n\n  private getIndex(r: number, g: number, b: number): number {\n    return (\n      (r << (INDEX_BITS * 2)) +\n      (r << (INDEX_BITS + 1)) +\n      r +\n      (g << INDEX_BITS) +\n      g +\n      b\n    );\n  }\n}\n\n/**\n * Keeps track of the state of each box created as the Wu  quantization\n * algorithm progresses through dividing the image's pixels as plotted in RGB.\n */\nclass Box {\n  constructor(\n    public r0: number = 0,\n    public r1: number = 0,\n    public g0: number = 0,\n    public g1: number = 0,\n    public b0: number = 0,\n    public b1: number = 0,\n    public vol: number = 0,\n  ) {}\n}\n\n/**\n * Represents final result of Wu algorithm.\n */\nclass CreateBoxesResult {\n  /**\n   * @param requestedCount how many colors the caller asked to be returned from\n   *     quantization.\n   * @param resultCount the actual number of colors achieved from quantization.\n   *     May be lower than the requested count.\n   */\n  constructor(\n    public requestedCount: number,\n    public resultCount: number,\n  ) {}\n}\n\n/**\n * Represents the result of calculating where to cut an existing box in such\n * a way to maximize variance between the two new boxes created by a cut.\n */\nclass MaximizeResult {\n  constructor(\n    public cutLocation: number,\n    public maximum: number,\n  ) {}\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QuantizerWsmeans } from \"./quantizer_wsmeans\";\nimport { QuantizerWu } from \"./quantizer_wu\";\n\n/**\n * An image quantizer that improves on the quality of a standard K-Means\n * algorithm by setting the K-Means initial state to the output of a Wu\n * quantizer, instead of random centroids. Improves on speed by several\n * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means\n * with those optimizations.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerCelebi {\n  /**\n   * @param pixels Colors in ARGB format.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Map with keys of colors in ARGB format, and values of number of\n   *     pixels in the original image that correspond to the color in the\n   *     quantized image.\n   */\n  static quantize(pixels: number[], maxColors: number): Map<number, number> {\n    const wu = new QuantizerWu();\n    const wuResult = wu.quantize(pixels, maxColors);\n    return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CorePalette } from \"../palettes/core_palette\";\n\n/**\n * Represents an Android 12 color scheme, a mapping of color roles to colors.\n */\nexport class SchemeAndroid {\n  get colorAccentPrimary(): number {\n    return this.props.colorAccentPrimary;\n  }\n\n  get colorAccentPrimaryVariant(): number {\n    return this.props.colorAccentPrimaryVariant;\n  }\n\n  get colorAccentSecondary(): number {\n    return this.props.colorAccentSecondary;\n  }\n\n  get colorAccentSecondaryVariant(): number {\n    return this.props.colorAccentSecondaryVariant;\n  }\n\n  get colorAccentTertiary(): number {\n    return this.props.colorAccentTertiary;\n  }\n\n  get colorAccentTertiaryVariant(): number {\n    return this.props.colorAccentTertiaryVariant;\n  }\n\n  get textColorPrimary(): number {\n    return this.props.textColorPrimary;\n  }\n\n  get textColorSecondary(): number {\n    return this.props.textColorSecondary;\n  }\n\n  get textColorTertiary(): number {\n    return this.props.textColorTertiary;\n  }\n\n  get textColorPrimaryInverse(): number {\n    return this.props.textColorPrimaryInverse;\n  }\n\n  get textColorSecondaryInverse(): number {\n    return this.props.textColorSecondaryInverse;\n  }\n\n  get textColorTertiaryInverse(): number {\n    return this.props.textColorTertiaryInverse;\n  }\n\n  get colorBackground(): number {\n    return this.props.colorBackground;\n  }\n\n  get colorBackgroundFloating(): number {\n    return this.props.colorBackgroundFloating;\n  }\n\n  get colorSurface(): number {\n    return this.props.colorSurface;\n  }\n\n  get colorSurfaceVariant(): number {\n    return this.props.colorSurfaceVariant;\n  }\n\n  get colorSurfaceHighlight(): number {\n    return this.props.colorSurfaceHighlight;\n  }\n\n  get surfaceHeader(): number {\n    return this.props.surfaceHeader;\n  }\n\n  get underSurface(): number {\n    return this.props.underSurface;\n  }\n\n  get offState(): number {\n    return this.props.offState;\n  }\n\n  get accentSurface(): number {\n    return this.props.accentSurface;\n  }\n\n  get textPrimaryOnAccent(): number {\n    return this.props.textPrimaryOnAccent;\n  }\n\n  get textSecondaryOnAccent(): number {\n    return this.props.textSecondaryOnAccent;\n  }\n\n  get volumeBackground(): number {\n    return this.props.volumeBackground;\n  }\n\n  get scrim(): number {\n    return this.props.scrim;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material color scheme, based on the color's hue.\n   */\n  static light(argb: number): SchemeAndroid {\n    const core = CorePalette.of(argb);\n    return SchemeAndroid.lightFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material color scheme, based on the color's hue.\n   */\n  static dark(argb: number): SchemeAndroid {\n    const core = CorePalette.of(argb);\n    return SchemeAndroid.darkFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Android color scheme, based on the color's hue.\n   */\n  static lightContent(argb: number): SchemeAndroid {\n    const core = CorePalette.contentOf(argb);\n    return SchemeAndroid.lightFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Android color scheme, based on the color's hue.\n   */\n  static darkContent(argb: number): SchemeAndroid {\n    const core = CorePalette.contentOf(argb);\n    return SchemeAndroid.darkFromCorePalette(core);\n  }\n\n  /**\n   * Light scheme from core palette\n   */\n  static lightFromCorePalette(core: CorePalette): SchemeAndroid {\n    return new SchemeAndroid({\n      colorAccentPrimary: core.a1.tone(90),\n      colorAccentPrimaryVariant: core.a1.tone(40),\n      colorAccentSecondary: core.a2.tone(90),\n      colorAccentSecondaryVariant: core.a2.tone(40),\n      colorAccentTertiary: core.a3.tone(90),\n      colorAccentTertiaryVariant: core.a3.tone(40),\n      textColorPrimary: core.n1.tone(10),\n      textColorSecondary: core.n2.tone(30),\n      textColorTertiary: core.n2.tone(50),\n      textColorPrimaryInverse: core.n1.tone(95),\n      textColorSecondaryInverse: core.n1.tone(80),\n      textColorTertiaryInverse: core.n1.tone(60),\n      colorBackground: core.n1.tone(95),\n      colorBackgroundFloating: core.n1.tone(98),\n      colorSurface: core.n1.tone(98),\n      colorSurfaceVariant: core.n1.tone(90),\n      colorSurfaceHighlight: core.n1.tone(100),\n      surfaceHeader: core.n1.tone(90),\n      underSurface: core.n1.tone(0),\n      offState: core.n1.tone(20),\n      accentSurface: core.a2.tone(95),\n      textPrimaryOnAccent: core.n1.tone(10),\n      textSecondaryOnAccent: core.n2.tone(30),\n      volumeBackground: core.n1.tone(25),\n      scrim: core.n1.tone(80),\n    });\n  }\n\n  /**\n   * Dark scheme from core palette\n   */\n  static darkFromCorePalette(core: CorePalette): SchemeAndroid {\n    return new SchemeAndroid({\n      colorAccentPrimary: core.a1.tone(90),\n      colorAccentPrimaryVariant: core.a1.tone(70),\n      colorAccentSecondary: core.a2.tone(90),\n      colorAccentSecondaryVariant: core.a2.tone(70),\n      colorAccentTertiary: core.a3.tone(90),\n      colorAccentTertiaryVariant: core.a3.tone(70),\n      textColorPrimary: core.n1.tone(95),\n      textColorSecondary: core.n2.tone(80),\n      textColorTertiary: core.n2.tone(60),\n      textColorPrimaryInverse: core.n1.tone(10),\n      textColorSecondaryInverse: core.n1.tone(30),\n      textColorTertiaryInverse: core.n1.tone(50),\n      colorBackground: core.n1.tone(10),\n      colorBackgroundFloating: core.n1.tone(10),\n      colorSurface: core.n1.tone(20),\n      colorSurfaceVariant: core.n1.tone(30),\n      colorSurfaceHighlight: core.n1.tone(35),\n      surfaceHeader: core.n1.tone(30),\n      underSurface: core.n1.tone(0),\n      offState: core.n1.tone(20),\n      accentSurface: core.a2.tone(95),\n      textPrimaryOnAccent: core.n1.tone(10),\n      textSecondaryOnAccent: core.n2.tone(30),\n      volumeBackground: core.n1.tone(25),\n      scrim: core.n1.tone(80),\n    });\n  }\n\n  private constructor(\n    private readonly props: {\n      colorAccentPrimary: number;\n      colorAccentPrimaryVariant: number;\n      colorAccentSecondary: number;\n      colorAccentSecondaryVariant: number;\n      colorAccentTertiary: number;\n      colorAccentTertiaryVariant: number;\n      textColorPrimary: number;\n      textColorSecondary: number;\n      textColorTertiary: number;\n      textColorPrimaryInverse: number;\n      textColorSecondaryInverse: number;\n      textColorTertiaryInverse: number;\n      colorBackground: number;\n      colorBackgroundFloating: number;\n      colorSurface: number;\n      colorSurfaceVariant: number;\n      colorSurfaceHighlight: number;\n      surfaceHeader: number;\n      underSurface: number;\n      offState: number;\n      accentSurface: number;\n      textPrimaryOnAccent: number;\n      textSecondaryOnAccent: number;\n      volumeBackground: number;\n      scrim: number;\n    },\n  ) {}\n\n  toJSON() {\n    return { ...this.props };\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n\n/**\n * A scheme that places the source color in `Scheme.primaryContainer`.\n *\n * Primary Container is the source color, adjusted for color relativity.\n * It maintains constant appearance in light mode and dark mode.\n * This adds ~5 tone in light mode, and subtracts ~5 tone in dark mode.\n * Tertiary Container is the complement to the source color, using\n * `TemperatureCache`. It also maintains constant appearance.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeContent extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.CONTENT,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n/**\n * A Dynamic Color theme that is intentionally detached from the source color.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeExpressive extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.EXPRESSIVE,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n\n/**\n * A scheme that places the source color in `Scheme.primaryContainer`.\n *\n * Primary Container is the source color, adjusted for color relativity.\n * It maintains constant appearance in light mode and dark mode.\n * This adds ~5 tone in light mode, and subtracts ~5 tone in dark mode.\n * Tertiary Container is the complement to the source color, using\n * `TemperatureCache`. It also maintains constant appearance.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeFidelity extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.FIDELITY,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n\n/**\n * A playful theme - the source color's hue does not appear in the theme.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeFruitSalad extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.FRUIT_SALAD,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n\n/**\n * A Dynamic Color theme that is grayscale.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeMonochrome extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.MONOCHROME,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n\n/**\n * A Dynamic Color theme that is near grayscale.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeNeutral extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.NEUTRAL,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n\n/**\n * A playful theme - the source color's hue does not appear in the theme.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeRainbow extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.RAINBOW,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n\n/**\n * A Dynamic Color theme with low to medium colorfulness and a Tertiary\n * TonalPalette with a hue related to the source color.\n *\n * The default Material You theme on Android 12 and 13.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeTonalSpot extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.TONAL_SPOT,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicScheme } from \"../dynamiccolor/dynamic_scheme\";\nimport type { Platform } from \"../dynamiccolor/platform\";\nimport type { SpecVersion } from \"../dynamiccolor/spec_version\";\nimport { Variant } from \"../dynamiccolor/variant\";\nimport { Hct } from \"../hct/hct\";\n\n/**\n * A Dynamic Color theme that maxes out colorfulness at each position in the\n * Primary Tonal Palette.\n *\n * @deprecated Use {@link DynamicScheme.from} instead.\n */\nexport class SchemeVibrant extends DynamicScheme {\n  constructor(\n    sourceColorHct: Hct,\n    isDark: boolean,\n    contrastLevel: number,\n    specVersion: SpecVersion = DynamicScheme.DEFAULT_SPEC_VERSION,\n    platform: Platform = DynamicScheme.DEFAULT_PLATFORM,\n  ) {\n    super({\n      sourceColorHct,\n      variant: Variant.VIBRANT,\n      contrastLevel,\n      isDark,\n      platform,\n      specVersion,\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport { CorePalette } from \"../palettes/core_palette\";\n\n/**\n * DEPRECATED. The `Scheme` class is deprecated in favor of `DynamicScheme`.\n * Please see\n * https://github.com/material-foundation/material-color-utilities/blob/main/make_schemes.md\n * for migration guidance.\n *\n * Represents a Material color scheme, a mapping of color roles to colors.\n */\nexport class Scheme {\n  get primary(): number {\n    return this.props.primary;\n  }\n\n  get onPrimary(): number {\n    return this.props.onPrimary;\n  }\n\n  get primaryContainer(): number {\n    return this.props.primaryContainer;\n  }\n\n  get onPrimaryContainer(): number {\n    return this.props.onPrimaryContainer;\n  }\n\n  get secondary(): number {\n    return this.props.secondary;\n  }\n\n  get onSecondary(): number {\n    return this.props.onSecondary;\n  }\n\n  get secondaryContainer(): number {\n    return this.props.secondaryContainer;\n  }\n\n  get onSecondaryContainer(): number {\n    return this.props.onSecondaryContainer;\n  }\n\n  get tertiary(): number {\n    return this.props.tertiary;\n  }\n\n  get onTertiary(): number {\n    return this.props.onTertiary;\n  }\n\n  get tertiaryContainer(): number {\n    return this.props.tertiaryContainer;\n  }\n\n  get onTertiaryContainer(): number {\n    return this.props.onTertiaryContainer;\n  }\n\n  get error(): number {\n    return this.props.error;\n  }\n\n  get onError(): number {\n    return this.props.onError;\n  }\n\n  get errorContainer(): number {\n    return this.props.errorContainer;\n  }\n\n  get onErrorContainer(): number {\n    return this.props.onErrorContainer;\n  }\n\n  get background(): number {\n    return this.props.background;\n  }\n\n  get onBackground(): number {\n    return this.props.onBackground;\n  }\n\n  get surface(): number {\n    return this.props.surface;\n  }\n\n  get onSurface(): number {\n    return this.props.onSurface;\n  }\n\n  get surfaceVariant(): number {\n    return this.props.surfaceVariant;\n  }\n\n  get onSurfaceVariant(): number {\n    return this.props.onSurfaceVariant;\n  }\n\n  get outline(): number {\n    return this.props.outline;\n  }\n\n  get outlineVariant(): number {\n    return this.props.outlineVariant;\n  }\n\n  get shadow(): number {\n    return this.props.shadow;\n  }\n\n  get scrim(): number {\n    return this.props.scrim;\n  }\n\n  get inverseSurface(): number {\n    return this.props.inverseSurface;\n  }\n\n  get inverseOnSurface(): number {\n    return this.props.inverseOnSurface;\n  }\n\n  get inversePrimary(): number {\n    return this.props.inversePrimary;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material color scheme, based on the color's hue.\n   */\n  static light(argb: number): Scheme {\n    return Scheme.lightFromCorePalette(CorePalette.of(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material color scheme, based on the color's hue.\n   */\n  static dark(argb: number): Scheme {\n    return Scheme.darkFromCorePalette(CorePalette.of(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material content color scheme, based on the color's hue.\n   */\n  static lightContent(argb: number): Scheme {\n    return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material content color scheme, based on the color's hue.\n   */\n  static darkContent(argb: number): Scheme {\n    return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));\n  }\n\n  /**\n   * Light scheme from core palette\n   */\n  static lightFromCorePalette(core: CorePalette): Scheme {\n    return new Scheme({\n      primary: core.a1.tone(40),\n      onPrimary: core.a1.tone(100),\n      primaryContainer: core.a1.tone(90),\n      onPrimaryContainer: core.a1.tone(10),\n      secondary: core.a2.tone(40),\n      onSecondary: core.a2.tone(100),\n      secondaryContainer: core.a2.tone(90),\n      onSecondaryContainer: core.a2.tone(10),\n      tertiary: core.a3.tone(40),\n      onTertiary: core.a3.tone(100),\n      tertiaryContainer: core.a3.tone(90),\n      onTertiaryContainer: core.a3.tone(10),\n      error: core.error.tone(40),\n      onError: core.error.tone(100),\n      errorContainer: core.error.tone(90),\n      onErrorContainer: core.error.tone(10),\n      background: core.n1.tone(99),\n      onBackground: core.n1.tone(10),\n      surface: core.n1.tone(99),\n      onSurface: core.n1.tone(10),\n      surfaceVariant: core.n2.tone(90),\n      onSurfaceVariant: core.n2.tone(30),\n      outline: core.n2.tone(50),\n      outlineVariant: core.n2.tone(80),\n      shadow: core.n1.tone(0),\n      scrim: core.n1.tone(0),\n      inverseSurface: core.n1.tone(20),\n      inverseOnSurface: core.n1.tone(95),\n      inversePrimary: core.a1.tone(80),\n    });\n  }\n\n  /**\n   * Dark scheme from core palette\n   */\n  static darkFromCorePalette(core: CorePalette): Scheme {\n    return new Scheme({\n      primary: core.a1.tone(80),\n      onPrimary: core.a1.tone(20),\n      primaryContainer: core.a1.tone(30),\n      onPrimaryContainer: core.a1.tone(90),\n      secondary: core.a2.tone(80),\n      onSecondary: core.a2.tone(20),\n      secondaryContainer: core.a2.tone(30),\n      onSecondaryContainer: core.a2.tone(90),\n      tertiary: core.a3.tone(80),\n      onTertiary: core.a3.tone(20),\n      tertiaryContainer: core.a3.tone(30),\n      onTertiaryContainer: core.a3.tone(90),\n      error: core.error.tone(80),\n      onError: core.error.tone(20),\n      errorContainer: core.error.tone(30),\n      onErrorContainer: core.error.tone(80),\n      background: core.n1.tone(10),\n      onBackground: core.n1.tone(90),\n      surface: core.n1.tone(10),\n      onSurface: core.n1.tone(90),\n      surfaceVariant: core.n2.tone(30),\n      onSurfaceVariant: core.n2.tone(80),\n      outline: core.n2.tone(60),\n      outlineVariant: core.n2.tone(30),\n      shadow: core.n1.tone(0),\n      scrim: core.n1.tone(0),\n      inverseSurface: core.n1.tone(90),\n      inverseOnSurface: core.n1.tone(20),\n      inversePrimary: core.a1.tone(40),\n    });\n  }\n\n  private constructor(\n    private readonly props: {\n      primary: number;\n      onPrimary: number;\n      primaryContainer: number;\n      onPrimaryContainer: number;\n      secondary: number;\n      onSecondary: number;\n      secondaryContainer: number;\n      onSecondaryContainer: number;\n      tertiary: number;\n      onTertiary: number;\n      tertiaryContainer: number;\n      onTertiaryContainer: number;\n      error: number;\n      onError: number;\n      errorContainer: number;\n      onErrorContainer: number;\n      background: number;\n      onBackground: number;\n      surface: number;\n      onSurface: number;\n      surfaceVariant: number;\n      onSurfaceVariant: number;\n      outline: number;\n      outlineVariant: number;\n      shadow: number;\n      scrim: number;\n      inverseSurface: number;\n      inverseOnSurface: number;\n      inversePrimary: number;\n    },\n  ) {}\n\n  toJSON() {\n    return {\n      ...this.props,\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Hct } from \"../hct/hct\";\nimport * as math from \"../utils/math_utils\";\n\n/**\n * Default options for ranking colors based on usage counts.\n * desired: is the max count of the colors returned.\n * fallbackColorARGB: Is the default color that should be used if no\n *                    other colors are suitable.\n * filter: controls if the resulting colors should be filtered to not include\n *         hues that are not used often enough, and colors that are effectively\n *         grayscale.\n */\ndeclare interface ScoreOptions {\n  desired?: number;\n  fallbackColorARGB?: number;\n  filter?: boolean;\n}\n\nconst SCORE_OPTION_DEFAULTS = {\n  desired: 4, // 4 colors matches what Android wallpaper picker.\n  fallbackColorARGB: 0xff4285f4, // Google Blue.\n  filter: true, // Avoid unsuitable colors.\n};\n\nfunction compare(\n  a: { hct: Hct; score: number },\n  b: { hct: Hct; score: number },\n): number {\n  if (a.score > b.score) {\n    return -1;\n  } else if (a.score < b.score) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n *  Given a large set of colors, remove colors that are unsuitable for a UI\n *  theme, and rank the rest based on suitability.\n *\n *  Enables use of a high cluster count for image quantization, thus ensuring\n *  colors aren't muddied, while curating the high cluster count to a much\n *  smaller number of appropriate choices.\n */\nexport class Score {\n  private static readonly TARGET_CHROMA = 48.0; // A1 Chroma\n  private static readonly WEIGHT_PROPORTION = 0.7;\n  private static readonly WEIGHT_CHROMA_ABOVE = 0.3;\n  private static readonly WEIGHT_CHROMA_BELOW = 0.1;\n  private static readonly CUTOFF_CHROMA = 5.0;\n  private static readonly CUTOFF_EXCITED_PROPORTION = 0.01;\n\n  private constructor() {}\n\n  /**\n   * Given a map with keys of colors and values of how often the color appears,\n   * rank the colors based on suitability for being used for a UI theme.\n   *\n   * @param colorsToPopulation map with keys of colors and values of how often\n   *     the color appears, usually from a source image.\n   * @param {ScoreOptions} options optional parameters.\n   * @return Colors sorted by suitability for a UI theme. The most suitable\n   *     color is the first item, the least suitable is the last. There will\n   *     always be at least one color returned. If all the input colors\n   *     were not suitable for a theme, a default fallback color will be\n   *     provided, Google Blue.\n   */\n  static score(\n    colorsToPopulation: Map<number, number>,\n    options?: ScoreOptions,\n  ): number[] {\n    const { desired, fallbackColorARGB, filter } = {\n      ...SCORE_OPTION_DEFAULTS,\n      ...options,\n    };\n    // Get the HCT color for each Argb value, while finding the per hue count and\n    // total count.\n    const colorsHct: Hct[] = [];\n    const huePopulation = new Array<number>(360).fill(0);\n    let populationSum = 0;\n    for (const [argb, population] of colorsToPopulation.entries()) {\n      const hct = Hct.fromInt(argb);\n      colorsHct.push(hct);\n      const hue = Math.floor(hct.hue);\n      huePopulation[hue] += population;\n      populationSum += population;\n    }\n\n    // Hues with more usage in neighboring 30 degree slice get a larger number.\n    const hueExcitedProportions = new Array<number>(360).fill(0.0);\n    for (let hue = 0; hue < 360; hue++) {\n      const proportion = huePopulation[hue] / populationSum;\n      for (let i = hue - 14; i < hue + 16; i++) {\n        const neighborHue = math.sanitizeDegreesInt(i);\n        hueExcitedProportions[neighborHue] += proportion;\n      }\n    }\n\n    // Scores each HCT color based on usage and chroma, while optionally\n    // filtering out values that do not have enough chroma or usage.\n    const scoredHct = new Array<{ hct: Hct; score: number }>();\n    for (const hct of colorsHct) {\n      const hue = math.sanitizeDegreesInt(Math.round(hct.hue));\n      const proportion = hueExcitedProportions[hue];\n      if (\n        filter &&\n        (hct.chroma < Score.CUTOFF_CHROMA ||\n          proportion <= Score.CUTOFF_EXCITED_PROPORTION)\n      ) {\n        continue;\n      }\n\n      const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;\n      const chromaWeight =\n        hct.chroma < Score.TARGET_CHROMA\n          ? Score.WEIGHT_CHROMA_BELOW\n          : Score.WEIGHT_CHROMA_ABOVE;\n      const chromaScore = (hct.chroma - Score.TARGET_CHROMA) * chromaWeight;\n      const score = proportionScore + chromaScore;\n      scoredHct.push({ hct, score });\n    }\n    // Sorted so that colors with higher scores come first.\n    scoredHct.sort(compare);\n\n    // Iterates through potential hue differences in degrees in order to select\n    // the colors with the largest distribution of hues possible. Starting at\n    // 90 degrees(maximum difference for 4 colors) then decreasing down to a\n    // 15 degree minimum.\n    const chosenColors: Hct[] = [];\n    for (\n      let differenceDegrees = 90;\n      differenceDegrees >= 15;\n      differenceDegrees--\n    ) {\n      chosenColors.length = 0;\n      for (const { hct } of scoredHct) {\n        const duplicateHue = chosenColors.find((chosenHct) => {\n          return (\n            math.differenceDegrees(hct.hue, chosenHct.hue) < differenceDegrees\n          );\n        });\n        if (!duplicateHue) {\n          chosenColors.push(hct);\n        }\n        if (chosenColors.length >= desired) break;\n      }\n      if (chosenColors.length >= desired) break;\n    }\n    const colors: number[] = [];\n    if (chosenColors.length === 0) {\n      colors.push(fallbackColorARGB);\n    }\n    for (const chosenHct of chosenColors) {\n      colors.push(chosenHct.toInt());\n    }\n    return colors;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QuantizerCelebi } from \"../quantize/quantizer_celebi\";\nimport { Score } from \"../score/score\";\n\nimport { argbFromRgb } from \"./color_utils\";\n\n/**\n * Get the source color from an image.\n *\n * @param image The image element\n * @return Source color - the color most suitable for creating a UI theme\n */\nexport async function sourceColorFromImage(image: HTMLImageElement) {\n  // Convert Image data to Pixel Array\n  const imageBytes = await new Promise<Uint8ClampedArray>((resolve, reject) => {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n    if (!context) {\n      reject(new Error(\"Could not get canvas context\"));\n      return;\n    }\n    const loadCallback = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      let rect = [0, 0, image.width, image.height];\n      const area = image.dataset[\"area\"];\n      if (area && /^\\d+(\\s*,\\s*\\d+){3}$/.test(area)) {\n        rect = area.split(/\\s*,\\s*/).map((s) => {\n          // tslint:disable-next-line:ban\n          return parseInt(s, 10);\n        });\n      }\n      const [sx, sy, sw, sh] = rect;\n      resolve(context.getImageData(sx, sy, sw, sh).data);\n    };\n    const errorCallback = () => {\n      reject(new Error(\"Image load failed\"));\n    };\n    if (image.complete) {\n      loadCallback();\n    } else {\n      image.onload = loadCallback;\n      image.onerror = errorCallback;\n    }\n  });\n\n  return sourceColorFromImageBytes(imageBytes);\n}\n\n/**\n * Get the source color from image bytes.\n *\n * @param imageBytes The image bytes\n * @return Source color - the color most suitable for creating a UI theme\n */\nexport function sourceColorFromImageBytes(imageBytes: Uint8ClampedArray) {\n  // Convert Image data to Pixel Array\n  const pixels: number[] = [];\n  for (let i = 0; i < imageBytes.length; i += 4) {\n    const r = imageBytes[i];\n    const g = imageBytes[i + 1];\n    const b = imageBytes[i + 2];\n    const a = imageBytes[i + 3];\n    if (a < 255) {\n      continue;\n    }\n    const argb = argbFromRgb(r, g, b);\n    pixels.push(argb);\n  }\n\n  // Convert Pixels to Material Colors\n  const result = QuantizerCelebi.quantize(pixels, 128);\n  const ranked = Score.score(result);\n  const top = ranked[0];\n  return top;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as colorUtils from \"./color_utils\";\n\n/**\n * Utility methods for hexadecimal representations of colors.\n */\n\n/**\n * @param argb ARGB representation of a color.\n * @return Hex string representing color, ex. #ff0000 for red.\n */\nexport function hexFromArgb(argb: number) {\n  const r = colorUtils.redFromArgb(argb);\n  const g = colorUtils.greenFromArgb(argb);\n  const b = colorUtils.blueFromArgb(argb);\n  const outParts = [r.toString(16), g.toString(16), b.toString(16)];\n\n  // Pad single-digit output values\n  for (const [i, part] of outParts.entries()) {\n    if (part.length === 1) {\n      outParts[i] = \"0\" + part;\n    }\n  }\n\n  return \"#\" + outParts.join(\"\");\n}\n\n/**\n * @param hex String representing color as hex code. Accepts strings with or\n *     without leading #, and string representing the color using 3, 6, or 8\n *     hex characters.\n * @return ARGB representation of color.\n */\nexport function argbFromHex(hex: string) {\n  hex = hex.replace(\"#\", \"\");\n  const isThree = hex.length === 3;\n  const isSix = hex.length === 6;\n  const isEight = hex.length === 8;\n  if (!isThree && !isSix && !isEight) {\n    throw new Error(\"unexpected hex \" + hex);\n  }\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (isThree) {\n    r = parseIntHex(hex.slice(0, 1).repeat(2));\n    g = parseIntHex(hex.slice(1, 2).repeat(2));\n    b = parseIntHex(hex.slice(2, 3).repeat(2));\n  } else if (isSix) {\n    r = parseIntHex(hex.slice(0, 2));\n    g = parseIntHex(hex.slice(2, 4));\n    b = parseIntHex(hex.slice(4, 6));\n  } else if (isEight) {\n    r = parseIntHex(hex.slice(2, 4));\n    g = parseIntHex(hex.slice(4, 6));\n    b = parseIntHex(hex.slice(6, 8));\n  }\n\n  return (\n    ((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>> 0\n  );\n}\n\nfunction parseIntHex(value: string) {\n  // tslint:disable-next-line:ban\n  return parseInt(value, 16);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blend } from \"../blend/blend.js\";\nimport { CorePalette } from \"../palettes/core_palette.js\";\nimport { TonalPalette } from \"../palettes/tonal_palette.js\";\nimport { Scheme } from \"../scheme/scheme.js\";\n\nimport { sourceColorFromImage } from \"./image_utils.js\";\nimport { hexFromArgb } from \"./string_utils.js\";\n\n/**\n * Custom color used to pair with a theme\n */\nexport interface CustomColor {\n  value: number;\n  name: string;\n  blend: boolean;\n}\n\n/**\n * Color group\n */\nexport interface ColorGroup {\n  color: number;\n  onColor: number;\n  colorContainer: number;\n  onColorContainer: number;\n}\n\n/**\n * Custom Color Group\n */\nexport interface CustomColorGroup {\n  color: CustomColor;\n  value: number;\n  light: ColorGroup;\n  dark: ColorGroup;\n}\n\n/**\n * Theme\n */\nexport interface Theme {\n  source: number;\n  schemes: { light: Scheme; dark: Scheme };\n  palettes: {\n    primary: TonalPalette;\n    secondary: TonalPalette;\n    tertiary: TonalPalette;\n    neutral: TonalPalette;\n    neutralVariant: TonalPalette;\n    error: TonalPalette;\n  };\n  customColors: CustomColorGroup[];\n}\n\n/**\n * Generate a theme from a source color\n *\n * @param source Source color\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport function themeFromSourceColor(\n  source: number,\n  customColors: CustomColor[] = [],\n): Theme {\n  const palette = CorePalette.of(source);\n  return {\n    source,\n    schemes: {\n      light: Scheme.light(source),\n      dark: Scheme.dark(source),\n    },\n    palettes: {\n      primary: palette.a1,\n      secondary: palette.a2,\n      tertiary: palette.a3,\n      neutral: palette.n1,\n      neutralVariant: palette.n2,\n      error: palette.error,\n    },\n    customColors: customColors.map((c) => customColor(source, c)),\n  };\n}\n\n/**\n * Generate a theme from an image source\n *\n * @param image Image element\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport async function themeFromImage(\n  image: HTMLImageElement,\n  customColors: CustomColor[] = [],\n) {\n  const source = await sourceColorFromImage(image);\n  return themeFromSourceColor(source, customColors);\n}\n\n/**\n * Generate custom color group from source and target color\n *\n * @param source Source color\n * @param color Custom color\n * @return Custom color group\n *\n * @link https://m3.material.io/styles/color/the-color-system/color-roles\n */\nexport function customColor(\n  source: number,\n  color: CustomColor,\n): CustomColorGroup {\n  let value = color.value;\n  const from = value;\n  const to = source;\n  if (color.blend) {\n    value = Blend.harmonize(from, to);\n  }\n  const palette = CorePalette.of(value);\n  const tones = palette.a1;\n  return {\n    color,\n    value,\n    light: {\n      color: tones.tone(40),\n      onColor: tones.tone(100),\n      colorContainer: tones.tone(90),\n      onColorContainer: tones.tone(10),\n    },\n    dark: {\n      color: tones.tone(80),\n      onColor: tones.tone(20),\n      colorContainer: tones.tone(30),\n      onColorContainer: tones.tone(90),\n    },\n  };\n}\n\n/**\n * Apply a theme to an element\n *\n * @param theme Theme object\n * @param options Options\n */\nexport function applyTheme(\n  theme: Theme,\n  options?: {\n    dark?: boolean;\n    target?: HTMLElement;\n    brightnessSuffix?: boolean;\n    paletteTones?: number[];\n  },\n) {\n  const target = options?.target || document.body;\n  const isDark = options?.dark ?? false;\n  const scheme = isDark ? theme.schemes.dark : theme.schemes.light;\n  setSchemeProperties(target, scheme);\n  if (options?.brightnessSuffix) {\n    setSchemeProperties(target, theme.schemes.dark, \"-dark\");\n    setSchemeProperties(target, theme.schemes.light, \"-light\");\n  }\n  if (options?.paletteTones) {\n    const tones = options?.paletteTones ?? [];\n    for (const [key, palette] of Object.entries(theme.palettes)) {\n      const paletteKey = key.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n      for (const tone of tones) {\n        const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;\n        const color = hexFromArgb(palette.tone(tone));\n        target.style.setProperty(token, color);\n      }\n    }\n  }\n}\n\nfunction setSchemeProperties(\n  target: HTMLElement,\n  scheme: Scheme,\n  suffix: string = \"\",\n) {\n  for (const [key, value] of Object.entries(scheme.toJSON())) {\n    const token = key.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n    const color = hexFromArgb(value);\n    target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);\n  }\n}\n"],"mappings":"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"}